//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.session.unary.v1;

option java_multiple_files = true;
option java_package = "oak.session.unary.v1";

message UnaryRequest {
  bytes body = 1;
  // Links a sequence of messages, declaring them as part of a single a session.
  // Note that this byte array is expected to be fixed length, as defined in the
  // service implementation. Protobuf unfortunately does not support declaring
  // the length here.
  bytes session_id = 2;
}

message UnaryResponse {
  bytes body = 1;
}

// Service definition for unary communication with the runtime.
// It accomplishes the same goal as StreamingSession, just with a differnet
// request model. Oak Applications can choose either request model in the
// configuration of the runtime. Eventually we plan to transition all clients to
// use UnarySessions.
service UnarySession {
  // Used to send a sequence of a messages for session key negotiation and
  // encrypted payload exchange.
  //
  // The expected message seqeuence starts with an intial handshake:
  // - Client->Server: `UnaryRequest` with a serialized `ClientHello` message.
  // - Server->Client: `UnaryResponse` with a serialized `ServerIdentity` message.
  // - Client->Server: `UnaryRequest` with a serialized `ClientIdentity` message.
  // - Server->Client: `UnaryResponse` with an empty message, confirming handshake completion.
  //
  // After the handshake, both client and server derive matching session keys
  // and are then able to exchange multiple UnaryRequest/UnaryResponse request
  // pairs that contain a seralized `EncryptedData` message:
  // - Client->Server: `UnaryRequest` with a serialized `EncryptedData` message.
  // - Server->Client: `UnaryResponse` with a serialized `EncryptedData` message.
  //
  // Messages are represented as serialized messages defined in the `remote_attestation::message.rs`
  // and `com.google.oak.remote_attestation.Message`.
  rpc Message(UnaryRequest) returns (UnaryResponse);
}
