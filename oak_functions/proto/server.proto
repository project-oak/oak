//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.functions.server;

import "remote_attestation/proto/remote_attestation.proto";

option java_multiple_files = true;
option java_package = "oak.functions.server";

// Wrapper around the encrypted payload.
// TODO(#2144): Extend this with additional potentially public fields, for instance for specifying
// policies.
message Request {
  // Payload encrypted using the session key.
  oak.remote_attestation.EncryptedData encrypted_payload = 1;
}

message AttestedInvokeRequest {
  oneof request_type {
    // Initialization message that starts the Remote Attestation protocol.
    oak.remote_attestation.ClientHello client_hello = 1;
    // Client part of session key negotiation.
    oak.remote_attestation.ClientIdentity client_identity = 2;
    // Request with payload encrypted using the session key.
    Request request = 3;
  }
}

message AttestedInvokeResponse {
  oneof response_type {
    // Server part of session key negotiation.
    oak.remote_attestation.ServerIdentity server_identity = 1;
    // Payload encrypted using the session key.
    oak.remote_attestation.EncryptedData encrypted_payload = 2;
  }
}

service RemoteAttestation {
  // Creates a message stream for session key negotiation and encrypted payload exchange.
  //
  // The created message stream looks as follows:
  // - Client->Server: `AttestedInvokeRequest` with `ClientHello`.
  // - Server->Client: `AttestedInvokeResponse` with `ServerIdentity`.
  // - Client->Server: `AttestedInvokeRequest` with `ClientIdentity`.
  // - Client->Server: `AttestedInvokeRequest` with `EncryptedData`.
  // - Server->Client: `AttestedInvokeResponse` with `EncryptedData`.
  rpc AttestedInvoke(stream AttestedInvokeRequest) returns (stream AttestedInvokeResponse);
}
