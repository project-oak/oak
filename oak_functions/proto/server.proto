//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.session.stream.v1;

option java_multiple_files = true;
option java_package = "oak.session.stream.v1";

message StreamingRequest {
  bytes body = 1;
}

message StreamingResponse {
  bytes body = 1;
}

service StreamingSession {
  // Creates a message stream for session key negotiation and encrypted payload exchange.
  //
  // The created message stream looks as follows:
  // - Client->Server: `StreamingRequest` with a serialized `ClientHello` message.
  // - Server->Client: `StreamingResponse` with a serialized `ServerIdentity` message.
  // - Client->Server: `StreamingRequest` with a serialized `ClientIdentity` message.
  // - Client->Server: `StreamingRequest` with a serialized `EncryptedData` message.
  // - Server->Client: `StreamingResponse` with a serialized `EncryptedData` message.
  //
  // Messages are represented as serialized messages defined in the `remote_attestation::message.rs`
  // and `com.google.oak.remote_attestation.Message`.
  rpc Stream(stream StreamingRequest) returns (stream StreamingResponse);
}
