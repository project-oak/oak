#!/usr/bin/env bash

readonly OAK_ROOT="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "$0")")")")")")"

(
cd "${OAK_ROOT}"
# shellcheck source=scripts/common
source ./scripts/common

# Declare variables used in `deploy_oak_functions_loader` and `deploy_oak_functions_endpoints` scripts
export EXAMPLE_NAME='weather_lookup'
export FUNCTIONS_INSTANCE_NAME='oak-functions-weather-lookup'
export CLOUD_RUN_SERVICE_NAME='weather-lookup-endpoint'
export API_TITLE='Oak Functions Weather Lookup Endpoint'

generate_data=0
redeploy_endpoint=0

while getopts "geh" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-m]
Deploy weather_lookup:
  -g Generate and upload weather data
  -e Redeploy the Cloud Endpoint for weather lookup
  -h    Print Help (this message) and exit"
      exit 0;;
    g)
      generate_data=1;;
    e)
      redeploy_endpoint=1;;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done

if [[ $generate_data == 1 ]]; then
 # Generate and upload weather data
 ./scripts/generate_and_upload_lookup_data_weather
fi

# Deploy Oak Functions loader for the `weather_lookup` example
./scripts/deploy_oak_functions_loader

if [[ $redeploy_endpoint == 1 ]]; then
  # Deploy Cloud Endpoints service
  ./scripts/deploy_oak_functions_endpoints
fi

# Find the Cloud Endpoints URL.
readonly CLOUD_RUN_SERVICE_URL="$(gcloud beta run services describe "${CLOUD_RUN_SERVICE_NAME}" --project="${GCP_PROJECT_ID}" --region=europe-west2 --platform=managed --format='value(status.url)')"

# Attempt to communicate with the newly deployed application.
# Test request coordinates are defined in `oak_functions/lookup_data_generator/src/data.rs`.
./oak_functions/client/rust/target/x86_64-unknown-linux-gnu/release/oak_functions_client \
  --uri="${CLOUD_RUN_SERVICE_URL}" \
  --request='{"lat":0,"lng":0}'
)
