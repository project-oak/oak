
# cargo-vet audits file

[criteria.crypto-safe]
description = """
All crypto algorithms in this crate have been reviewed by a relevant expert.

**Note**: If a crate does not implement crypto, use `does-not-implement-crypto`,
which implies `crypto-safe`, but does not require expert review in order to
audit for."""

[criteria.does-not-implement-crypto]
description = """
Inspection reveals that the crate in question does not attempt to implement any
cryptographic algorithms on its own.

Note that certification of this does not require an expert on all forms of
cryptography: it's expected for crates we import to be \"good enough\" citizens,
so they'll at least be forthcoming if they try to implement something
cryptographic. When in doubt, please ask an expert."""
implies = "crypto-safe"

[[audits.alloc-traits]]
who = "Andri Saar <andrisaar@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto"]
version = "0.1.1"
notes = "Crate has no dependecies, includes a safe wrapper for `Layout` that makes unsafe code safer, and has no crypto code."

[[audits.doc-comment]]
who = "Conrad Grobler <grobler@google.com>"
criteria = "does-not-implement-crypto"
version = "0.3.3"
notes = "This crate does not implement any cryptographic algorithms."

[[audits.static_assertions]]
who = "Andri Saar <andrisaar@google.com>"
criteria = "safe-to-deploy"
version = "1.1.0"
notes = """
By design, all the macros in `static_assertions` run at compile time, which means they do not deal with untrusted input at all.
Only one short block of unsafe code in `assert_eq_size_ptr`, which looks reasonable.
"""
