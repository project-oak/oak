//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.storage;

import "oak_abi/proto/label.proto";

// In all the request messages below, the storage_name field is used to partition data within an Oak
// Module and is not exposed to the StorageProvider. The StorageChannel generates a unique storage
// identifier from storage_name and the Oak Module identifier to prevent name collisions among Oak
// Modules.

message StorageItem {
  bytes name = 1;
  bytes value = 2;
  oak.label.Label label = 3;
}

message StorageChannelReadRequest {
  bytes storage_name = 1;
  bytes transaction_id = 2;
  StorageItem item = 3;
}

message StorageChannelReadResponse {
  StorageItem item = 1;
}

message StorageChannelWriteRequest {
  bytes storage_name = 1;
  bytes transaction_id = 2;
  StorageItem item = 3;
}

message StorageChannelWriteResponse {}

message StorageChannelDeleteRequest {
  bytes storage_name = 1;
  bytes transaction_id = 2;
  StorageItem item = 3;
}

message StorageChannelDeleteResponse {}

message StorageChannelBeginRequest {
  bytes storage_name = 1;
}

message StorageChannelBeginResponse {
  bytes transaction_id = 1;
}

message StorageChannelCommitRequest {
  bytes storage_name = 1;
  bytes transaction_id = 2;
}

message StorageChannelCommitResponse {}

message StorageChannelRollbackRequest {
  bytes storage_name = 1;
  bytes storage_id = 2;
  bytes transaction_id = 3;
}

message StorageChannelRollbackResponse {}

// Interface exposed by the Storage Node to other nodes over a pair of Oak Channels.
// Methods in this interface map 1:1 with those in storage.proto.
service StorageService {
  rpc Read(StorageChannelReadRequest) returns (StorageChannelReadResponse);
  rpc Write(StorageChannelWriteRequest) returns (StorageChannelWriteResponse);
  rpc Delete(StorageChannelDeleteRequest) returns (StorageChannelDeleteResponse);
  rpc Begin(StorageChannelBeginRequest) returns (StorageChannelBeginResponse);
  rpc Commit(StorageChannelBeginRequest) returns (StorageChannelCommitResponse);
  rpc Rollback(StorageChannelRollbackRequest) returns (StorageChannelRollbackResponse);
}
