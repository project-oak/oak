//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.label;

option java_multiple_files = true;
option java_package = "com.google.oak.label";

// Label represents information flowing through a Node or channel.
//
// See https://pdos.csail.mit.edu/papers/flume-sosp07.pdf section 3.1.
message Label {
  repeated Tag confidentiality_tags = 1;
  repeated Tag integrity_tags = 2;
}

// Tag represents a category of confidentiality or integrity that is associated with data within
// Oak, and refers to a Node or family of Nodes which are able to declassify data with that tag.
//
// For instance, a tag may refer to a user connected over gRPC, or to the functionality implemented
// by a WebAssembly Node, and this would require that data with those tags are declassified by the
// respective node before they can leave Oak.
//
// See https://pdos.csail.mit.edu/papers/flume-sosp07.pdf section 3.1.
message Tag {
  oneof tag {
    GrpcTag grpc_tag = 1;
    WebAssemblyModuleTag web_assembly_module_tag = 2;
    WebAssemblyModuleSignatureTag web_assembly_module_signature_tag = 3;
    TlsEndpointTag tls_endpoint_tag = 4;
    PublicKeyIdentityTag public_key_identity_tag = 5;
    Top top_tag = 6;
  }
}

// Policies related to gRPC communication, referring to the native gRPC node within the TCB.
message GrpcTag {
  // In order for a client to be authorized to fulfill a tag with (public)
  // `authorization_bearer_token_hmac` value h, the client needs to provide a (secret) bearer token
  // s such that h = HMAC-SHA256(s, "oak-grpc-bearer-token-1").
  //
  // We don't use the raw token t as the tag itself because labels are considered public by default,
  // so the confidentiality of the token would be compromised immediately.
  bytes authorization_bearer_token_hmac = 1;
}

// Policies related to modules, referring to the native WebAssembly node within the TCB.
message WebAssemblyModuleTag {
  // The attestation for a single WebAssembly module, a SHA256 digest of the module in binary
  // format.
  // TODO(#630): Replace this with identity assertions for multiple module
  // versions, based on a public verifiable log.
  bytes web_assembly_module_hash_sha_256 = 1;
}

// Policies related to modules, referring to the signature of the native WebAssembly node.
message WebAssemblyModuleSignatureTag {
  // Public key counterpart of the private key used to sign WebAssembly module.
  // In the current implementation is represented as a serialized Ed25519 public key.
  // https://ed25519.cr.yp.to
  bytes public_key = 1;
}

// Policies related to HTTPS communication.
//
// Applies to both the HTTP and gRPC client pseudo-nodes.
message TlsEndpointTag {
  // The TLS authority (host:port) of the remote endpoint, which is validated by the Oak Runtime
  // using the set of Certificate Authorities (CA) that are available to it.
  string authority = 1;
}

// Policies related to identities, specified using a cryptographic public key.
message PublicKeyIdentityTag {
  // Public key counterpart of the private key that is used to sign an authentication challenge.
  // In the current implementation it is represented as a serialized Ed25519 public key.
  // https://ed25519.cr.yp.to
  bytes public_key = 1;
}

// Message representing top element of the principal lattice. It can be used as a confidentiality
// tag to represent the top-secret level, or as a privilege to represent infinite downgrading
// privilege.
message Top {}
