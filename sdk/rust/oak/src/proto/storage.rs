// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `oak/proto/storage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct StorageReadRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub datum_name: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageReadRequest {
    fn default() -> &'a StorageReadRequest {
        <StorageReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageReadRequest {
    pub fn new() -> StorageReadRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes datum_name = 3;


    pub fn get_datum_name(&self) -> &[u8] {
        &self.datum_name
    }
    pub fn clear_datum_name(&mut self) {
        self.datum_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_datum_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.datum_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datum_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.datum_name
    }

    // Take field
    pub fn take_datum_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.datum_name, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageReadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.datum_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.datum_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.datum_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.datum_name.is_empty() {
            os.write_bytes(3, &self.datum_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageReadRequest {
        StorageReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageReadRequest| { &m.storage_id },
                    |m: &mut StorageReadRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageReadRequest| { &m.transaction_id },
                    |m: &mut StorageReadRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "datum_name",
                    |m: &StorageReadRequest| { &m.datum_name },
                    |m: &mut StorageReadRequest| { &mut m.datum_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageReadRequest>(
                    "StorageReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageReadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageReadRequest,
        };
        unsafe {
            instance.get(StorageReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageReadRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.datum_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageReadResponse {
    // message fields
    pub datum_value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageReadResponse {
    fn default() -> &'a StorageReadResponse {
        <StorageReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageReadResponse {
    pub fn new() -> StorageReadResponse {
        ::std::default::Default::default()
    }

    // bytes datum_value = 1;


    pub fn get_datum_value(&self) -> &[u8] {
        &self.datum_value
    }
    pub fn clear_datum_value(&mut self) {
        self.datum_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_datum_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.datum_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datum_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.datum_value
    }

    // Take field
    pub fn take_datum_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.datum_value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageReadResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.datum_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.datum_value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.datum_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.datum_value.is_empty() {
            os.write_bytes(1, &self.datum_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageReadResponse {
        StorageReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "datum_value",
                    |m: &StorageReadResponse| { &m.datum_value },
                    |m: &mut StorageReadResponse| { &mut m.datum_value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageReadResponse>(
                    "StorageReadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageReadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageReadResponse,
        };
        unsafe {
            instance.get(StorageReadResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageReadResponse {
    fn clear(&mut self) {
        self.datum_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageWriteRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub datum_name: ::std::vec::Vec<u8>,
    pub datum_value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageWriteRequest {
    fn default() -> &'a StorageWriteRequest {
        <StorageWriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageWriteRequest {
    pub fn new() -> StorageWriteRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes datum_name = 3;


    pub fn get_datum_name(&self) -> &[u8] {
        &self.datum_name
    }
    pub fn clear_datum_name(&mut self) {
        self.datum_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_datum_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.datum_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datum_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.datum_name
    }

    // Take field
    pub fn take_datum_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.datum_name, ::std::vec::Vec::new())
    }

    // bytes datum_value = 4;


    pub fn get_datum_value(&self) -> &[u8] {
        &self.datum_value
    }
    pub fn clear_datum_value(&mut self) {
        self.datum_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_datum_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.datum_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datum_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.datum_value
    }

    // Take field
    pub fn take_datum_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.datum_value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageWriteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.datum_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.datum_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.datum_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.datum_name);
        }
        if !self.datum_value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.datum_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.datum_name.is_empty() {
            os.write_bytes(3, &self.datum_name)?;
        }
        if !self.datum_value.is_empty() {
            os.write_bytes(4, &self.datum_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageWriteRequest {
        StorageWriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageWriteRequest| { &m.storage_id },
                    |m: &mut StorageWriteRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageWriteRequest| { &m.transaction_id },
                    |m: &mut StorageWriteRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "datum_name",
                    |m: &StorageWriteRequest| { &m.datum_name },
                    |m: &mut StorageWriteRequest| { &mut m.datum_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "datum_value",
                    |m: &StorageWriteRequest| { &m.datum_value },
                    |m: &mut StorageWriteRequest| { &mut m.datum_value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageWriteRequest>(
                    "StorageWriteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageWriteRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageWriteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageWriteRequest,
        };
        unsafe {
            instance.get(StorageWriteRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageWriteRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.datum_name.clear();
        self.datum_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageWriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageWriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageWriteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageWriteResponse {
    fn default() -> &'a StorageWriteResponse {
        <StorageWriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageWriteResponse {
    pub fn new() -> StorageWriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StorageWriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageWriteResponse {
        StorageWriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StorageWriteResponse>(
                    "StorageWriteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageWriteResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageWriteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageWriteResponse,
        };
        unsafe {
            instance.get(StorageWriteResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageWriteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageWriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageWriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageDeleteRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub datum_name: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageDeleteRequest {
    fn default() -> &'a StorageDeleteRequest {
        <StorageDeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageDeleteRequest {
    pub fn new() -> StorageDeleteRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes datum_name = 3;


    pub fn get_datum_name(&self) -> &[u8] {
        &self.datum_name
    }
    pub fn clear_datum_name(&mut self) {
        self.datum_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_datum_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.datum_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datum_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.datum_name
    }

    // Take field
    pub fn take_datum_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.datum_name, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageDeleteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.datum_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.datum_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.datum_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.datum_name.is_empty() {
            os.write_bytes(3, &self.datum_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageDeleteRequest {
        StorageDeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageDeleteRequest| { &m.storage_id },
                    |m: &mut StorageDeleteRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageDeleteRequest| { &m.transaction_id },
                    |m: &mut StorageDeleteRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "datum_name",
                    |m: &StorageDeleteRequest| { &m.datum_name },
                    |m: &mut StorageDeleteRequest| { &mut m.datum_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageDeleteRequest>(
                    "StorageDeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageDeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageDeleteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageDeleteRequest,
        };
        unsafe {
            instance.get(StorageDeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageDeleteRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.datum_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageDeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageDeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageDeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageDeleteResponse {
    fn default() -> &'a StorageDeleteResponse {
        <StorageDeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageDeleteResponse {
    pub fn new() -> StorageDeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StorageDeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageDeleteResponse {
        StorageDeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StorageDeleteResponse>(
                    "StorageDeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageDeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageDeleteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageDeleteResponse,
        };
        unsafe {
            instance.get(StorageDeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageDeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageDeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageDeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageBeginRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageBeginRequest {
    fn default() -> &'a StorageBeginRequest {
        <StorageBeginRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageBeginRequest {
    pub fn new() -> StorageBeginRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageBeginRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageBeginRequest {
        StorageBeginRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageBeginRequest| { &m.storage_id },
                    |m: &mut StorageBeginRequest| { &mut m.storage_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageBeginRequest>(
                    "StorageBeginRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageBeginRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageBeginRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageBeginRequest,
        };
        unsafe {
            instance.get(StorageBeginRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageBeginRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageBeginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageBeginRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageBeginResponse {
    // message fields
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageBeginResponse {
    fn default() -> &'a StorageBeginResponse {
        <StorageBeginResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageBeginResponse {
    pub fn new() -> StorageBeginResponse {
        ::std::default::Default::default()
    }

    // bytes transaction_id = 1;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageBeginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction_id.is_empty() {
            os.write_bytes(1, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageBeginResponse {
        StorageBeginResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageBeginResponse| { &m.transaction_id },
                    |m: &mut StorageBeginResponse| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageBeginResponse>(
                    "StorageBeginResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageBeginResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageBeginResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageBeginResponse,
        };
        unsafe {
            instance.get(StorageBeginResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageBeginResponse {
    fn clear(&mut self) {
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageBeginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageBeginResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageCommitRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageCommitRequest {
    fn default() -> &'a StorageCommitRequest {
        <StorageCommitRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageCommitRequest {
    pub fn new() -> StorageCommitRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageCommitRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageCommitRequest {
        StorageCommitRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageCommitRequest| { &m.storage_id },
                    |m: &mut StorageCommitRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageCommitRequest| { &m.transaction_id },
                    |m: &mut StorageCommitRequest| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageCommitRequest>(
                    "StorageCommitRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageCommitRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageCommitRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageCommitRequest,
        };
        unsafe {
            instance.get(StorageCommitRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageCommitRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageCommitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageCommitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageCommitResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageCommitResponse {
    fn default() -> &'a StorageCommitResponse {
        <StorageCommitResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageCommitResponse {
    pub fn new() -> StorageCommitResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StorageCommitResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageCommitResponse {
        StorageCommitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StorageCommitResponse>(
                    "StorageCommitResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageCommitResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageCommitResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageCommitResponse,
        };
        unsafe {
            instance.get(StorageCommitResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageCommitResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageCommitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageCommitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageRollbackRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageRollbackRequest {
    fn default() -> &'a StorageRollbackRequest {
        <StorageRollbackRequest as ::protobuf::Message>::default_instance()
    }
}

impl StorageRollbackRequest {
    pub fn new() -> StorageRollbackRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StorageRollbackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageRollbackRequest {
        StorageRollbackRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &StorageRollbackRequest| { &m.storage_id },
                    |m: &mut StorageRollbackRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &StorageRollbackRequest| { &m.transaction_id },
                    |m: &mut StorageRollbackRequest| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageRollbackRequest>(
                    "StorageRollbackRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageRollbackRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageRollbackRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageRollbackRequest,
        };
        unsafe {
            instance.get(StorageRollbackRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageRollbackRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageRollbackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageRollbackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageRollbackResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageRollbackResponse {
    fn default() -> &'a StorageRollbackResponse {
        <StorageRollbackResponse as ::protobuf::Message>::default_instance()
    }
}

impl StorageRollbackResponse {
    pub fn new() -> StorageRollbackResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StorageRollbackResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageRollbackResponse {
        StorageRollbackResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StorageRollbackResponse>(
                    "StorageRollbackResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageRollbackResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageRollbackResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageRollbackResponse,
        };
        unsafe {
            instance.get(StorageRollbackResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageRollbackResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageRollbackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageRollbackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17oak/proto/storage.proto\x12\x03oak\"y\n\x12StorageReadRequest\x12\
    \x1d\n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etransactio\
    n_id\x18\x02\x20\x01(\x0cR\rtransactionId\x12\x1d\n\ndatum_name\x18\x03\
    \x20\x01(\x0cR\tdatumName\"6\n\x13StorageReadResponse\x12\x1f\n\x0bdatum\
    _value\x18\x01\x20\x01(\x0cR\ndatumValue\"\x9b\x01\n\x13StorageWriteRequ\
    est\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etra\
    nsaction_id\x18\x02\x20\x01(\x0cR\rtransactionId\x12\x1d\n\ndatum_name\
    \x18\x03\x20\x01(\x0cR\tdatumName\x12\x1f\n\x0bdatum_value\x18\x04\x20\
    \x01(\x0cR\ndatumValue\"\x16\n\x14StorageWriteResponse\"{\n\x14StorageDe\
    leteRequest\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\
    \n\x0etransaction_id\x18\x02\x20\x01(\x0cR\rtransactionId\x12\x1d\n\ndat\
    um_name\x18\x03\x20\x01(\x0cR\tdatumName\"\x17\n\x15StorageDeleteRespons\
    e\"4\n\x13StorageBeginRequest\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0c\
    R\tstorageId\"=\n\x14StorageBeginResponse\x12%\n\x0etransaction_id\x18\
    \x01\x20\x01(\x0cR\rtransactionId\"\\\n\x14StorageCommitRequest\x12\x1d\
    \n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etransaction_id\
    \x18\x02\x20\x01(\x0cR\rtransactionId\"\x17\n\x15StorageCommitResponse\"\
    ^\n\x16StorageRollbackRequest\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0c\
    R\tstorageId\x12%\n\x0etransaction_id\x18\x02\x20\x01(\x0cR\rtransaction\
    Id\"\x19\n\x17StorageRollbackResponse2\x89\x03\n\x07Storage\x129\n\x04Re\
    ad\x12\x17.oak.StorageReadRequest\x1a\x18.oak.StorageReadResponse\x12<\n\
    \x05Write\x12\x18.oak.StorageWriteRequest\x1a\x19.oak.StorageWriteRespon\
    se\x12?\n\x06Delete\x12\x19.oak.StorageDeleteRequest\x1a\x1a.oak.Storage\
    DeleteResponse\x12<\n\x05Begin\x12\x18.oak.StorageBeginRequest\x1a\x19.o\
    ak.StorageBeginResponse\x12?\n\x06Commit\x12\x19.oak.StorageCommitReques\
    t\x1a\x1a.oak.StorageCommitResponse\x12E\n\x08Rollback\x12\x1b.oak.Stora\
    geRollbackRequest\x1a\x1c.oak.StorageRollbackResponseb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
