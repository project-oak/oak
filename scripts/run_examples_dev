#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# Build Oak server.
"$SCRIPTS_DIR/build_server_dev" "$@"

# Run Oak server.
./bazel-clang-bin/oak/server/dev/oak &
SERVER_PID=$!
# TODO: Ensure that background processes are killed with something like `trap cleanup_fn EXIT`.

# Run Rust-based Oak examples against a common Oak server instance.
# TODO(#594): Re-enable rustfmt when upstream rustc internal error is fixed.
readonly RUST_EXAMPLES="$(find examples -mindepth 2 -maxdepth 4 -type d -regex '.*/module.*/rust$' | cut -d'/' -f2 | uniq | grep -v rustfmt)"
for example in ${RUST_EXAMPLES}; do
  # Currently `chat` application starts an infinite loop, so `run_examples` just checks
  # if the module can be loaded correctly.
  if [[ "chat" == "${example}" ]]; then
    "${SCRIPTS_DIR}/run_example" -C --test "${example}"
  else
    "${SCRIPTS_DIR}/run_example" "${example}"
  fi
done

# Run C++-based Oak examples.
# TODO: Run TensorFlow example when Emscripten imports will be fixed.
# https://github.com/project-oak/oak/issues/439
readonly CPP_EXAMPLES="$(find examples -mindepth 2 -maxdepth 4 -type d -regex '.*/module.*/cpp$' | cut -d'/' -f2 | grep -v tensorflow)"
for example in ${CPP_EXAMPLES}; do
  "${SCRIPTS_DIR}/run_example" -c "${example}"
done

# Special case: run the hello_world example with:
#  - a storage provider
#  - a configured translator module.
./bazel-clang-bin/oak/server/storage/storage_server &
STORAGE_PID=$!
./examples/hello_world/run -C \
  --translator_module=./examples/target/wasm32-unknown-unknown/release/translator.wasm \
  --storage_address=127.0.0.1:7867
kill -s SIGTERM "$STORAGE_PID"

# Terminate the server
kill -s SIGTERM "$SERVER_PID"
