#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

language="rust"
server="base"
while getopts "s:a:l:e:vh" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-s base|logless|arm|asan|tsan] [-l rust|cpp] (-a APPLICATION | -e EXAMPLE) [-v]

Run a particular Oak Application in the Oak Runtime.
Either the -a APPLICATION or the -e EXAMPLE option is required.

  -a    Path to a serialized application configuration file
  -e    Example application name
  -s    Server type:
          - base: base version of the server (default)
          - logless: base version of the server with debug logging compiled out
          - rust: Rust version of the server
          - arm: server for ARM architecture
          - asan: server with address sanitizer
          - tsan: server with thread santizer
  -l    Example application variant (if -e specified):
          - rust (used by default)
          - cpp
  -v    Enable verbose/debug output
  -h    Print Help (this message) and exit"
      exit 0;;
    l)
      language="${OPTARG}";;
    s)
      case "${OPTARG}" in
        base|logless|rust|arm|asan|tsan)
          server="${OPTARG}";;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    a)
      readonly APPLICATION="${OPTARG}";;
    e)
      readonly EXAMPLE="${OPTARG}";;
    v)
      RUST_LOG='debug';;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done

if [[ -n ${EXAMPLE+x} ]]; then
  # Determine expected configuration file from example name and language variant.
  case "${language}" in
    rust)
      readonly APPLICATION="${PWD}/bazel-client-bin/examples/${EXAMPLE}/config/config.bin";;
    cpp)
      # TensorFlow example is compiled with Emscripten and other examples with Clang.
      if [[ "${EXAMPLE}" == "tensorflow" ]]; then
        readonly APPLICATION="${PWD}/bazel-emscripten-bin/examples/tensorflow/config/config_cpp.bin"
      else
        readonly APPLICATION="${PWD}/bazel-wasm-bin/examples/${EXAMPLE}/config/config_cpp.bin"
      fi;;
    *)
      echo "Invalid example variant: ${language}"
      exit 1;;
  esac
fi

if [[ -z "${APPLICATION+z}" ]]; then
  echo "Missing required option: -a APPLICATION or -e EXAMPLE"
  exit 1
fi

"${SCRIPTS_DIR}/build_server" -s "${server}"

# Launching the server requires a `--application=<dir>/config.bin` flag.
# `exec` is necessary for the `run_example` script to be able to get a PID of a background server.
if [[ "${server}" == "rust" ]]; then
  exec cargo run --release --target=x86_64-unknown-linux-musl --package=oak_loader -- \
    --application="${APPLICATION}" \
    --ca-cert="${SCRIPTS_DIR}/../examples/certs/local/ca.pem" \
    --cert-chain="${SCRIPTS_DIR}/../examples/certs/local/local.pem" \
    --private-key="${SCRIPTS_DIR}/../examples/certs/local/local.key"
else
  # We use a different symlink prefix for clang-based artifacts.
  exec ./bazel-clang-bin/oak/server/loader/oak_runner \
    --application="${APPLICATION}" \
    --ca_cert="${SCRIPTS_DIR}/../examples/certs/local/ca.pem" \
    --cert_chain="${SCRIPTS_DIR}/../examples/certs/local/local.pem" \
    --private_key="${SCRIPTS_DIR}/../examples/certs/local/local.key"
fi
