#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# shellcheck source=scripts/gcp_common
source "$SCRIPTS_DIR/gcp_common"

"$SCRIPTS_DIR/build_example" -e "hello_world"

# Prerequisites:
# - Google Cloud SDK
# - Environment variable GCP_PROJECT_ID: id of the GCP project to use (eg oak-vm-testing).
# - Environment variable GCP_ACCOUNT_FILE: path to the exported key for the service
#   account that will be used to connect to GCP.
# - Service account must be in the following IAM roles:
#   - Compute Instance Admin (v1)
#   - Compute Security Admin
#   - Service Account User

# Create a minimal Ubuntu linux image on the GCP project.
# The image will be named oak-gcp-hello-world. 
# The script fails if an image with the same name exists. 
# Use `gcloud compute images delete oak-gcp-hello-world` to remove the old image.
bazel run "${bazel_build_flags[@]}" "//examples/hello_world/gcp:deploy-${IMAGE_NAME}"

# Authenticate as the service account
gcloud auth activate-service-account \
  --project="${GCP_PROJECT_ID}" \
  --key-file="${GCP_ACCOUNT_FILE}"

# Create Oak hello world VM instance and starts the Oak app on it.
gcloud beta compute instances create "${INSTANCE_NAME}" \
  --zone="${ZONE}" \
  --machine-type=n1-standard-1 \
  --tags="${NETWORK_TAG}" \
  --image="${IMAGE_NAME}" \
  --boot-disk-size=16GB \
  --boot-disk-type=pd-standard \
  --boot-disk-device-name="${DISK_NAME}" \

# Create a firewall rule to allow access to the hello world VM on port 8080
gcloud compute firewall-rules create "${FIREWALL_RULE}" \
  --description='Access to Oak hello world sample app on port 8080' \
  --direction=INGRESS \
  --priority=1000 \
  --network=default \
  --action=ALLOW \
  --rules=tcp:8080 \
  --source-ranges=0.0.0.0/0 \
  --target-tags="${NETWORK_TAG}"

# List instance details
gcloud compute instances list --filter="name=('${INSTANCE_NAME}')"
