#!/usr/bin/env bash

# Keep this in sync with /scripts/format.

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# Check which BUILD and .bzl files need to be reformatted.
find oak examples toolchain \( -type f -name BUILD -or -name WORKSPACE -or -name '*bzl' \) \
  -exec buildifier -lint=warn -mode=check {} +
find oak examples toolchain \( -type f -name BUILD \) \
  -exec grep --files-without-match '^    licenses = \["notice"\],$' {} + && (echo 'missing license directive in BUILD file'; exit 1)

# Check shell scripts for common mistakes.
find scripts -type f -exec shellcheck {} +

# Run clang-format and rustfmt on the entire codebase to check if it's
# well formatted. Exit codes:
#  - 1 there are files to be formatted.
#  - 0 everything looks fine.
./third_party/run-clang-format/run-clang-format.py -r oak examples

# Fortunately, rustfmt has the --check option that will make it exit with 1
# if formatting has to be applied.
find examples rust -type f -name '*.rs' -exec rustfmt --check {} +

find . \
  \(  \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./rust/target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f -name '*.md' \) \
  \) -exec prettier --check {} +

# Check embedded code snippets are up-to-date.
grep --recursive --files-with-matches embedmd docs | while IFS= read -r file; do
  "$GOPATH/bin/embedmd" -d "$file"
done
