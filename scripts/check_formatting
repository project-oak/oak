#!/usr/bin/env bash

# Keep this in sync with /scripts/format.

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# Check which BUILD and .bzl files need to be reformatted.
# TODO: Refactor the file matching logic into a separate bash function, or use a real programming
# language for the job.
find . \
  \(  \
    -not \( -path ./.git -prune \) -and \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f -name BUILD -or -name WORKSPACE -or -name '*.bzl' \) \
  \) -exec buildifier -lint=warn -mode=check {} +

find . \
  \(  \
    -not \( -path ./.git -prune \) -and \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f -name BUILD \) \
  \) -exec grep --files-without-match '^    licenses = \["notice"\],$' {} + && (echo 'missing license directive in BUILD file'; exit 1)

# Check shell scripts for common mistakes.
find scripts -type f -exec shellcheck {} +

# Run clang-format on the entire codebase to check if it's well formatted.
# Exit codes:
#  - 1 there are files to be formatted.
#  - 0 everything looks fine.
./third_party/run-clang-format/run-clang-format.py -r oak examples

# Fortunately, rustfmt has the --check option that will make it exit with 1
# if formatting has to be applied.
cargo fmt --all -- --check

find . \
  \(  \
    -not \( -path ./.git -prune \) -and \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f -name '*.md' -or -name '*.yaml' -or -name '*.toml' \) \
  \) -exec prettier --check {} +

find . \
  \(  \
    -not \( -path ./.git -prune \) -and \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f -name '*.md' \) \
  \) -exec markdownlint {} +

find . \
  \(  \
    -not \( -path ./bazel-cache -prune \) -and \
    -not \( -path ./cargo-cache -prune \) -and \
    -not \( -path ./target -prune \) -and \
    -not \( -path ./third_party -prune \) \
    \( -type f \( -name '*.rs' -o -name '*.cc' \) \) \
  \) -exec ./scripts/check_license {} +

# Check embedded code snippets are up-to-date.
grep --recursive --files-with-matches embedmd docs | while IFS= read -r file; do
  "$GOPATH/bin/embedmd" -d "$file"
done

# Check syntax in XML files.
# TODO: Implement with `xmllint --noout your_test_file.xml`.
