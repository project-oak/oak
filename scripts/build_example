#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

COMPILATION_MODE='fastbuild'

while getopts "hd" opt; do
    case "$opt" in
    h)
        echo -e "Usage: $0 [-d] [example_name]
  -d    Build using debug mode
  -h    Print this message"
        exit 0
        ;;
    d)
        COMPILATION_MODE='dbg'
        ;;
    *)
        exit 1
        ;;
    esac
done

readonly NAME="${*:$OPTIND:1}"

if [[ -z "${NAME}" ]]; then
    readonly EXAMPLES="$(find examples -mindepth 2 -maxdepth 4 -type f -name Cargo.toml | cut -d'/' -f2)"
    PS3='Choose example to build: '

    readarray -t options <<< "$EXAMPLES"
    select opt in "${options[@]}";
    do
        echo "Building $opt"
        TARGET="$opt"
        break
    done
else
    echo "Building $NAME"
    TARGET="$NAME"
fi

readonly RUST_FOLDER="$(find examples/"$TARGET" -type d -name rust)"
if [[ -n "$RUST_FOLDER" ]]; then
    for module in examples/"$TARGET"/module*/rust/Cargo.toml; do
    cargo build --release --target=wasm32-unknown-unknown --manifest-path="$module"
    done
fi

bazel_build_flags+=(
    '--symlink_prefix=bazel-client-'
    "--compilation_mode=$COMPILATION_MODE"
)

# Use a different output_base so that we don't lose incremental state.
# See https://docs.bazel.build/versions/master/command-line-reference.html#flag--output_base.
bazel --output_base="$CACHE_DIR/client" build "${bazel_build_flags[@]}" "//examples/$TARGET/client"

# TODO: Compile all examples in Emscripten when imports will be fixed.
# https://github.com/project-oak/oak/issues/439
bazel build --config=emscripten "//examples/tensorflow/module/cpp:all"

readonly CPP_FOLDER="$(find examples/"$TARGET" -type d -name cpp | grep -v tensorflow)"
if [[ -n "$CPP_FOLDER" ]]; then
    # TODO: support compilation mode wasm.
    bazel build --config=wasm32 "//examples/$TARGET/module/cpp:all"
fi
