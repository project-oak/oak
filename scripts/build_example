#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

application_language="rust"
client_variants="bazel"
compilation_mode='fastbuild'
docker_config=''
while getopts "e:a:c:di:h" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-h] [-a rust|cpp] [-c [cargo|bazel|npm]...] [-i base|logless] [-d] -e EXAMPLE

Build the given example Oak Application and client.

Options:
  -e    Example application name (required)
  -a    Example application variant:
          - rust (used by default)
          - cpp
  -c    Example client variants. Multiple clients can be specified by space
        separating them. Eg -c \"cargo bazel npm\".
        - cargo
        - bazel (used by default)
        - npm
  -d    Build C++ code for example using debug mode
  -i    This flag enables packaging the application into a Docker image,
        and specifies the version of the Oak server, used by the application:
          - base: base version of the server
          - logless: base version of the server with debug logging compiled out
  -h    Print Help (this message) and exit"
      exit 0;;
    e)
      readonly EXAMPLE="${OPTARG}";;
    a)
      application_language="${OPTARG}";;
    c)
      client_variants="${OPTARG}";;
    d)
      compilation_mode='dbg';;
    i)
      docker_config="${OPTARG}";;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done

if [[ -z "${EXAMPLE+z}" ]]; then
  echo "Missing required option: -e EXAMPLE"
  exit 1
fi

readonly EXAMPLE_BIN_DIR="${PWD}/examples/${EXAMPLE}/bin"
rm -rf "${EXAMPLE_BIN_DIR:?}"
mkdir -p "${EXAMPLE_BIN_DIR}"
case "${application_language}" in
  rust)
    for module in examples/"${EXAMPLE}"/module*/rust/Cargo.toml; do
      # Use a separate target dir for Wasm build artifacts. The precise name is not relevant, but it
      # should end with `target` so that it gets automatically ignored by our `.gitignore`.
      # `--out-dir` is unstable and requires `-Z unstable-options`.
      cargo build --release --target=wasm32-unknown-unknown --manifest-path="${module}" \
        --out-dir="${EXAMPLE_BIN_DIR}" -Z unstable-options
    done

    if [[ "${EXAMPLE}" == "hello_world" ]]; then
      # `hello_world` example has an optional additional `translator` module.
      cargo build --release --target=wasm32-unknown-unknown --manifest-path="examples/translator/module/rust/Cargo.toml" \
        --out-dir="${EXAMPLE_BIN_DIR}" -Z unstable-options
    elif [[ "${EXAMPLE}" == "aggregator" ]]; then
      # `aggregator` example has an additional Backend binary.
      cargo build --release --target="${RUST_HOST_TARGET}" --manifest-path="examples/aggregator/backend/Cargo.toml"
    elif [[ "${EXAMPLE}" == "trusted_information_retrieval" ]]; then
      # `trusted_information_retrieval` example has an additional Backend binary.
      cargo build --release --target="${RUST_HOST_TARGET}" --manifest-path="examples/trusted_information_retrieval/backend/Cargo.toml"
    fi

    # Serialize application configuration for Rust module.
    cargo run --manifest-path="sdk/rust/oak_config_serializer/Cargo.toml" -- \
      --input-file="examples/${EXAMPLE}/config/config.toml" \
      --output-file="${EXAMPLE_BIN_DIR}/config.bin"
    ;;
  cpp)
    if [[ "${EXAMPLE}" == "tensorflow" ]]; then
      # TODO: Compile all examples in Emscripten when imports are fixed.
      # https://github.com/project-oak/oak/issues/439
      bazel --output_base="${CACHE_DIR}/emscripten" build "${bazel_build_flags[@]}" --config=emscripten "//examples/tensorflow/module/cpp:all"
      cp --force "${PWD}/bazel-emscripten-bin/examples/tensorflow/module/cpp/tensorflow_micro.wasm" "${EXAMPLE_BIN_DIR}/tensorflow_cpp.wasm"
    else
      # TODO: support compilation mode wasm.
      bazel --output_base="${CACHE_DIR}/wasm32" build "${bazel_build_flags[@]}" --config=wasm32 "//examples/${EXAMPLE}/module/cpp:all"
      cp --force "${PWD}/bazel-wasm-bin/examples/${EXAMPLE}/module/cpp/${EXAMPLE}.wasm" "${EXAMPLE_BIN_DIR}/${EXAMPLE}_cpp.wasm"
    fi

    # Serialize application configuration for Rust module.
    cargo run --manifest-path="sdk/rust/oak_config_serializer/Cargo.toml" -- \
      --input-file="examples/${EXAMPLE}/config/config_cpp.toml" \
      --output-file="${EXAMPLE_BIN_DIR}/config_cpp.bin"
    ;;
  *)
    echo "Invalid example application variant: ${application_language}"
    exit 1;;
esac

if [[ -n "${docker_config}" ]]; then
  "${SCRIPTS_DIR}/build_server" -s "${docker_config}"
  # Build the base server.
  docker build --tag=oak_docker --file=./oak/server/Dockerfile ./oak/server
  # Build and save the example
  docker build --tag="${EXAMPLE}" --file=./examples/Dockerfile "./examples/${EXAMPLE}"
  docker save "${EXAMPLE}" > "./examples/${EXAMPLE}/bin/${EXAMPLE}.tar"

  # `aggregator` example has an additional Backend Docker image.
  if [[ "${EXAMPLE}" == "aggregator" ]]; then
    docker build --tag=aggregator_backend --file="./examples/${EXAMPLE}/server/Dockerfile" "./examples"
    docker save aggregator_backend > "./examples/${EXAMPLE}/bin/aggregator_backend.tar"
  fi
fi

# Build the application clients.
for client_variant in ${client_variants}
do
  case "${client_variant}" in
    cargo)
      cargo build --release "--manifest-path=./examples/${EXAMPLE}/client/rust/Cargo.toml"
      ;;
    bazel)
      bazel_build_flags+=(
        '--symlink_prefix=bazel-client-'
        "--compilation_mode=${compilation_mode}"
      )

      # Build the client with a different output_base so that we don't lose incremental state.
      # See https://docs.bazel.build/versions/master/command-line-reference.html#flag--output_base.
      bazel --output_base="${CACHE_DIR}/client" build "${bazel_build_flags[@]}" "//examples/${EXAMPLE}/client:all"
      ;;
    npm)
      npm ci --prefix "./examples/${EXAMPLE}/client/nodejs"
      ;;
    *)
      echo "Invalid example client variant: ${client_variant}"
      exit 1;;
  esac
done
