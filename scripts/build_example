#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

language="rust"
compilation_mode='fastbuild'
docker_config=''
while getopts "e:l:di:h" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-h] [-l rust|cpp] [-i base|logless] [-d] -e EXAMPLE

Build the given example Oak Application and client.

Options:
  -e    Example application name (required)
  -l    Example application variant:
          - rust (used by default)
          - cpp
  -d    Build C++ code for example using debug mode
  -i    This flag enables packaging the application into a Docker image,
        and specifies the version of the Oak server, used by the application:
          - base: base version of the server
          - logless: base version of the server with debug logging compiled out
  -h    Print Help (this message) and exit"
      exit 0;;
    e)
      readonly EXAMPLE="${OPTARG}";;
    l)
      language="${OPTARG}";;
    d)
      compilation_mode='dbg';;
    i)
      case "${OPTARG}" in
        base)
          docker_config='clang';;
        logless)
          docker_config='clang-logless';;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done

if [[ -z "${EXAMPLE+z}" ]]; then
  echo "Missing required option: -e EXAMPLE"
  exit 1
fi

case "${language}" in
  rust)
    for module in examples/"${EXAMPLE}"/module*/rust/Cargo.toml; do
      cargo build --release --target=wasm32-unknown-unknown --manifest-path="${module}"
    done

    # Serialize application configuration for Rust module.
    if [[ "${EXAMPLE}" == "hello_world" ]]; then
      # `hello_world` example has an optional additional `translator` module.
      cargo build --release --target=wasm32-unknown-unknown --manifest-path="examples/translator/module/rust/Cargo.toml"
      bazel --output_base="${CACHE_DIR}/client" build "${bazel_build_flags[@]}" "//examples/hello_world/config:config_translator"
    elif [[ "${EXAMPLE}" == "aggregator" ]]; then
      # `aggregator` example has an additional Backend Docker image
      cargo build --release --package=aggregator_backend
    fi
    bazel --output_base="${CACHE_DIR}/client" build "${bazel_build_flags[@]}" "//examples/${EXAMPLE}/config:config"
    ;;
  cpp)
    # `config_cpp` depends on a Wasm module, so it should be built with `wasm32` or `emscripten`.
    readonly BUILD_RULES=(
      "//examples/${EXAMPLE}/module/cpp:all"
      "//examples/${EXAMPLE}/config:config_cpp"
    )
    if [[ "${EXAMPLE}" == "tensorflow" ]]; then
      # TODO: Compile all examples in Emscripten when imports are fixed.
      # https://github.com/project-oak/oak/issues/439
      bazel --output_base="${CACHE_DIR}/emscripten" build "${bazel_build_flags[@]}" --config=emscripten "${BUILD_RULES[@]}"
    else
      # TODO: support compilation mode wasm.
      bazel --output_base="${CACHE_DIR}/wasm32" build "${bazel_build_flags[@]}" --config=wasm32 "${BUILD_RULES[@]}"
    fi
    ;;
  *)
    echo "Invalid example variant: ${language}"
    exit 1;;
esac

if [[ -n "${docker_config}" ]]; then
  if [[ "${language}" != "rust" ]]; then
    echo "Docker images are only supported for Rust modules"
    exit 1
  fi

  bazel build "${bazel_build_flags[@]}" "--config=${docker_config}" "//examples/${EXAMPLE}/server:${EXAMPLE}_image.tar"

  # `aggregator` example has an additional Backend Docker image.
  if [[ "${EXAMPLE}" == "aggregator" ]]; then
    bazel build "${bazel_build_flags[@]}" "//examples/aggregator/server:aggregator_backend_image.tar"
  fi
fi

bazel_build_flags+=(
  '--symlink_prefix=bazel-client-'
  "--compilation_mode=${compilation_mode}"
)

# Build the client with a different output_base so that we don't lose incremental state.
# See https://docs.bazel.build/versions/master/command-line-reference.html#flag--output_base.
bazel --output_base="${CACHE_DIR}/client" build "${bazel_build_flags[@]}" "//examples/${EXAMPLE}/client:all"
