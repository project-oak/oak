#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o xtrace

# See https://pantheon.corp.google.com/gcr/images/oak-ci/GLOBAL/oak
readonly DOCKER_IMAGE_NAME='gcr.io/oak-ci/oak'
readonly SERVER_DOCKER_IMAGE_NAME='gcr.io/oak-ci/oak-server'

readonly BIN_DIR='bazel-bin'
readonly CACHE_DIR='bazel-cache'

readonly OAK_REMOTE_CACHE_KEY='./.oak_remote_cache_key.json'

(
    # Disable xtrace to avoid leaking secrets in logs.
    set +o xtrace;
    # Do we have a JSON key for the remote cache.
    # https://docs.bazel.build/versions/master/remote-caching.html#google-cloud-storage
    if [[ ! -f "$OAK_REMOTE_CACHE_KEY" ]]; then
        # Check if this exists in the environment and it is not empty.
        if [[ -n "${BAZEL_GOOGLE_CREDENTIALS:-}" ]]; then
            echo "$BAZEL_GOOGLE_CREDENTIALS" > "$OAK_REMOTE_CACHE_KEY"
        fi
    fi
)

declare -a bazel_build_flags

# Use the remote cache, assuming it is publicly readable.
# See https://pantheon.corp.google.com/storage/browser/oak-bazel-cache?project=oak-ci
bazel_build_flags+=(
    '--remote_cache=https://storage.googleapis.com/oak-bazel-cache'
)

# If we now have a key file, use it, otherwise disable uploading artifacts to remote cache.
# Note that this is only needed to write to the cache, not to read from it.
if [[ -f "$OAK_REMOTE_CACHE_KEY" ]]; then
    bazel_build_flags+=(
        "--google_credentials=$OAK_REMOTE_CACHE_KEY"
    )
else
    bazel_build_flags+=(
        '--remote_upload_local_results=false'
    )
fi

# kill_pid tries to kill the given pid(s), first softly then more aggressively.
kill_pid() {
  local pids=( "$@" )
  echo "Killing ${pids[*]}"
  set +e
  local count=0
  while kill -INT "${pids[@]}" > /dev/null 2>&1; do
    sleep 1
    ((count++))
    still_alive=()
    for pid in "${pids[@]}"; do
      if ps -p "${pid}" > /dev/null ; then
        still_alive+=("${pid}")
      fi
    done
    if [ ${#still_alive[@]} -eq 0 ]; then
      break
    fi
    if [ $count -gt 5 ]; then
      echo "Now do kill -KILL ${still_alive[*]}"
      kill -KILL "${still_alive[@]}"
      break
    fi
    pids=("${still_alive[@]}")
    echo "Retry kill -INT ${pids[*]}"
  done
  set -e
}

declare -a to_kill

# kill_bg_pids will clean up any pids in ${to_kill}.
kill_bg_pids() {
  if [ -v to_kill ]; then
    kill_pid "${to_kill[@]}"
    to_kill=()
  fi
}

trap kill_bg_pids EXIT
