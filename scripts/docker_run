#!/usr/bin/env bash

# This script runs the provided command in the Docker container corresponding to the currently
# checked-in image id.

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

mkdir -p './bazel-cache'
mkdir -p './cargo-cache'
mkdir -p './sccache-cache'

docker_run_flags=(
  '--rm'
  '--tty'
  '--env=TERM=xterm-256color'
  '--env=BAZEL_REMOTE_CACHE_ENABLED'
  '--env=BAZEL_GOOGLE_CREDENTIALS'
  "--volume=$PWD/bazel-cache:/home/docker/.cache/bazel"
  "--volume=$PWD/cargo-cache:/home/docker/.cargo"
  "--volume=$PWD/sccache-cache:/home/docker/.cache/sccache"
  "--volume=$PWD:/workspace"
  '--volume=/dev/log:/dev/log'
  '--workdir=/workspace'
  '--network=host'
  # We need to use Docker from inside the container, but only for build.
  # To do that, we map the socket from the host.
  "--volume=$XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock"
)

# If the host supports KVM, allow the docker image to use it.
if [[ -e "/dev/kvm" ]]; then
  readonly HOST_KVM_GID="$(getent group kvm | cut -d: -f3)"
  docker_run_flags+=(
    "--device=/dev/kvm"
    "--env=HOST_KVM_GID=${HOST_KVM_GID}"
  )
fi

# If the host supports virtio vhost vsock, allow the docker image to use it.
if [[ -e "/dev/vhost-vsock" ]]; then
  docker_run_flags+=(
    "--device=/dev/vhost-vsock"
  )
fi

# If the host supports the vsock device, allow the docker image to use it.
if [[ -e "/dev/vsock" ]]; then
  docker_run_flags+=(
    "--device=/dev/vsock"
  )
fi

# Some CI systems (GitHub actions) do not run with an interactive TTY attached.
if [[ -z "${CI:-}" ]]; then
  docker_run_flags+=('--interactive')
fi

# Run the provided command.
docker run "${docker_run_flags[@]}" "$DOCKER_IMAGE_ID" "$@"
