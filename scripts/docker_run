#!/usr/bin/env bash

# Usage: docker_run [OPTIONS] COMMAND
#
# Options:
#    --detach    Run container in background and print container ID

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

"$SCRIPTS_DIR/docker_build"

# In order for the docker-cli inside the container to use the host dockerd,
# we need permissions for the user with the same gid as the host
if [[ "${OSTYPE}" == "darwin"*  ]]; then
  readonly HOST_DOCKER_GID="$(dscl . -read /Groups/staff | awk '($1 == "PrimaryGroupID:") { print $2 }')"
else
  readonly HOST_DOCKER_GID="$(getent group docker | cut -d: -f3)"
fi

mkdir -p './bazel-cache'
mkdir -p './cargo-cache'

docker_run_flags=(
  '--rm'
  '--tty'
  '--env=BAZEL_REMOTE_CACHE_ENABLED'
  '--env=BAZEL_GOOGLE_CREDENTIALS'
  "--volume=$PWD/bazel-cache:/.cache/bazel"
  "--volume=$PWD/cargo-cache:/usr/local/cargo/registry"
  "--volume=$PWD:/workspaces/oak"
  '--workdir=/workspaces/oak'
  '--network=host'
  # We need to use Docker from inside the container, but only for build.
  # To do that, we map the socket from the host and add the right group
  '--volume=/var/run/docker.sock:/var/run/docker.sock'
  "--group-add=$HOST_DOCKER_GID"
)

# Some CI systems (GitHub actions) do not run with an interactive TTY attached.
if [[ -z "${CI:-}" ]]; then
  docker_run_flags+=('--interactive')
fi

if [[ "$1" == '--detach' ]]; then
  docker_run_flags+=('--detach')
  docker run "${docker_run_flags[@]}" "$DOCKER_IMAGE_NAME:latest" "${@:2}"
else
  docker run "${docker_run_flags[@]}" "$DOCKER_IMAGE_NAME:latest" "$@"
fi
