#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# shellcheck source=scripts/gcp_common
source "$SCRIPTS_DIR/gcp_common"

gcloud auth activate-service-account \
  --project="${GCP_PROJECT_ID}" \
  --key-file="${GCP_ACCOUNT_FILE}"

readonly OUT_DIR='./oak_functions/bin'

# Copy proto files to the output directory. They must be in the same location
# as the compiled proto descriptor so that they can also be uploaded as part
# of the deployment.

mkdir --parents "${OUT_DIR}"

cp \
  ./remote_attestation/proto/remote_attestation.proto \
  ./oak_functions/proto/invocation.proto \
  "${OUT_DIR}" \
  --force

# Rebuild the proto descriptor file for the API configuration.

protoc \
  --proto_path="${OUT_DIR}" \
  --include_imports \
  --include_source_info \
  --descriptor_set_out="${OUT_DIR}/remote_attestation.pb" \
  remote_attestation.proto

# See https://cloud.google.com/api-gateway/docs/deployment-model for more
# details on the relationship between APIs, Configs and Gateways

# Create a config file from the template by replacing tokens.
readonly API_TITLE='Oak Functions Weather Lookup Service'
# Fetch the URL or the Cloud Run backend service instance.
readonly CLOUD_RUN_URL="$(gcloud beta run services describe "${FUNCTIONS_INSTANCE_NAME}" --project="${GCP_PROJECT_ID}" --region=europe-west2 --platform=managed --format='value(status.url)')" 
readonly CLOUD_RUN_HOST="$(echo "${CLOUD_RUN_URL}" | cut -c 9-)"

sed \
  --expression="s/###TITLE###/${API_TITLE}/" \
  --expression="s/###HOST_NAME###/${CLOUD_RUN_HOST}/" \
  < ./oak_functions/gcp/api_config.yaml.template \
  > "${OUT_DIR}/weather_lookup_api_config.yaml" \

# Deploy the API Configuration
readonly CONFIG_ID='weather-lookup-config'
readonly API_ID='weather-lookup-api'

gcloud api-gateway api-configs create "${CONFIG_ID}" \
  --api="${API_ID}" --project="${GCP_PROJECT_ID}" \
  --grpc-files="${OUT_DIR}/remote_attestation.pb,${OUT_DIR}/weather_lookup_api_config.yaml"

# Deploy the API Gateway
gcloud api-gateway gateways create "${GATEWAY_ID}" \
  --api="${API_ID}" --api-config="${CONFIG_ID}" \
  --location="${GCP_REGION}" --project="${GCP_PROJECT_ID}"

# Get the Managed Service name
readonly MANAGED_SERVICE="$(gcloud api-gateway apis describe "${API_ID}" --format='value(managedService)')"

# Enable the API
gcloud services enable "${MANAGED_SERVICE}"
