#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

config="clang"
while getopts "s:h" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-s base|arm|asan|tsan]

Build the specified version of the Oak Runtime server.

  -s    Server type:
          - base: base version of the server (default)
          - rust: Rust version of the server
          - arm: server for ARM architecture
          - asan: server with address sanitizer
          - tsan: server with thread santizer
  -h    Print Help (this message) and exit"
      exit 0;;
    s)
      case "${OPTARG}" in
        base)
          config='clang';;
        rust)
          config='rust';;
        arm)
          config='armv8';;
        asan)
          config='asan';;
        tsan)
          config='tsan';;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done

if [[ "${config}" == "rust" ]]; then
  cargo build --package=oak_loader
else
  bazel_build_flags+=(
    "--config=${config}"
  )

  # Use a different output_base so that we don't lose incremental state.
  # See https://docs.bazel.build/versions/master/command-line-reference.html#flag--output_base.
  bazel --output_base="${CACHE_DIR}/$config" build "${bazel_build_flags[@]}" \
    //oak/server/loader:oak_runner \
    //oak/server/storage:storage_server
fi
