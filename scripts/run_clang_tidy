#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

bazel_build_flags+=(
    '--experimental_action_listener=@io_kythe//kythe/cxx/tools/generate_compile_commands:extract_json'
    '--noshow_progress'
    '--noshow_loading_progress'
)

# Generate compilation database.
bazel build "${bazel_build_flags[@]}" -- //oak/...:all -//oak/server/asylo:all
./third_party/kythe/generate_compilation_database.sh

# Run clang-tidy.
SOURCE_FILES=$(find oak -name "*.cc" -printf '%h/%f\n' | grep -v "oak/server/asylo*")
clang-tidy -p "$(bazel info execution_root)" -header-filter=.* $SOURCE_FILES

# Compile Asylo server separately with an Asylo toolchain.
bazel build "${bazel_build_flags[@]}" '--config=enc-sim' //oak/server/asylo:oak
./third_party/kythe/generate_compilation_database.sh

# Check Asylo server separately, since clang-tidy requires all targets to be
# built at the same time.
ASYLO_SOURCE_FILES=$(find oak/server/asylo -name "*.cc" -printf '%h/%f\n')
clang-tidy -p "$(bazel info execution_root)" -header-filter=.* ${ASYLO_SOURCE_FILES}
