#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

language="rust"
server="base"
buildargs=""
serverargs=""
while getopts "s:l:de:vh" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-h] [-s base|logless|asan|tsan|none] [-l rust|cpp] [-d] [-v] -e EXAMPLE [-- CLIENT_ARGS]

Build and run the given example Oak Application and client.

Options:
  -e    Example application name (required)
  -s    Server type used to run examples:
          - base: base version of the server (default)
          - logless: base version of the server with debug logging compiled out
          - rust: Rust version of the server
          - asan: server with address sanitizer
          - tsan: server with thread sanitizer
          - none: run an application client without a server
  -d    Build C++ code for example using debug mode
  -l    Example application variant:
          - rust (used by default)
          - cpp
  -v    Enable verbose/debug output for the server
  -h    Print Help (this message) and exit
Options after -- will be passed to the example client program."
      exit 0;;
    l)
      language="${OPTARG}";;
    s)
      case "${OPTARG}" in
        base|logless|rust|asan|tsan|none)
          server="${OPTARG}";;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    d)
      buildargs='-d';;
    e)
      readonly EXAMPLE="${OPTARG}";;
    v)
      serverargs='-v';;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done
shift "$((OPTIND -1))"

if [[ -z "${EXAMPLE+z}" ]]; then
  echo "Missing required option: -e EXAMPLE"
  exit 1
fi

if [[ "${server}" == "tsan" ]]; then
  # Set flags for TSAN runs (https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags):
  #  - exit on error
  #  - don't check atomics (false positive on absl::MutexLock, github.com/google/sanitizers/issues/953)
  export TSAN_OPTIONS="halt_on_error=1 report_atomic_races=0"
fi

if [[ "${server}" != "none" ]]; then
  "${SCRIPTS_DIR}/build_example" ${buildargs} -l "${language}" -e "${EXAMPLE}"

  # Run a server in the background.
  # The server is being built before running, so the build process will not happen in the
  # background.
  "${SCRIPTS_DIR}/build_server" -s "${server}"
  "${SCRIPTS_DIR}/run_server" ${serverargs} -s "${server}" -l "${language}" -e "${EXAMPLE}" &
  readonly SERVER_PID=$!

  function stop_server {
    kill -s SIGTERM "${SERVER_PID}"
  }
  trap stop_server EXIT

  sleep 3  # Wait for the application to start.
fi

# Run the application client.
if [ $# -eq 0 ]; then
    "./bazel-client-bin/examples/${EXAMPLE}/client/client" --ca_cert=./examples/certs/local/ca.pem
else
    readonly CLIENT_ARGS=("${@}")  # Choose client args provided after '--'.
    "./bazel-client-bin/examples/${EXAMPLE}/client/client" --ca_cert=./examples/certs/local/ca.pem \
                                                           "${CLIENT_ARGS[@]-}"
fi

# TODO: Ensure that background processes are killed with something like `trap cleanup_fn EXIT`.
if [[ "${server}" != "none" ]]; then
  kill -s SIGTERM "${SERVER_PID}"
fi
