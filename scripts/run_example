#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

server="base"
application_language="rust"
client_variants="bazel"
buildargs=""
serverargs=""
while getopts "s:a:c:de:vh" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-h] [-s base|logless|none] [-a rust|cpp] [-c [cargo|bazel|npm]...] [-d] [-v] -e EXAMPLE [-- CLIENT_ARGS]

Build and run the given example Oak Application and client.

Options:
  -e    Example application name (required)
  -s    Server type used to run examples:
          - base: base version of the server (default)
          - logless: base version of the server with debug logging compiled out
          - none: run an application client without a server
  -d    Build C++ code for example using debug mode
  -a    Example application variant:
          - rust (used by default)
          - cpp
  -c    Example client variants. Multiple clients can be specified by space
        separating them. Eg -c \"cargo bazel npm\".
          - cargo
          - bazel (used by default)
          - npm
  -v    Enable verbose/debug output for the server
  -h    Print Help (this message) and exit
Options after -- will be passed to the example client program."
      exit 0;;
    a)
      application_language="${OPTARG}";;
    c)
      client_variants="${OPTARG}";;
    s)
      case "${OPTARG}" in
        base|logless|none)
          server="${OPTARG}";;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    d)
      buildargs='-d';;
    e)
      readonly EXAMPLE="${OPTARG}";;
    v)
      serverargs='-v';;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done
shift "$((OPTIND -1))"

if [[ -z "${EXAMPLE+z}" ]]; then
  echo "Missing required option: -e EXAMPLE"
  exit 1
fi


if [[ "${server}" != "none" ]]; then
  "${SCRIPTS_DIR}/build_example" ${buildargs} -a "${application_language}" -c "${client_variants}" -e "${EXAMPLE}"

  # Run a server in the background.
  # The server is being built before running, so the build process will not happen in the
  # background.
  "${SCRIPTS_DIR}/build_server" -s "${server}"
  "${SCRIPTS_DIR}/run_server" ${serverargs} -s "${server}" -a "${application_language}" -e "${EXAMPLE}" &
  readonly SERVER_PID=$!
  to_kill+=("${SERVER_PID}")

  # Run Backend for specific examples.
  if [[ "${EXAMPLE}" == 'aggregator' ]] || [[ "${EXAMPLE}" == 'trusted_information_retrieval' ]]; then
    # Building the Backend first, so it will not be built in the background.
    cargo build --release --target="${RUST_HOST_TARGET}" --manifest-path="examples/${EXAMPLE}/backend/Cargo.toml"
    cargo run --release --target="${RUST_HOST_TARGET}" --manifest-path="examples/${EXAMPLE}/backend/Cargo.toml" -- \
      --grpc-tls-private-key="${SCRIPTS_DIR}/../examples/certs/local/local.key" \
      --grpc-tls-certificate="${SCRIPTS_DIR}/../examples/certs/local/local.pem" &
    readonly BACKEND_PID=$!
    to_kill+=("${BACKEND_PID}")
  fi

  sleep 3  # Wait for the application to start.
fi

if [[ "${EXAMPLE}" == 'abitest' ]]; then
  # TODO(#1040): reinstate storage tests when Rust runtime supports them.
  readonly ADDITIONAL_ARGS=('--test_exclude=Storage')
else
  readonly ADDITIONAL_ARGS=()
fi

if [[ "${EXAMPLE}" == 'abitest' ]]; then
  readonly TLS_ARGS=(
    "--ca_cert=${SCRIPTS_DIR}/../examples/certs/local/ca.pem"
    "--cert_chain=${SCRIPTS_DIR}/../examples/certs/local/local.pem"
    "--private_key=${SCRIPTS_DIR}/../examples/certs/local/local.key")
else
  readonly TLS_ARGS=("--ca_cert=${SCRIPTS_DIR}/../examples/certs/local/ca.pem")
fi

readonly CLIENT_ARGS=("${@-}")  # Choose client args provided after '--'.

# Run the application clients.
for client_variant in ${client_variants}
do
  case "${client_variant}" in
    cargo)
      rust_client_manifest="${SCRIPTS_DIR}/../examples/${EXAMPLE}/client/rust/Cargo.toml"
          cargo run --release --manifest-path="${rust_client_manifest}" -- \
            --root-tls-certificate="${SCRIPTS_DIR}/../examples/certs/local/ca.pem" \
            "${CLIENT_ARGS[@]-}"
      ;;
    bazel)
          "${SCRIPTS_DIR}/../bazel-client-bin/examples/${EXAMPLE}/client/client" "${TLS_ARGS[@]}" "${ADDITIONAL_ARGS[@]-}" "${CLIENT_ARGS[@]-}"
      ;;
    npm)
      npm_client="${SCRIPTS_DIR}/../examples/${EXAMPLE}/client/nodejs"
          npm start --prefix "${npm_client}"
      ;;
    *)
      echo "Invalid example client variant: ${client_variant}"
      exit 1;;
  esac
done

if [[ -n "${SERVER_PID}" ]]; then
  # Check whether the server is still running.
  ps -p ${SERVER_PID} > /dev/null
  readonly SERVER_GONE=$?
  if ${SERVER_GONE} ; then
    echo "Runtime server has terminated early"
    exit 1
  fi
fi

kill_bg_pids
