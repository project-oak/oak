#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
# shellcheck source=scripts/common
source "${SCRIPTS_DIR}/common"

language="rust"
server="asylo"
buildargs=""
while getopts "s:l:de:h" opt; do
  case "${opt}" in
    h)
      echo -e "Usage: ${0} [-h] [-s asylo|dev|asan|tsan|none] [-l rust|cpp] [-d] -e EXAMPLE [-- CLIENT_ARGS]

Build and run the given example Oak Application and client.

Options:
  -e    Example application name (required)
  -s    Server type used to run examples:
          - asylo: server based on the Asylo framework (used by default)
          - dev: development version of the server
          - asan: 'dev' server with address sanitizer
          - tsan: 'dev' server with thread sanitizer
          - none: run an application client without a server
  -d    Build C++ code for example using debug mode
  -l    Example application variant:
          - rust (used by default)
          - cpp
  -h    Print Help (this message) and exit
Options after -- will be passed to the example client program."
      exit 0;;
    l)
      language="${OPTARG}";;
    s)
      case "${OPTARG}" in
        asylo|dev|asan|tsan|none)
          server="${OPTARG}";;
        *)
          echo "Invalid server type: ${OPTARG}"
          exit 1;;
      esac;;
    d)
      buildargs='-d';;
    e)
      readonly EXAMPLE="${OPTARG}";;
    *)
      echo "Invalid argument: ${OPTARG}"
      exit 1;;
  esac
done
shift "$((OPTIND -1))"

if [[ -z "${EXAMPLE+z}" ]]; then
  echo "Missing required option: -e EXAMPLE"
  exit 1
fi

if [[ "${server}" != "none" ]]; then
  # Choose example application variant.
  case "${language}" in
    rust)
      readonly APPLICATION="${PWD}/bazel-client-bin/examples/${EXAMPLE}/config/config.bin";;
    cpp)
      # TensorFlow example is compiled with Emscripten and other examples with Clang.
      if [[ "${EXAMPLE}" == "tensorflow" ]]; then
        readonly APPLICATION="${PWD}/bazel-emscripten-bin/examples/tensorflow/config/config_cpp.bin"
      else
        readonly APPLICATION="${PWD}/bazel-wasm-bin/examples/${EXAMPLE}/config/config_cpp.bin"
      fi;;
    *)
      echo "Invalid example variant: ${language}"
      exit 1;;
  esac
  "${SCRIPTS_DIR}/build_example" ${buildargs} -l "${language}" -e "${EXAMPLE}"

  # Run a server in the background.
  # The server is being built before running, so the build process will not happen in the
  # background.
  "${SCRIPTS_DIR}/build_server" -s "${server}"
  "${SCRIPTS_DIR}/run_server" -s "${server}" -a "${APPLICATION}" &
  readonly SERVER_PID=$!
  sleep 3  # Wait for the application to start.
fi

# Run the application client.
readonly CLIENT_ARGS=("${@}")  # Choose client args provided after '--'.
"./bazel-client-bin/examples/${EXAMPLE}/client/client" "${CLIENT_ARGS[@]}"

# TODO: Ensure that background processes are killed with something like `trap cleanup_fn EXIT`.
if [[ "${server}" != "none" ]]; then
  kill -s SIGTERM "${SERVER_PID}"
fi
