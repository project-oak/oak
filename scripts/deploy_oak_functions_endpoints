#!/usr/bin/env bash

readonly SCRIPTS_DIR="$(dirname "$0")"
# shellcheck source=scripts/common
source "$SCRIPTS_DIR/common"

# shellcheck source=scripts/gcp_common
source "$SCRIPTS_DIR/gcp_common"

gcloud auth activate-service-account \
  --project="${GCP_PROJECT_ID}" \
  --key-file="${GCP_ACCOUNT_FILE}"

readonly OUT_DIR='./oak_functions/bin'

# Copy proto files to the output directory. They must be in the same location
# as the compiled proto descriptor so that they can also be uploaded as part
# of the deployment.

mkdir --parents "${OUT_DIR}"

cp \
  ./oak_functions/proto/server.proto \
  ./oak_functions/proto/invocation.proto \
  "${OUT_DIR}" \
  --force

mkdir --parents "${OUT_DIR}"/remote_attestation/proto

cp ./remote_attestation/proto/remote_attestation.proto \
  "${OUT_DIR}"/remote_attestation/proto \
  --force

# Rebuild the proto descriptor file for the API configuration.

protoc \
  --proto_path="${OUT_DIR}" \
  --include_imports \
  --include_source_info \
  --descriptor_set_out="${OUT_DIR}/server.pb" \
  server.proto

# See https://cloud.google.com/endpoints/docs/grpc/get-started-cloud-run for 
# more details about Endpoints for Cloud Run with ESPv2.

# Deploy a sample image to get a service name
gcloud run deploy "${CLOUD_RUN_SERVICE_NAME}" \
    --image="gcr.io/cloudrun/hello" \
    --allow-unauthenticated \
    --platform managed \
    --project="${GCP_PROJECT_ID}"

# Fetch the URL for the Cloud Run ESPv2 instance.
readonly CLOUD_RUN_SERVICE_URL="$(gcloud beta run services describe "${CLOUD_RUN_SERVICE_NAME}" --project="${GCP_PROJECT_ID}" --region=europe-west2 --platform=managed --format='value(status.url)')" 
# Fetch the URL for the Cloud Run Oak Functions instance.
readonly BACKEN_CLOUD_RUN_URL="$(gcloud beta run services describe "${FUNCTIONS_INSTANCE_NAME}" --project="${GCP_PROJECT_ID}" --region=europe-west2 --platform=managed --format='value(status.url)')" 
# Get hostname by dropping 'https://' from the beginning of the URL.
readonly CLOUD_RUN_HOSTNAME="$(echo "${CLOUD_RUN_SERVICE_URL}" | cut -c 9-)"
readonly BACKEND_CLOUD_RUN_HOST="$(echo "${BACKEN_CLOUD_RUN_URL}" | cut -c 9-)"


# Configuring Endpoints
sed \
  --expression="s/###SERVICE_HOSTNAME###/${CLOUD_RUN_HOSTNAME}/" \
  --expression="s/###TITLE###/${API_TITLE}/" \
  --expression="s/###BACKEND_HOSTNAME###/${BACKEND_CLOUD_RUN_HOST}/" \
  < ./oak_functions/gcp/endpoint_api_config.yaml.template \
  > "${OUT_DIR}/endpoint_api_config.yaml" \

# Deploy the Endpoint configuration
gcloud endpoints services deploy "${OUT_DIR}/server.pb" "${OUT_DIR}/endpoint_api_config.yaml" \
  --project="${GCP_PROJECT_ID}"

# Get the CONFIG_ID. The first one in the list is the most recent one, so `--limit=1` is used.  
readonly CONFIG_ID="$(gcloud endpoints configs list --service="${CLOUD_RUN_HOSTNAME}" --limit=1 --format='value(id)')"

# Building a new ESPv2 image
./scripts/gcloud_build_image -s "${CLOUD_RUN_HOSTNAME}" \
    -c "${CONFIG_ID}" -p "${GCP_PROJECT_ID}"

# Get the image tag for the newly created container 
readonly IMAGE_TAG="$(gcloud container images list-tags gcr.io/oak-ci/endpoints-runtime-serverless --limit=1 --format='value(tags)')"

# Deploying the ESPv2 container
gcloud beta run deploy "${CLOUD_RUN_SERVICE_NAME}" \
  --image="gcr.io/oak-ci/endpoints-runtime-serverless:${IMAGE_TAG}" \
  --use-http2 \
  --allow-unauthenticated \
  --platform=managed \
  --project=oak-ci
