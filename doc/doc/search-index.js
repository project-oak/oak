var searchIndex = new Map(JSON.parse('[\
["echo",{"doc":"Oak Functions echo example.","t":"H","n":["main"],"q":[[0,"echo"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["invalid_module",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["key_value_lookup",{"doc":"Oak Functions key / value lookup example.","t":"H","n":["main"],"q":[[0,"key_value_lookup"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["lookup_data_generator",{"doc":"","t":"CH","n":["data","generate_and_serialize_random_entries"],"q":[[0,"lookup_data_generator"],[1,"lookup_data_generator::data"],[2,"bytes::bytes_mut"],[3,"anyhow"],[4,"rand::rng"]],"d":["","Generates random lookup entries with the specified sizes …"],"i":[0,0],"f":"`{{cbbb}{{f{d}}}h}","c":[],"p":[[1,"usize"],[5,"BytesMut",2],[8,"Result",3],[10,"Rng",4]],"b":[]}],\
["micro_rpc",{"doc":"","t":"PPKPPPEPRRPPPPEPPPPFPFGFGKPPPPFNNNNNNNNNNNNNNNNNHONNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNN","n":["Aborted","AlreadyExists","AsyncTransport","Cancelled","DataLoss","DeadlineExceeded","Err","Err","Error","Error","FailedPrecondition","Internal","InvalidArgument","NotFound","Ok","Ok","Ok","OutOfRange","PermissionDenied","RequestWrapper","ResourceExhausted","ResponseWrapper","Result","Status","StatusCode","Transport","Unauthenticated","Unavailable","Unimplemented","Unknown","Vec","advance_mut","allocator","and","and_then","append","as_deref","as_deref_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_slice","async_client_invoke","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","capacity","chunk_mut","clear","clear","clear","clear","client_invoke","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","code","copied","copied","dedup","dedup_by","dedup_by_key","default","default","default","deref","deref_mut","drain","drop","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","err","expect","expect_err","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","extract_if","flatten","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_output","from_raw_parts","from_raw_parts_in","from_residual","from_residual","hash","hash","index","index_mut","insert","inspect","inspect_err","into","into","into","into","into","into","into_boxed_slice","into_err","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_ok","into_raw_parts","into_raw_parts_with_alloc","invoke","invoke","is_empty","is_err","is_err_and","is_ok","is_ok_and","is_write_vectored","iter","iter_mut","leak","len","map","map_err","map_or","map_or_else","message","method_id","ne","ne","ne","ne","ne","ne","new","new","new_in","new_with_message","ok","or","or_else","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","product","push","push_within_capacity","put","put_bytes","put_slice","remaining_mut","remove","report","reserve","reserve_exact","resize","resize_with","response","response_wrapper","retain","retain_mut","set_len","shrink_to","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","sum","swap_remove","to_owned","to_owned","to_owned","to_owned","to_string","transpose","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","with_capacity","with_capacity_in","write","write_all","write_vectored","Body","Error","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"micro_rpc"],[295,"micro_rpc::response_wrapper"],[313,"core::alloc"],[314,"core::ops::function"],[315,"core::ops::deref"],[316,"core::ops::deref"],[317,"core::default"],[318,"core::ops::control_flow"],[319,"bytes::buf::uninit_slice"],[320,"core::clone"],[321,"core::cmp"],[322,"core::cmp"],[323,"core::cmp"],[324,"core::ops::range"],[325,"bytes::bytes_mut"],[326,"bytes::bytes"],[327,"core::option"],[328,"core::fmt"],[329,"core::iter::traits::collect"],[330,"alloc::vec::extract_if"],[331,"std::io::error"],[332,"core::fmt"],[333,"alloc::ffi::c_str"],[334,"alloc::collections::binary_heap"],[335,"alloc::string"],[336,"alloc::collections::vec_deque"],[337,"alloc::boxed"],[338,"miniz_oxide"],[339,"miniz_oxide"],[340,"core::convert"],[341,"core::convert"],[342,"core::hash"],[343,"core::convert"],[344,"core::result"],[345,"core::pin"],[346,"core::cmp"],[347,"core::iter::traits::accum"],[348,"bytes::buf::buf_impl"],[349,"std::process"],[350,"std::process"],[351,"alloc::vec::splice"],[352,"core::iter::traits::accum"],[353,"core::any"],[354,"std::io"],[355,"bytes::buf::buf_mut"],[356,"prost::encoding"],[357,"prost::encoding"]],"d":["The operation was aborted.","Some entity that we attempted to create already exists.","Same as <code>Transport</code>, but for async use cases.","The operation was cancelled.","Unrecoverable data loss or corruption.","Deadline expired before operation could complete.","","Contains the error value","Type representing any transport-specific errors. By …","See <code>Transport::Error</code>.","The system is not in a state required for the operation’…","Internal error.","Client specified an invalid argument.","Some requested entity was not found.","","The operation completed successfully.","Contains the success value","Operation was attempted past the valid range.","The caller does not have permission to execute the …","A wrapper message representing a request over a transport.","Some resource has been exhausted.","A wrapper message representing a response over a transport.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","","gRPC status codes used by <code>Status</code>.","A message-oriented transport that allows performing …","The request does not have valid authentication credentials","The service is currently unavailable.","Operation is not implemented or not supported.","Unknown error.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","Returns a reference to the underlying allocator.","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","","","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","Extracts a slice containing the entire vector.","Same as <code>client_invoke</code>, but via an <code>AsyncTransport</code>.","The bytes of the serialized request.","","","","","","","","","","","","","","","","Returns the total number of elements the vector can hold …","","","","Clears the vector, removing all values.","","Invokes the method identified by <code>method_id</code> via the …","","","","","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Creates an iterator which uses a closure to determine if …","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","","","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","","","","Returns the argument unchanged.","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","","","","Inserts an element at position <code>index</code> within the vector, …","Calls the provided closure with a reference to the …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Returns the contained <code>Err</code> value, but never panics.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","Creates a consuming iterator, that is, one that moves each …","","","Returns a consuming iterator over the possibly contained …","","Returns the contained <code>Ok</code> value, but never panics.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","See <code>Transport::invoke</code>.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Err</code> and the value inside of …","Returns <code>true</code> if the result is <code>Ok</code>.","Returns <code>true</code> if the result is <code>Ok</code> and the value inside of …","","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …","English message that helps developers understand and …","The id of the method to invoke. This is usually specified …","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","","","Removes the last element from a vector and returns it, or …","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","","","","","Removes and returns the element at position <code>index</code> within …","","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Removes an element from the vector and returns it.","","","","","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","The bytes of the serialized response, if successful.","A status / error message, in case of failure.","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[31,31,0,31,31,31,0,6,21,14,31,31,31,31,0,31,6,31,31,0,31,0,0,0,0,0,31,31,31,31,0,2,2,6,6,2,6,6,2,2,6,2,2,2,2,2,6,2,0,19,19,20,13,31,2,2,6,19,20,13,31,2,2,6,6,2,2,19,20,2,2,0,19,20,2,6,2,6,19,20,2,6,6,6,2,6,13,6,6,2,2,2,19,20,2,2,2,2,2,19,20,2,19,20,13,31,2,2,2,2,2,2,2,2,6,6,6,6,2,2,2,2,2,2,2,2,2,6,2,19,20,13,13,31,2,6,0,19,20,20,13,31,31,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,2,6,6,2,2,6,6,2,6,2,2,2,6,6,19,20,13,31,2,6,2,6,2,2,2,2,6,6,6,6,2,2,21,14,2,6,6,6,6,2,6,6,2,2,6,6,6,6,13,19,2,2,2,2,2,2,13,2,2,13,6,6,6,2,2,2,6,2,6,2,2,2,2,2,2,2,6,2,2,2,2,20,0,2,2,2,2,2,2,2,2,2,6,2,19,20,2,6,13,6,2,19,20,13,31,2,6,19,20,13,31,2,6,2,2,19,20,13,31,2,6,6,6,6,6,6,6,6,2,2,2,2,2,81,81,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81],"f":"```````````````````````````````{{{d{b}}f}h}{{{d{ce}}}e{}j}{{{l{ce}}{l{ge}}}{{l{ge}}}{}{}{}}{{{l{ce}}i}{{l{ge}}}{}{}{}{{A`{c}{{n{{l{ge}}}}}}}}{{{d{ce}}{d{ce}}}h{}j}{{{l{ce}}}{{l{e}}}Ab{}}{{{l{ce}}}{{l{e}}}Ad{}}{{{d{ce}}}{{d{ce}}}{}j}{{{d{ce}}}{{Af{c}}}{}j}{{{l{ce}}}{{l{ce}}}{}{}}{{{d{ce}}}{}{}j}203212{{cAhe}{{l{{l{gAj}}}}}AlAn{AnB`}}`{ce{}{}}0000400000040{{{l{ce}}}Bb{}{}}{{{d{ce}}}f{}j}{{{d{b}}}Bd}{Bfh}{Bhh}{{{d{ce}}}h{}j}{{{d{b}}}h}{{cAhe}{{l{{l{gAj}}}}}BjAn{AnB`}}{BfBf}{BhBh}{{{d{ce}}}{{d{ce}}}Bl{jBl}}{{{l{ce}}}{{l{ce}}}BlBl}{{{d{ce}}{d{ce}}}hBl{jBl}}{{{l{ce}}{l{ce}}}hBlBl}{{ce}h{}{}}000{{{l{ce}}}{{l{ce}}}Bl{}}0{{{d{ce}}{d{ce}}}BnC`j}{{{l{ce}}{l{ce}}}BnC`C`}`{{{l{ce}}}{{l{ce}}}Cb{}}0{{{d{ce}}}hCdj}{{{d{ce}}g}h{}j{{Ch{cc}{{n{Cf}}}}}}{{{d{ce}}i}h{}jCd{{Ch{c}{{n{g}}}}}}{{}Bf}{{}Bh}{{}{{d{c}}}{}}{{{d{ce}}}{{Af{c}}}{}j}0{{{d{ce}}g}{{Cj{ce}}}{}j{{Cl{f}}}}{{{d{ce}}}h{}j}{Bff}{Bhf}{{{d{b}}}f}{{BfBf}Cf}{{BhBh}Cf}{{AjAj}Cf}{{CnCn}Cf}{{{d{eg}}{Af{c}}}Cf{}{{Cd{c}}}j}{{{d{eg}}{D`{c}}}Cf{}{{Cd{c}}}j}{{{d{b}}Db}Cf}{{{d{eg}}{d{ci}}}Cf{}{{Cd{c}}}jj}32{{{d{b}}Dd}Cf}4{{{l{ce}}{l{ce}}}CfCdCd}{{{l{ce}}}{{Df{e}}}{}{}}{{{l{ce}}Dh}c{}Dj}{{{l{ce}}Dh}eDj{}}{{{d{ce}}g}h{}j{{Dn{}{{Dl{c}}}}}}{{{d{ce}}g}hCbj{{Dn{}{{Dl{c}}}}}}{{{d{ce}}{Af{c}}}hBlj}{{{d{ce}}g}hBlj{{Cl{f}}}}{{{d{ce}}c}h{}j}{{{d{ce}}c}hCbj}{{{d{ce}}f}h{}j}{{{d{ce}}f}hCbj}{{{d{ce}}g}{{E`{cge}}}{}j{{Ch{c}{{n{Cf}}}}}}{{{l{{l{ce}}e}}}{{l{ce}}}{}{}}{{{d{bc}}}{{l{hEb}}}j}{{BfEd}Ef}{{BhEd}Ef}{{AjEd}Ef}0{{CnEd}Ef}{{{d{ce}}Ed}{{l{hEh}}}Djj}{{{l{ce}}Ed}{{l{hEh}}}DjDj}`{cc{}}0{{{l{{d{b}}Aj}}}Bh}1{AhCn}2{{{Af{c}}}{{d{c}}}Bl}{{{Ej{{Af{c}}}}}{{d{c}}}{}}{{{D`{c}}}{{d{c}}}Bl}{Dh{{d{b}}}}{El{{d{b}}}}{{{En{ce}}}{{d{ce}}}{}j}{Db{{d{b}}}}{Dd{{d{b}}}}{F`{{d{b}}}}86{{{D`{c}}}{{d{c}}}{}}{{{Fb{ce}}}{{d{ce}}}{}j}={{{Fd{{Af{c}}e}}}{{d{ce}}}{}j}{Ff{{l{FhFj}}}}0{Bh{{l{{d{b}}Aj}}}}{cc{}}{e{{d{c}}}{}{{Dn{}{{Dl{c}}}}}}{g{{l{ie}}}{}{}{{Dn{}{{Dl{{l{ce}}}}}}}{{Fl{c}}}}{{}{{l{ce}}}{}{}}{{ff}{{d{c}}}{}}{{ffc}{{d{ec}}}j{}}{{{Fn{c}}}{{l{eg}}}{}{}{{G`{c}}}}{{{l{Gbc}}}{{l{eg}}}{}{}{{G`{c}}}}{{{d{ce}}g}hGdjGf}{{{l{ce}}g}hGdGdGf}{{{d{ce}}g}{}{}j{{Gh{{Af{c}}}}}}0{{{d{ce}}fc}h{}j}{{{l{ce}}g}{{l{ce}}}{}{}{{A`{c}}}}{{{l{ce}}g}{{l{ce}}}{}{}{{A`{e}}}}{ce{}{}}00000{{{d{ce}}}{{Fd{{Af{c}}e}}}{}j}{{{l{ce}}}e{{Gl{Gj}}}{}}{{{d{{D`{c}}e}}}{{d{ce}}}{}j}{{{d{ce}}}{}{}j}00{{{l{ce}}}{{Gn{c}}}{}{}}{{{l{ce}}}{{H`{c}}}{}{}}{{{l{ce}}}{{Hb{c}}}{}{}}{{{l{ce}}}c{}{{Gl{Gj}}}}{{{d{ce}}}{{Hd{ff}}}{}j}{{{d{ce}}}{{Hd{ffe}}}{}j}{{Bj{Af{b}}}{{l{{d{b}}c}}}{}}{{Al{Af{b}}}{{Hh{{Fd{Hf}}}}}}{{{d{ce}}}Cf{}j}{{{l{ce}}}Cf{}{}}{{{l{ce}}g}Cf{}{}{{A`{e}{{n{Cf}}}}}}1{{{l{ce}}g}Cf{}{}{{A`{c}{{n{Cf}}}}}}{{{d{bc}}}Cfj}:<{{{d{ce}}}{{Af{c}}}{}j}{{{d{ce}}}f{}j}{{{l{ce}}i}{{l{ge}}}{}{}{}{{A`{c}{{n{g}}}}}}{{{l{ce}}i}{{l{cg}}}{}{}{}{{A`{e}{{n{g}}}}}}{{{l{ce}}gi}g{}{}{}{{A`{c}{{n{g}}}}}}{{{l{ce}}ik}g{}{}{}{{A`{e}{{n{g}}}}}{{A`{c}{{n{g}}}}}}``{{{d{eg}}{D`{c}}}Cf{}{{Cd{c}}}j}0{{{d{eg}}{d{ci}}}Cf{}{{Cd{c}}}jj}{{{d{eg}}{Af{c}}}Cf{}{{Cd{c}}}j}00{CnAj}{{}{{d{c}}}{}}{c{{d{ec}}}j{}}{{Cnc}Aj{{Gl{F`}}}}{{{l{ce}}}{{Df{c}}}{}{}}{{{l{ce}}{l{cg}}}{{l{cg}}}{}{}{}}{{{l{ce}}i}{{l{cg}}}{}{}{}{{A`{e}{{n{{l{cg}}}}}}}}{{{d{ce}}{d{cg}}}{{Df{Bn}}}Hjjj}{{{d{b}}Dd}{{Df{Bn}}}}{{{d{b}}Db}{{Df{Bn}}}}{{{l{ce}}{l{ce}}}{{Df{Bn}}}HjHj}{{{d{ce}}}{{Df{c}}}{}j}{g{{l{ie}}}{}{}{{Hl{}{{Dl{{l{ce}}}}}}}{{Hn{c}}}}{{{d{ce}}c}h{}j}{{{d{ce}}c}{{l{hc}}}{}j}{{{d{b}}c}hI`}{{{d{b}}bf}h}{{{d{b}}{Af{b}}}h}{{{d{b}}}f}{{{d{ce}}f}c{}j}{{{l{ce}}}IbIdDj}{{{d{ce}}f}h{}j}0{{{d{ce}}fc}hBlj}{{{d{ce}}fg}h{}j{{Ch{}{{n{c}}}}}}``{{{d{ce}}g}h{}j{{Ch{c}{{n{Cf}}}}}}033{{{d{ce}}}h{}j}{{{d{ce}}}{{Af{{If{c}}}}}{}j}{{{d{ce}}gi}{{Ih{e}}}{}j{{Cl{f}}}{{Dn{}{{Dl{c}}}}}}{{{d{ce}}}{{Hd{{Af{c}}{Af{{If{c}}}}}}}{}j}{{{d{ce}}f}{{d{ce}}}{}{Blj}}{g{{l{ie}}}{}{}{{Hl{}{{Dl{{l{ce}}}}}}}{{Ij{c}}}};{ce{}{}}000{cF`{}}{{{l{{Df{c}}e}}}{{Df{{l{ce}}}}}{}{}}<{c{{l{e}}}{}{}}00000000000{{{d{ce}}f}{{l{hIl}}}{}j}0{cIn{}}00000{{{l{ce}}}c{}Dj}{{{l{ce}}}eDj{}}{{{l{ce}}}e{}{}}{{{l{ce}}c}c{}{}}{{{l{ce}}}cB`{}}{{{l{ce}}g}c{}{}{{A`{e}{{n{c}}}}}}{{{l{ce}}}c{}{}}{f{{d{c}}}{}}{{fc}{{d{ec}}}j{}}{{{d{bc}}{Af{b}}}{{l{fEb}}}j}{{{d{bc}}{Af{b}}}{{l{hEb}}}j}{{{d{bc}}{Af{J`}}}{{l{fEb}}}j}```{ce{}{}}0{JbJb}{{ce}h{}{}}{{Jbc}hJd}{Jbf}{{JbJb}Cf}{{JbEd}Ef}{cc{}}7{{{Df{Jb}}AhJfcJh}{{l{hJj}}}I`}8{c{{l{e}}}{}{}}0{cIn{}}","c":[],"p":[[1,"u8"],[5,"Vec",0],[1,"usize"],[1,"unit"],[10,"Allocator",313],[6,"Result",0],[17,"Output"],[10,"FnOnce",314],[10,"Deref",315],[10,"DerefMut",315],[1,"slice"],[1,"u32"],[5,"Status",0],[10,"AsyncTransport",0],[10,"Message",316],[10,"Default",317],[6,"ControlFlow",318],[5,"UninitSlice",319],[5,"RequestWrapper",0],[5,"ResponseWrapper",0],[10,"Transport",0],[10,"Clone",320],[6,"Ordering",321],[10,"Ord",321],[10,"Copy",322],[10,"PartialEq",321],[1,"bool"],[10,"FnMut",314],[5,"Drain",323],[10,"RangeBounds",324],[6,"StatusCode",0],[1,"array"],[5,"BytesMut",325],[5,"Bytes",326],[6,"Option",327],[1,"str"],[10,"Debug",328],[17,"Item"],[10,"IntoIterator",329],[5,"ExtractIf",330],[5,"Error",331],[5,"Formatter",328],[8,"Result",328],[5,"Error",328],[6,"Cow",332],[5,"CString",333],[5,"BinaryHeap",334],[5,"String",335],[5,"VecDeque",336],[5,"Box",337],[5,"StreamResult",338],[6,"MZStatus",338],[6,"MZError",338],[10,"FromIterator",329],[5,"Yeet",339],[10,"From",340],[6,"Infallible",340],[10,"Hash",341],[10,"Hasher",341],[10,"SliceIndex",342],[1,"never"],[10,"Into",340],[5,"IterMut",343],[5,"IntoIter",343],[5,"Iter",343],[1,"tuple"],[10,"Future",344],[5,"Pin",345],[10,"PartialOrd",321],[10,"Iterator",346],[10,"Product",347],[10,"Buf",348],[5,"ExitCode",349],[10,"Termination",349],[20,"MaybeUninit",350],[5,"Splice",351],[10,"Sum",347],[5,"TryReserveError",352],[5,"TypeId",353],[5,"IoSlice",354],[6,"Response",295],[10,"BufMut",355],[6,"WireType",356],[5,"DecodeContext",356],[5,"DecodeError",357]],"b":[[38,"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[39,"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[44,"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[45,"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[69,"impl-Vec%3CT,+A%3E"],[70,"impl-Message-for-Vec%3Cu8%3E"],[82,"impl-Result%3C%26mut+T,+E%3E"],[83,"impl-Result%3C%26T,+E%3E"],[87,"impl-Result%3C%26mut+T,+E%3E"],[88,"impl-Result%3C%26T,+E%3E"],[106,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[107,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[108,"impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E"],[109,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[110,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[111,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[112,"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E"],[113,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[118,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[119,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[122,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[123,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[124,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[125,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[131,"impl-Debug-for-Status"],[132,"impl-Display-for-Status"],[143,"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E"],[144,"impl-From%3CCow%3C\'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E"],[145,"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E"],[146,"impl-From%3C%26str%3E-for-Vec%3Cu8%3E"],[147,"impl-From%3CCString%3E-for-Vec%3Cu8%3E"],[148,"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[149,"impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E"],[150,"impl-From%3CBytes%3E-for-Vec%3Cu8%3E"],[151,"impl-From%3CString%3E-for-Vec%3Cu8%3E"],[152,"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E"],[153,"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E"],[154,"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E"],[155,"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[157,"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E"],[158,"impl-From%3CStreamResult%3E-for-Result%3CMZStatus,+MZError%3E"],[159,"impl-From%3C%26StreamResult%3E-for-Result%3CMZStatus,+MZError%3E"],[160,"impl-From%3CResponseWrapper%3E-for-Result%3CVec%3Cu8%3E,+Status%3E"],[167,"impl-FromResidual%3CYeet%3CE%3E%3E-for-Result%3CT,+F%3E"],[168,"impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Result%3CT,+F%3E"],[185,"impl-IntoIterator-for-%26Vec%3CT,+A%3E"],[186,"impl-IntoIterator-for-Vec%3CT,+A%3E"],[187,"impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E"],[188,"impl-IntoIterator-for-%26mut+Result%3CT,+E%3E"],[189,"impl-IntoIterator-for-Result%3CT,+E%3E"],[190,"impl-IntoIterator-for-%26Result%3CT,+E%3E"],[212,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[213,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[214,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[215,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[216,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[217,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[225,"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[226,"impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E"],[227,"impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E"]]}],\
["micro_rpc_build",{"doc":"This crate allows compiling protobuf services to Rust in …","t":"FFGPPNNNNNNONNNNNNHNNNOONNNNNNNNONNNNNNNNNNNN","n":["CompileOptions","ExternPath","ReceiverType","RefMutSelf","RefSelf","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone_into","clone_into","clone_into","compile","default","default","default","enable_type_names","extern_paths","fmt","from","from","from","into","into","into","new","receiver_type","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"micro_rpc_build"],[45,"std::path"],[46,"core::convert"],[47,"core::fmt"],[48,"core::fmt"],[49,"core::any"]],"d":["","","","&amp;mut self","&amp;self","","","","","","","List of <code>bytes</code> fields that will use <code>bytes::Bytes</code> instead of …","","","","","","","Compile Rust server code from the services in the provided …","","","","Configures the code generator to include type names.","Specifies externally provided Protobuf packages or types.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Specifies the receiver type in generated server code.","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,2,3,1,2,3,2,1,2,3,1,2,3,0,1,2,3,2,2,1,1,2,3,1,2,3,3,2,1,2,3,1,2,3,1,2,3,1,2,3],"f":"`````{ce{}{}}00000`{bb}{dd}{ff}{{ce}h{}{}}00{{{j{c}}{j{e}}d}h{{n{l}}}{{n{l}}}}{{}b}{{}d}{{}f}``{{bA`}Ab}{cc{}}00:::{{AdAd}f}`;;;{c{{Af{e}}}{}{}}00000{cAh{}}00","c":[],"p":[[6,"ReceiverType",0],[5,"CompileOptions",0],[5,"ExternPath",0],[1,"unit"],[1,"slice"],[5,"Path",45],[10,"AsRef",46],[5,"Formatter",47],[8,"Result",47],[1,"str"],[6,"Result",48],[5,"TypeId",49]],"b":[]}],\
["oak_attestation",{"doc":"","t":"CCFNNNNHNNNHNNNNNFFNNNNNNNNNNNNNNNNNNNN","n":["dice","handler","DiceBuilder","add_application_keys","add_layer","borrow","borrow_mut","evidence_to_proto","from","into","serialize","stage0_dice_data_to_proto","try_from","try_from","try_into","type_id","vzip","AsyncEncryptionHandler","EncryptionHandler","borrow","borrow","borrow_mut","borrow_mut","create","create","from","from","into","into","invoke","invoke","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"oak_attestation"],[2,"oak_attestation::dice"],[17,"oak_attestation::handler"],[39,"coset::cwt"],[40,"ciborium::value"],[41,"alloc::vec"],[42,"p256::ecdsa"],[43,"core::option"],[44,"oak_proto_rust::oak::attestation::v1"],[45,"anyhow"],[46,"oak_dice::evidence"],[47,"oak_proto_rust::oak::attestation::v1"],[48,"core::any"],[49,"oak_crypto::encryption_key"],[50,"alloc::sync"],[51,"core::ops::function"],[52,"oak_crypto::encryption_key"],[53,"oak_proto_rust::oak::crypto::v1"],[54,"oak_proto_rust::oak::crypto::v1"]],"d":["","","Builds the DICE evidence and certificate authority for the …","Adds the CWT certificates application keys to the DICE …","Adds an additional layer of evidence to the DICE data.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Wraps a closure to an underlying function with request …","Wraps a closure to an underlying function with request …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,20,24,20,24,20,24,20,24,20,24,20,24,20,24,20,24,20,24,20,24],"f":"```{{b{j{{h{df}}}}{n{l}}A`{Ab{{n{l}}}}{Ab{A`}}}{{Af{Ad}}}}{{b{j{{h{df}}}}}{{Af{Ah}}}}{ce{}{}}0{Aj{{Af{Ad}}}}{cc{}}2{bAl}{An{{Af{Al}}}}{c{{B`{e}}}{}{}}{Al{{Af{b}}}}1{cBb{}}7``7777{{{Bf{Bd}}c}{{Bh{c}}}{{Bl{{j{l}}}{{Bj{{j{l}}}}}}}}{{{Bf{Bn}}e}{{C`{ec}}}{{Cb{}{{Bj{{j{l}}}}}}}{{Bl{{j{l}}}{{Bj{c}}}}}}7799{{{Bh{c}}Cd}{{Af{Cf}}}{{Bl{{j{l}}}{{Bj{{j{l}}}}}}}}{{{C`{ec}}Cd}{{Af{Cf}}}{{Cb{}{{Bj{{j{l}}}}}}}{{Bl{{j{l}}}{{Bj{c}}}}}}666644;;","c":[],"p":[[5,"DiceBuilder",2],[8,"ClaimName",39],[6,"Value",40],[1,"tuple"],[5,"Vec",41],[1,"u8"],[1,"slice"],[8,"VerifyingKey",42],[6,"Option",43],[5,"Evidence",44],[8,"Result",45],[1,"unit"],[5,"Evidence",46],[5,"DiceData",44],[5,"Stage0DiceData",46],[6,"Result",47],[5,"TypeId",48],[10,"EncryptionKeyHandle",49],[5,"Arc",50],[5,"EncryptionHandler",17],[17,"Output"],[10,"FnOnce",51],[10,"AsyncEncryptionKeyHandle",49],[5,"AsyncEncryptionHandler",17],[10,"Future",52],[5,"EncryptedRequest",53],[5,"EncryptedResponse",53]],"b":[]}],\
["oak_attestation_explain",{"doc":"","t":"KKMM","n":["HumanReadableExplanation","HumanReadableTitle","description","title"],"q":[[0,"oak_attestation_explain"],[4,"alloc::string"],[5,"anyhow"],[6,"anyhow"]],"d":["","Provides human readable explanations for attestation data.","Provides human readable explanations for a layer of an …","Concise title, eg. “Oak Containers Stack in a AMD …"],"i":[0,0,1,5],"f":"``{b{{h{df}}}}{j{{h{df}}}}","c":[],"p":[[10,"HumanReadableExplanation",0],[5,"String",4],[5,"Error",5],[8,"Result",5],[10,"HumanReadableTitle",0]],"b":[]}],\
["oak_attestation_explain_cli",{"doc":"","t":"FNNNNNNONNNNNNHHHHNNNNNN","n":["Params","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","evidence","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","path_exists","segment_title","title","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"oak_attestation_explain_cli"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"std::path"],[32,"alloc::string"],[33,"core::any"]],"d":["","","","","","","","Path to the evidence to inspect.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2],"f":"`{bb}0{ce{}{}}0{{}b}0`{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}5{{}Ad}{Af{{n{AhAj}}}}{{AfAf}Aj}{AfAj}{c{{n{e}}}{}{}}0{cAl{}}{{dj}{{n{Adl}}}}0<","c":[],"p":[[5,"Command",24],[5,"Params",0],[5,"Formatter",25],[8,"Result",25],[5,"ArgMatches",26],[8,"Error",27],[6,"Result",28],[5,"Id",29],[6,"Option",30],[1,"unit"],[1,"str"],[5,"PathBuf",31],[5,"String",32],[5,"TypeId",33]],"b":[]}],\
["oak_attestation_verification",{"doc":"","t":"CCCCCCHHHHFFPFFIIGSPSFPFPOONNNNNNNNNNNNNNOONNNNNNOONNNNNNONNNNNNNNNNNNNNHNNNNNNNOOOOHOOOOONNNNNNOONNNNNNNNNNNNNNNNNNNNNOOHHOHNNNNNNNHHHFFFFFFFFFOOONNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNHOONNNNNNNNNOOOONNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOHHHNNNNNNNNNPPGPPNNHHHHNHNHHHHNHHHHHNNNHNHHHHHH","n":["amd","claims","endorsement","rekor","util","verifier","product_name","validate_ark_ask_certs","verify_attestation_report_signature","verify_cert_signature","ClaimEvidence","ClaimPredicate","ClaimType","ClaimValidity","Claimless","DigestSet","EndorsementStatement","InvalidClaimData","PREDICATE_V2","PredicateType","STATEMENT_V1","Statement","StatementType","Subject","Validity","_type","_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","claim_spec","claim_type","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","digest","digest","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_digest","into","into","into","into","into","into","into","issued_on","name","not_after","not_before","parse_endorsement_statement","predicate","predicate","predicate_type","predicate_type","role","serialize","serialize","serialize","serialize","serialize","serialize","subject","subject","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uri","usage","validate_claim","validate_endorsement","validity","verify_validity_duration","vzip","vzip","vzip","vzip","vzip","vzip","vzip","verify_binary_endorsement","verify_endorsement_statement","verify_endorser_public_key","Body","Data","GenericSignature","Hash","LogEntry","LogEntryVerification","PublicKey","RekorSignatureBundle","Spec","algorithm","api_version","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalized","content","content","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","get_rekor_log_entry_body","hash","integrated_time","into","into","into","into","into","into","into","into","into","kind","log_id","log_index","public_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signed_entry_timestamp","spec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","verification","verify_rekor_body","verify_rekor_log_entry","verify_rekor_signature","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CONTRADICTORY","DIFFERENT","MatchResult","SAME","UNDECIDABLE","borrow","borrow_mut","convert_pem_to_raw","convert_pem_to_verifying_key","convert_raw_to_pem","convert_raw_to_verifying_key","eq","equal_keys","from","get_hex_digest_match","get_raw_digest_match","hash_sha2_256","hex_to_raw_digest","into","is_hex_digest_match","is_raw_digest_match","looks_like_pem","raw_digest_from_contents","raw_to_hex_digest","try_from","try_into","type_id","verify_signature_raw","vzip","extract_evidence","get_expected_values","to_attestation_results","verify","verify_dice_chain","verify_with_expected_values"],"q":[[0,"oak_attestation_verification"],[6,"oak_attestation_verification::amd"],[10,"oak_attestation_verification::claims"],[132,"oak_attestation_verification::endorsement"],[135,"oak_attestation_verification::rekor"],[273,"oak_attestation_verification::util"],[302,"oak_attestation_verification::verifier"],[308,"x509_cert::certificate"],[309,"alloc::string"],[310,"anyhow"],[311,"oak_sev_snp_attestation_report"],[312,"core::result"],[313,"serde::de"],[314,"serde::de"],[315,"core::fmt"],[316,"core::fmt"],[317,"serde::ser"],[318,"serde::ser"],[319,"alloc::vec"],[320,"p256::ecdsa"],[321,"oak_proto_rust::oak"],[322,"oak_proto_rust::oak::attestation::v1"]],"d":["Contains code related to AMD hardware certificates and …","Contains structs for specifying in-toto statements and …","Verifies binary endorsements as coming from Transparent …","This module provides structs for representing a Rekor …","","Provides verification based on evidence, endorsements and …","","","","","Metadata about an artifact that serves as the evidence for …","Detailed content of a claim.","","Validity time range of an issued claim.","Inner type for a simple claim with no further fields.","","","","","","URI representing in-toto statements. We only use V1.","Represents a generic statement that binds a predicate to a …","","A software artifact identified by its name and a set of …","","","","","","","","","","","","","","","","","","A detailed description of the claim, as an optional …","URI indicating the type of the claim. It determines the …","","","","","","","","Collection of cryptographic digests for the contents of …","","","","","","","A collection of artifacts that support the truth of the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the digest found in the endorsement statement. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The timestamp (encoded as an Epoch time) when the claim …","","The timestamp (encoded as an Epoch time) from which the …","The timestamp (encoded as an Epoch time) from which the …","Converts the given byte array into an endorsement …","","","","","Optional field specifying the role of this evidence within …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","URI uniquely identifies this evidence.","","Checks that the given statement is a valid claim:","Checks that the given endorsement statement is a valid and …","Validity duration of this claim.","Checks that the input claim has a validity duration, and …","","","","","","","","Verifies the binary endorsement against log entry and …","Verifies endorsement against the given reference values.","Verifies that the endorser public key coincides with the …","Struct representing the body in a Rekor LogEntry.","Struct representing the hashed data in the body of a Rekor …","Struct representing a signature in the body of a Rekor …","Struct representing a hash digest. Based on …","Struct representing a Rekor LogEntry. Based on …","Struct representing a verification object in a Rekor …","Struct representing a public key included in the body of a …","Convenient struct for verifying the <code>signedEntryTimestamp</code> …","Struct representing the <code>spec</code> in the body of a Rekor …","","","We cannot directly use the type <code>Body</code> here, since body is …","","","","","","","","","","","","","","","","","","","Canonicalized JSON representation, based on RFC 8785 …","Base64 content that is signed.","Base64 content of a public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses the given bytes into a Rekor <code>LogEntry</code> object, and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This is the SHA256 hash of the DER-encoded public key for …","Minimum: 0","","","","","","","","","","The signature over the canonicalized JSON document.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Includes a signature over the body, integratedTime, logID, …","Verifies the signature in the body over the contents.","Verifies a Rekor LogEntry. This includes verifying:","Parses a blob into a Rekor log entry and verifies the …","","","","","","","","","","","","","","","","","Converts a PEM key to raw. Will panic if it does not look …","Converts a PEM-encoded x509/PKIX public key to a verifying …","Converts a raw public key to PEM format.","Converts a raw public key to a verifying key.","","Compares two ECDSA public keys. Instead of comparing the …","Returns the argument unchanged.","Compares two digests instances for equality.","Compares two raw digests.","","Converts hex digest to raw digest.","Calls <code>U::from(self)</code>.","","","Makes a plausible guess whether the public key is in PEM …","Computes various digest formats of a binary array. The …","Converts raw digest to hex digest.","","","","Verifies the signature over the contents using the public …","","Extracts measurements, public keys and other …","","","Verifies entire setup by forwarding to individual setup …","Verifies signatures of the certificates in the DICE chain …","Verifies entire setup by forwarding to individual setup …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,20,0,0,20,0,20,21,9,6,9,20,11,12,13,14,6,9,20,11,12,13,14,11,11,6,9,11,12,13,14,6,13,6,9,11,12,13,14,11,6,9,20,11,12,13,14,6,9,20,11,12,13,14,0,6,9,20,11,12,13,14,11,6,12,12,0,21,9,21,9,13,6,9,11,12,13,14,21,9,6,9,20,11,12,13,14,6,9,20,11,12,13,14,6,9,20,11,12,13,14,13,11,0,0,11,0,6,9,20,11,12,13,14,0,0,0,0,0,0,0,0,0,0,0,0,33,30,29,37,29,30,31,32,33,34,35,36,37,29,30,31,32,33,34,35,36,37,34,35,31,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,34,37,29,30,31,32,33,34,35,36,0,32,29,37,29,30,31,32,33,34,35,36,30,29,29,34,29,30,31,32,33,34,35,36,37,31,36,30,37,37,29,30,31,32,33,34,35,36,37,29,30,31,32,33,34,35,36,37,29,30,31,32,33,34,35,36,33,29,0,0,0,37,29,30,31,32,33,34,35,36,41,41,0,41,41,41,41,0,0,0,0,41,0,41,0,0,0,0,41,0,0,0,0,0,41,41,41,0,41,0,0,0,0,0,0],"f":"``````{b{{f{d}}}}{{bb}{{f{h}}}}{{bj}{{f{h}}}}1`````````````````{ce{}{}}0000000000000``{c{{n{l}}}A`}{c{{n{{Ab{e}}}}}A`Ad}{c{{n{{Af{e}}}}}A`Ad}{c{{n{Ah}}}A`}{c{{n{Aj}}}A`}{c{{n{Al}}}A`}``{{ll}An}{{{Ab{c}}{Ab{c}}}AnB`}{{{Af{c}}{Af{c}}}AnB`}{{AhAh}An}{{AjAj}An}{{AlAl}An}`{{lBb}Bd}{{{Ab{c}}Bb}BdBf}{{BhBb}Bd}{{{Af{c}}Bb}BdBf}{{AhBb}Bd}{{AjBb}Bd}{{AlBb}Bd}{cc{}}000000{Bj{{f{Bl}}}}{ce{}{}}000000````{{{C`{Bn}}}{{f{Bj}}}}`````{{lc}nCb}{{{Ab{c}}e}nCdCb}{{{Af{c}}e}nCdCb}{{Ahc}nCb}{{Ajc}nCb}{{Alc}nCb}``{c{{n{e}}}{}{}}0000000000000{cCf{}}000000``{{{Ab{{Af{c}}}}}{{n{hBh}}}{}}{Bj{{n{hBh}}}}`{{Ch{Ab{{Af{c}}}}}{{f{h}}}{}}<<<<<<<{{Ch{C`{Bn}}{C`{Bn}}{C`{Bn}}{C`{Bn}}{C`{Bn}}}{{f{h}}}}{{ChBj}{{f{h}}}}{{{C`{Bn}}{C`{Bn}}}{{f{h}}}}````````````??????????????????````{c{{n{Cj}}}A`}{c{{n{Cl}}}A`}{c{{n{Cn}}}A`}{c{{n{D`}}}A`}{c{{n{Db}}}A`}{c{{n{Dd}}}A`}{c{{n{Df}}}A`}{c{{n{Dh}}}A`}{{CjCj}An}{{ClCl}An}{{CnCn}An}{{D`D`}An}{{DbDb}An}{{DdDd}An}{{DfDf}An}{{DhDh}An}{{CjBb}Bd}{{ClBb}Bd}{{CnBb}Bd}{{D`Bb}Bd}{{DbBb}Bd}{{DdBb}Bd}{{DfBb}Bd}{{DhBb}Bd}`{cc{}}00000000{{{C`{Bn}}}{{f{Cl}}}}``{ce{}{}}00000000````{{Cjc}nCb}{{Clc}nCb}{{Cnc}nCb}{{D`c}nCb}{{Dbc}nCb}{{Ddc}nCb}{{Dfc}nCb}{{Dhc}nCb}````{Cj{{f{Dj}}}}{c{{n{e}}}{}{}}00000000000000000{cCf{}}00000000``{{Cl{C`{Bn}}}{{f{h}}}}{{{C`{Bn}}{C`{Bn}}{C`{Bn}}}{{f{h}}}}{{{C`{Bn}}{C`{Bn}}}{{f{h}}}}>>>>>>>>>`````>>{Dl{{f{{Dn{Bn}}}}}}{Dl{{f{E`}}}}{{{C`{Bn}}}d}{{{C`{Bn}}}{{f{E`}}}}{{EbEb}An}{{{C`{Bn}}{C`{Bn}}}{{f{An}}}}{cc{}}{{BlBl}Eb}{{EdEd}Eb}{{{C`{Bn}}}{{Ef{Bn}}}}{Bl{{f{Ed}}}}{ce{}{}}{{BlBl}{{f{h}}}}{{EdEd}{{f{h}}}}{DlAn}{{{C`{Bn}}}Ed}{EdBl}{c{{n{e}}}{}{}}0{cCf{}}{{{C`{Bn}}{C`{Bn}}{C`{Bn}}}{{f{h}}}}8{Eh{{f{Ej}}}}{{ChElEn}{{f{F`}}}}{{{f{Ej}}}Fb}{{ChEhElEn}{{f{Ej}}}}3{{ChEhElF`}{{f{Ej}}}}","c":[],"p":[[8,"Certificate",308],[5,"String",309],[8,"Result",310],[1,"unit"],[5,"AttestationReport",311],[5,"Subject",10],[6,"Result",312],[10,"Deserializer",313],[5,"Statement",10],[10,"Deserialize",313],[5,"ClaimPredicate",10],[5,"ClaimValidity",10],[5,"ClaimEvidence",10],[5,"Claimless",10],[1,"bool"],[10,"PartialEq",314],[5,"Formatter",315],[8,"Result",315],[10,"Debug",315],[6,"InvalidClaimData",10],[8,"EndorsementStatement",10],[5,"HexDigest",316],[1,"u8"],[1,"slice"],[10,"Serializer",317],[10,"Serialize",317],[5,"TypeId",318],[1,"i64"],[5,"LogEntry",135],[5,"Body",135],[5,"Spec",135],[5,"Data",135],[5,"Hash",135],[5,"GenericSignature",135],[5,"PublicKey",135],[5,"LogEntryVerification",135],[5,"RekorSignatureBundle",135],[1,"str"],[5,"Vec",319],[8,"VerifyingKey",320],[6,"MatchResult",273],[5,"RawDigest",316],[1,"array"],[5,"Evidence",321],[5,"ExtractedEvidence",321],[5,"Endorsements",321],[5,"ReferenceValues",321],[5,"ExpectedValues",321],[5,"AttestationResults",321]],"b":[]}],\
["oak_attestation_verification_test_utils",{"doc":"","t":"HHHHH","n":["create_containers_reference_values","create_rk_reference_values","kernel_layer_reference_values_from_evidence","reference_values_from_evidence","root_layer_reference_values_from_evidence"],"q":[[0,"oak_attestation_verification_test_utils"],[5,"oak_proto_rust::oak::attestation::v1"],[6,"oak_proto_rust::oak::attestation::v1"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":"{{}b}0{df}{hb}{jl}","c":[],"p":[[5,"ReferenceValues",5],[5,"KernelLayerData",5],[5,"KernelLayerReferenceValues",5],[5,"ExtractedEvidence",5],[5,"RootLayerData",5],[5,"RootLayerReferenceValues",5]],"b":[]}],\
["oak_channel",{"doc":"","t":"KKKCCMCMCMHHFFNNNNNNNNNNNNNNNNNNNSSSISSIKFFOONNNNNNNNMNNMNNNNNNNNNNOOMNNNNNNNNNNFNNNNNNNNNN","n":["Channel","Read","Write","basic_framed","client","flush","message","read_exact","server","write_all","receive_raw","send_raw","ClientChannelHandle","RequestEncoder","borrow","borrow","borrow_mut","borrow_mut","default","encode_request","from","from","into","into","new","read_response","try_from","try_from","try_into","try_into","type_id","type_id","write_request","BODY_OFFSET","INVOCATION_ID_OFFSET","INVOCATION_ID_SIZE","InvocationId","LENGTH_OFFSET","LENGTH_SIZE","Length","Message","RequestMessage","ResponseMessage","body","body","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","decode","decode","encode","encode","encode","eq","eq","fmt","fmt","from","from","into","into","invocation_id","invocation_id","len","len","len","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ServerChannelHandle","borrow","borrow_mut","from","into","new","read_request","try_from","try_into","type_id","write_response"],"q":[[0,"oak_channel"],[10,"oak_channel::basic_framed"],[12,"oak_channel::client"],[33,"oak_channel::message"],[80,"oak_channel::server"],[91,"anyhow"],[92,"alloc::vec"],[93,"core::marker"],[94,"alloc::boxed"],[95,"oak_core::timer"],[96,"core::result"],[97,"core::any"],[98,"core::fmt"],[99,"core::fmt"]],"d":["","Simple no_std compatible equivalent of <code>std::io::Read</code>.","Simple no_std compatible equivalent of <code>std::io::Write</code>.","Basic framed format for use before the channel is handed …","","","Implements the message layer as defined in …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Rust implementation of the Request Message structure …","Rust implementation of the Response Message structure …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,1,0,4,0,1,0,0,0,0,13,10,13,10,10,10,13,10,13,10,13,13,13,10,13,10,13,10,13,0,0,0,0,0,0,0,0,0,0,11,14,11,14,11,14,11,14,11,14,19,11,14,19,11,14,11,14,11,14,11,14,11,14,11,14,19,11,14,11,14,11,14,11,14,11,14,0,24,24,24,24,24,24,24,24,24,24],"f":"`````{b{{f{d}}}}`{{h{l{j}}}{{f{d}}}}`{{b{l{j}}}{{f{d}}}}{c{{f{{n{j}}}}}{A`Ab}}{{c{l{j}}}{{f{d}}}{A`Ab}}``{ce{}{}}000{{}Ad}{{Ad{l{j}}}Af}{cc{}}033{{{Ah{A`}}}Aj}{Aj{{f{{B`{AlAn}}}}}}{c{{Bb{e}}}{}{}}000{cBd{}}0{{AjAf}{{f{d}}}}````````````8888{AfAf}{AlAl}{{ce}d{}{}}0{{{l{j}}}Bf}{{{l{j}}}Af}{{{l{j}}}Al}{Bf{{n{j}}}}{Af{{n{j}}}}{Al{{n{j}}}}{{AfAf}Bh}{{AlAl}Bh}{{AfBj}Bl}{{AlBj}Bl}{cc{}}0{ce{}{}}0``{BfBn}{AfBn}{AlBn}33{c{{Bb{e}}}{}{}}000{cBd{}}0`5565{{{Ah{A`}}}C`}{C`{{f{{B`{AfAn}}}}}}332{{C`Al}{{f{d}}}}","c":[],"p":[[10,"Write",0],[1,"unit"],[8,"Result",91],[10,"Read",0],[1,"u8"],[1,"slice"],[5,"Vec",92],[10,"Channel",0],[10,"Sized",93],[5,"RequestEncoder",12],[5,"RequestMessage",33],[5,"Box",94],[5,"ClientChannelHandle",12],[5,"ResponseMessage",33],[5,"Timer",95],[1,"tuple"],[6,"Result",96],[5,"TypeId",97],[10,"Message",33],[1,"bool"],[5,"Formatter",98],[8,"Result",98],[1,"usize"],[5,"ServerChannelHandle",80]],"b":[]}],\
["oak_client",{"doc":"","t":"CCCFNNNNNNNNNNNKFKNNNMNNNMNNNNNNKFNNHNNNNNNMNN","n":["client","transport","verifier","OakClient","borrow","borrow_mut","create","from","into","into_request","invoke","try_from","try_into","type_id","vzip","EvidenceProvider","GrpcStreamingTransport","Transport","borrow","borrow_mut","from","get_endorsed_evidence","get_endorsed_evidence","into","into_request","invoke","invoke","new","try_from","try_into","type_id","vzip","AttestationVerifier","InsecureAttestationVerifier","borrow","borrow_mut","extract_encryption_public_key","from","into","into_request","try_from","try_into","type_id","verify","verify","vzip"],"q":[[0,"oak_client"],[3,"oak_client::client"],[15,"oak_client::transport"],[32,"oak_client::verifier"],[46,"anyhow"],[47,"tonic::request"],[48,"alloc::vec"],[49,"core::result"],[50,"core::any"],[51,"core::future::future"],[52,"alloc::boxed"],[53,"core::pin"],[54,"oak_proto_rust::oak::crypto::v1"],[55,"oak_proto_rust::oak::session::v1"],[56,"tonic::codec::decode"],[57,"tonic::response"],[58,"tonic"],[59,"oak_proto_rust::oak::session::v1"],[60,"core::ops::function"],[61,"oak_proto_rust::oak::attestation::v1"],[62,"oak_proto_rust::oak::attestation::v1"]],"d":["","","","Client for connecting to Oak. Represents a Relying Party …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A Transport implementation that uses a single gRPC …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Create a new GrpcStreamingTransport.","","","","","","Verifier that doesn’t check the Evidence against …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,15,15,15,5,15,15,15,4,15,15,15,15,15,15,0,0,28,28,0,28,28,28,28,28,28,1,28,28],"f":"````{ce{}{}}0{{cb}{{f{{d{c}}}}}{hj}}{cc{}}2{c{{l{e}}}{}{}}{{{d{c}}{A`{n}}}{{f{{Ab{n}}}}}{hj}}{c{{Ad{e}}}{}{}}0{cAf{}}6```664{j{{Al{{Aj{Ah}}}}}}{An{{Al{{Aj{Ah}}}}}}85{{hB`}{{Al{{Aj{Ah}}}}}}{{AnB`}{{Al{{Aj{Ah}}}}}}{e{{f{An}}}{{Ah{}{{Bb{{Bj{{Bh{{Bf{Bd}}}}}}}}}}}{{C`{{Bn{Bl}}}{{Bb{c}}}}}}665;``;;{Cb{{f{{Ab{n}}}}}}:<9776{{bCbCd}{{f{Cf}}}}{{ChCbCd}{{f{Cf}}}}>","c":[],"p":[[10,"AttestationVerifier",32],[5,"OakClient",3],[8,"Result",46],[10,"Transport",15],[10,"EvidenceProvider",15],[5,"Request",47],[1,"u8"],[1,"slice"],[5,"Vec",48],[6,"Result",49],[5,"TypeId",50],[10,"Future",51],[5,"Box",52],[5,"Pin",53],[5,"GrpcStreamingTransport",15],[5,"EncryptedRequest",54],[17,"Output"],[5,"ResponseWrapper",55],[5,"Streaming",56],[5,"Response",57],[8,"Result",58],[5,"RequestWrapper",55],[5,"Receiver",59],[10,"FnOnce",60],[5,"Evidence",61],[5,"Endorsements",61],[5,"ExtractedEvidence",61],[5,"InsecureAttestationVerifier",32]],"b":[]}],\
["oak_containers_agent",{"doc":"","t":"CPPPPPPPPPGFFFFPPPPNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNONNOONNNNONNNNNNNNNNNNNNNNNNNNNN","n":["metrics","F64Counter","F64Histogram","F64ObservableCounter","F64ObservableGauge","F64ObservableUpDownCounter","F64UpDownCounter","I64ObservableGauge","I64ObservableUpDownCounter","I64UpDownCounter","MeterInstrument","MetricsConfig","MonitoringLayer","MonitoringService","OakObserver","U64Counter","U64Histogram","U64ObservableCounter","U64ObservableGauge","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","clone","clone","clone_into","clone_into","create_monitoring_layer","excluded_metrics","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","init_metrics","into","into","into","into","into","into_make_service","into_request","into_request","into_request","into_request","into_request","launcher_addr","layer","make_service","meter","metric_registry","poll_ready","poll_ready","poll_ready","register_metric","scope","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_containers_agent"],[1,"oak_containers_agent::metrics"],[101,"http::request"],[102,"core::marker"],[103,"tower_service"],[104,"core::clone"],[105,"opentelemetry::metrics::instruments::counter"],[106,"opentelemetry::metrics::instruments::gauge"],[107,"opentelemetry::metrics::instruments::counter"],[108,"opentelemetry::metrics::instruments::up_down_counter"],[109,"axum::routing::into_make_service"],[110,"tonic::request"],[111,"core::task::wake"],[112,"core::result"],[113,"core::task::poll"],[114,"core::convert"],[115,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,11,11,11,11,11,8,19,6,1,11,8,19,6,1,1,1,6,1,6,1,8,19,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,19,6,1,6,1,0,11,8,19,6,1,1,11,8,19,6,1,19,6,1,8,8,1,1,1,8,19,6,1,11,8,19,6,1,11,8,19,6,1,11,8,19,6,1,11,8,19,6,1],"f":"```````````````````{ce{}{}}000000000{{{b{e}}{d{c}}}gf{{h{{d{c}}}}jf}{}}{{c{d{e}}}{}{}{}}{ll}{{{b{c}}}{{b{c}}}j}{{ce}n{}{}}0{A`l}`{{{Ad{Ab}}}Af}{{{Ah{Ab}}}Af}{{{Ah{Aj}}}Af}{{{An{Al}}}Af}{{{B`{Al}}}Af}{{{Bb{Aj}}}Af}{{{B`{Aj}}}Af}{{{An{Ab}}}Af}{{{Ah{Al}}}Af}{{{Bd{Al}}}Af}{cc{}}{{{Bb{Al}}}Af}{{{Ad{Al}}}Af}{{{Bd{Ab}}}Af}333333{BfA`}{ce{}{}}0000{c{{Bh{e}}}{}{}}{c{{Bj{e}}}{}{}}0000`{{lc}e{}{}}{{ce}{}{}{}}``{{{b{e}}Bl}{{C`{{Bn{ng}}}}}f{{h{{d{c}}}}jf}{}}{{cBl}{{C`{{Bn{n}}}}}{}}0{{A`c}n{{Cb{Af}}}}`77{c{{Bn{e}}}{}{}}000000000{cCd{}}000099999","c":[],"p":[[5,"MonitoringService",1],[5,"Request",101],[10,"Send",102],[10,"Service",103],[10,"Clone",104],[5,"MonitoringLayer",1],[1,"unit"],[5,"OakObserver",1],[1,"u64"],[5,"ObservableCounter",105],[6,"MeterInstrument",1],[5,"ObservableGauge",106],[1,"i64"],[1,"f64"],[5,"Counter",105],[5,"UpDownCounter",107],[5,"ObservableUpDownCounter",107],[5,"Histogram",108],[5,"MetricsConfig",1],[5,"IntoMakeService",109],[5,"Request",110],[5,"Context",111],[6,"Result",112],[6,"Poll",113],[10,"Into",114],[5,"TypeId",115]],"b":[[37,"impl-From%3CObservableCounter%3Cu64%3E%3E-for-MeterInstrument"],[38,"impl-From%3CObservableGauge%3Cu64%3E%3E-for-MeterInstrument"],[39,"impl-From%3CObservableGauge%3Ci64%3E%3E-for-MeterInstrument"],[40,"impl-From%3CCounter%3Cf64%3E%3E-for-MeterInstrument"],[41,"impl-From%3CUpDownCounter%3Cf64%3E%3E-for-MeterInstrument"],[42,"impl-From%3CObservableUpDownCounter%3Ci64%3E%3E-for-MeterInstrument"],[43,"impl-From%3CUpDownCounter%3Ci64%3E%3E-for-MeterInstrument"],[44,"impl-From%3CCounter%3Cu64%3E%3E-for-MeterInstrument"],[45,"impl-From%3CObservableGauge%3Cf64%3E%3E-for-MeterInstrument"],[46,"impl-From%3CHistogram%3Cf64%3E%3E-for-MeterInstrument"],[48,"impl-From%3CObservableUpDownCounter%3Cf64%3E%3E-for-MeterInstrument"],[49,"impl-From%3CObservableCounter%3Cf64%3E%3E-for-MeterInstrument"],[50,"impl-From%3CHistogram%3Cu64%3E%3E-for-MeterInstrument"]]}],\
["oak_containers_hello_world_trusted_app",{"doc":"","t":"CH","n":["app_service","create"],"q":[[0,"oak_containers_hello_world_trusted_app"],[1,"oak_containers_hello_world_trusted_app::app_service"],[2,"tokio::net::tcp::listener"],[3,"alloc::vec"],[4,"oak_containers_sdk::crypto"],[5,"anyhow"],[6,"core::result"]],"d":["",""],"i":[0,0],"f":"`{{b{f{d}}h}{{n{jl}}}}","c":[],"p":[[5,"TcpListener",2],[1,"u8"],[5,"Vec",3],[5,"InstanceEncryptionKeyHandle",4],[1,"unit"],[5,"Error",5],[6,"Result",6]],"b":[]}],\
["oak_containers_hello_world_untrusted_app",{"doc":"","t":"CH","n":["service","create"],"q":[[0,"oak_containers_hello_world_untrusted_app"],[1,"oak_containers_hello_world_untrusted_app::service"],[2,"tokio::net::tcp::listener"],[3,"oak_containers_launcher"],[4,"anyhow"]],"d":["",""],"i":[0,0],"f":"`{{bd}{{h{f}}}}","c":[],"p":[[5,"TcpListener",2],[5,"Args",3],[1,"unit"],[8,"Result",4]],"b":[]}],\
["oak_containers_launcher",{"doc":"","t":"FGGPFPPPFPPPPGPPPGONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNONOOHOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNOOO","n":["Args","Channel","ChannelType","Default","Launcher","Network","Network","Network","QemuParams","Sev","SevEs","SevSnp","Tdx","TrustedApplicationAddress","VirtioVsock","VirtioVsock","VirtioVsock","VmType","application_config","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command_for_update","command_for_update","communication_channel","container_bundle","create","default","default","default_for_root","default_for_root","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_ref","from_ref","from_ref","from_ref","get_endorsed_evidence","get_group_keys","get_trusted_app_address","group_id","group_id","initrd","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","kernel","kill","memory_size","num_cpus","path_exists","pci_passthrough","qemu_params","ramdrive_size","stage0_binary","system_image","telnet_console","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_possible_value","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","value_variants","virtio_guest_cid","vm_type","vmm_binary","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait","host_proxy_port","trusted_app_address","trusted_app_address"],"q":[[0,"oak_containers_launcher"],[160,"oak_containers_launcher::Channel"],[163,"clap_builder::builder::command"],[164,"anyhow"],[165,"core::result"],[166,"core::fmt"],[167,"core::fmt"],[168,"clap_builder"],[169,"oak_proto_rust::oak::session::v1"],[170,"anyhow"],[171,"oak_grpc::oak::key_provisioning::v1"],[172,"core::option"],[173,"tonic::request"],[174,"std::path"],[175,"alloc::string"],[176,"clap_builder::builder::possible_value"],[177,"core::any"]],"d":["","","","","","","Use virtual networking.","","Represents parameters used for launching VM instances.","","","","","Interface that is connected to the trusted application.","","","","Types of confidential VMs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Gets the endorsed attestation evidence that the untrusted …","","Gets the address that the untrusted application can use to …","","","Path to the initrd image to use.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Path to the Linux kernel file to use.","","How much memory to give to the enclave binary, e.g., 256M …","How many CPUs to give to the VM.","","Pass the specified host PCI device through to the virtual …","","Size (in kilobytes) of the ramdrive used for the system …","Path to the stage0 image to use.","","Optional port where QEMU will start a telnet server for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional virtio guest CID for virtio-vsock. If not …","Type of the confidential VM. It could be Default, Sev, …","Path to the VMM binary to execute.","","","","","","","","","","",""],"i":[0,0,0,2,0,13,4,5,0,2,2,2,2,0,13,4,5,0,7,3,7,3,7,13,8,2,3,4,7,5,13,8,2,3,4,7,5,2,3,4,5,2,3,4,5,3,7,3,7,7,7,8,2,4,3,7,2,3,4,4,4,4,4,13,2,3,4,7,13,8,2,3,4,7,5,3,7,3,7,2,3,4,5,8,8,8,3,7,3,13,8,2,3,4,7,5,13,8,2,3,4,7,5,3,8,3,3,0,3,7,3,3,7,3,2,3,4,5,2,4,13,13,13,8,2,3,4,7,5,13,8,2,3,4,7,5,13,8,2,3,4,7,5,3,7,3,7,2,4,3,3,3,13,8,2,3,4,7,5,8,30,30,31],"f":"```````````````````{bb}000{ce{}{}}0000000000000{dd}{ff}{hh}{jj}{{ce}l{}{}}000{{}b}000``{n{{Ad{A`Ab}}}}{{}d}{{}h}{Aff}{Afn}{{dd}Ah}{{ff}Ah}{{hh}Ah}{{ce}Ah{}{}}000{{AjAl}An}{{dAl}An}{{fAl}An}{{hAl}An}{{nAl}An}{cc{}}000000{B`{{Ad{fBb}}}}{B`{{Ad{nBb}}}}102222{A`{{Bf{Bd}}}}{{A`Bh}{{Bf{Bj}}}}{A`{{Ad{AjAb}}}}{{}{{Bn{Bl}}}}0`{ce{}{}}000000{c{{C`{e}}}{}{}}000000`{A`l}``{Af{{Ad{CbCd}}}}``````3333{d{{Bn{Cf}}}}{h{{Bn{Cf}}}}{cCd{}}{j{{Ad{Ajc}}}{}}{c{{Ad{e}}}{}{}}0000000000000{cCh{}}000000{{fB`}{{Ad{lBb}}}}{{nB`}{{Ad{lBb}}}}10{{}{{Cj{d}}}}{{}{{Cj{h}}}}```======={A`{{Ad{lAb}}}}```","c":[],"p":[[5,"Command",163],[6,"VmType",0],[5,"QemuParams",0],[6,"ChannelType",0],[6,"Channel",0],[1,"unit"],[5,"Args",0],[5,"Launcher",0],[5,"Error",164],[6,"Result",165],[1,"str"],[1,"bool"],[6,"TrustedApplicationAddress",0],[5,"Formatter",166],[8,"Result",166],[5,"ArgMatches",167],[8,"Error",168],[5,"EndorsedEvidence",169],[8,"Result",164],[5,"GetGroupKeysRequest",170],[5,"GetGroupKeysResponse",170],[5,"Id",171],[6,"Option",172],[5,"Request",173],[5,"PathBuf",174],[5,"String",175],[5,"PossibleValue",176],[5,"TypeId",177],[1,"slice"],[15,"Network",160],[15,"VirtioVsock",160]],"b":[]}],\
["oak_containers_orchestrator",{"doc":"","t":"CCCCCCCHFFFFNNNNNNNNNOONNNNNHNNNNNNNNNONNNNNNNNNNNNNNNNHHFNNHNNNNNNNNNHFNNNNNNNNNNNNNNNNNH","n":["container_runtime","crypto","dice","ipc_server","key_provisioning","launcher_client","logging","run","GroupKeys","GroupPublicKeys","InstanceKeys","InstancePublicKeys","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","encrypted_group_encryption_key","encryption_public_key","encryption_public_key","from","from","from","from","generate_group_keys","generate_instance_keys","into","into","into","into","into_request","into_request","into_request","into_request","provide_group_keys","signing_public_key","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","load_stage1_dice_data","measure_container_and_config","ServiceImplementation","borrow","borrow_mut","create","from","get_application_config","into","into_request","notify_app_ready","try_from","try_into","type_id","vzip","create","LauncherClient","borrow","borrow_mut","create","from","get_application_config","get_container_bundle","get_group_keys","get_key_provisioning_role","into","into_request","notify_app_ready","openmetrics_builder","send_attestation_evidence","try_from","try_into","type_id","vzip","setup"],"q":[[0,"oak_containers_orchestrator"],[7,"oak_containers_orchestrator::container_runtime"],[8,"oak_containers_orchestrator::crypto"],[55,"oak_containers_orchestrator::dice"],[57,"oak_containers_orchestrator::ipc_server"],[70,"oak_containers_orchestrator::key_provisioning"],[71,"oak_containers_orchestrator::launcher_client"],[89,"oak_containers_orchestrator::logging"],[90,"std::path"],[91,"nix::unistd"],[92,"nix::unistd"],[93,"anyhow"],[94,"core::result"],[95,"oak_proto_rust::oak::crypto::v1"],[96,"anyhow"],[97,"oak_grpc::oak::key_provisioning::v1"],[98,"core::any"],[99,"oak_attestation::dice"],[100,"coset::cwt"],[101,"ciborium::value"],[102,"alloc::vec"],[103,"alloc::sync"],[104,"core::convert"],[105,"core::clone"],[106,"core::future::future"],[107,"alloc::boxed"],[108,"core::pin"],[109,"http::uri"],[110,"core::error"],[111,"oak_grpc::oak::containers::v1"],[112,"opentelemetry_otlp::exporter::tonic"],[113,"oak_proto_rust::oak::attestation::v1"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns group encryption private key which was encrypted …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Loads the DICE data from the file provided by Stage 1.","Measures the downloaded container image bytes and …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Utility struct used to interface with the launcher","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Setup logging to syslog."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,13,16,10,14,13,16,10,14,10,16,14,13,16,10,14,13,0,13,16,10,14,13,16,10,14,13,16,13,16,10,14,13,16,10,14,13,16,10,14,13,16,10,14,0,0,0,28,28,0,28,28,28,28,28,28,28,28,28,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0],"f":"```````{{{d{b}}fhjfl}{{Ab{nA`}}}}````{ce{}{}}0000000{{Ad{d{b}}}{{Ah{Af}}}}``{cc{}}000{Aj{{An{AdAl}}}}{{}{{An{AjB`}}}}4444{c{{Bb{e}}}{}{}}000{{AjBd}{{Ah{Ad}}}}`{c{{Ab{e}}}{}{}}0000000{cBf{}}0008888{{}{{Ah{Bh}}}}{{{d{b}}{d{b}}}{{Bn{{An{BjBl}}}}}}`::{{cAj{C`{Ad}}{Bn{b}}{C`{Cb}}l}{{Ab{nA`}}}{{Cd{f}}Cf}}9{{Ch{Bb{n}}}{{Cn{{Cl{Cj}}}}}}<70554<{{D`{C`{Ad}}l}{{Ab{nA`}}}}`=={Db{{Ab{Cb{Cl{Dd}}}}}}<{Cb{{Ab{{Bn{b}}{Cl{Dd}}}}}}0{Cb{{Ah{Bd}}}}{Cb{{Ah{Df}}}}{ce{}{}}={Cb{{Ab{n{Cl{Dd}}}}}}{CbDh}{{CbDj}{{Ab{n{Cl{Dd}}}}}}>>=3{{}{{Ah{n}}}}","c":[],"p":[[1,"u8"],[1,"slice"],[5,"Path",90],[5,"Uid",91],[5,"Gid",91],[5,"CancellationToken",92],[1,"unit"],[5,"Error",93],[6,"Result",94],[5,"GroupKeys",8],[5,"EncryptedRequest",95],[8,"Result",93],[5,"InstanceKeys",8],[5,"GroupPublicKeys",8],[1,"tuple"],[5,"InstancePublicKeys",8],[5,"Request",96],[5,"GroupKeys",97],[5,"TypeId",98],[5,"DiceBuilder",99],[8,"ClaimName",100],[6,"Value",101],[5,"Vec",102],[5,"Arc",103],[5,"LauncherClient",71],[10,"AsRef",104],[10,"Clone",105],[5,"ServiceImplementation",57],[10,"Future",106],[5,"Box",107],[5,"Pin",108],[1,"str"],[5,"Uri",109],[10,"Error",110],[6,"KeyProvisioningRole",111],[5,"TonicExporterBuilder",112],[5,"Evidence",113]],"b":[]}],\
["oak_containers_sdk",{"doc":"","t":"EECCFFKNNNNNNNNNNNNNMNNNNNNNNNFNNNNNNNNNNNNNNNN","n":["InstanceEncryptionKeyHandle","OrchestratorClient","crypto","orchestrator_client","InstanceEncryptionKeyHandle","InstanceSigner","Signer","borrow","borrow","borrow_mut","borrow_mut","create","create","from","from","generate_recipient_context","into","into","into_request","into_request","sign","sign","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","OrchestratorClient","borrow","borrow_mut","clone","clone_into","create","from","from_ref","get_application_config","into","into_request","notify_app_ready","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_sdk"],[4,"oak_containers_sdk::crypto"],[30,"oak_containers_sdk::orchestrator_client"],[47,"anyhow"],[48,"core::future::future"],[49,"alloc::boxed"],[50,"core::pin"],[51,"tonic::request"],[52,"core::result"],[53,"core::any"],[54,"alloc::vec"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Utility struct used to interface with the launcher","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,1,3,1,3,1,3,1,3,1,1,3,1,3,10,3,1,3,1,3,1,3,1,3,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":"```````{ce{}{}}000{{}{{d{b}}}}{{}{{d{f}}}}{cc{}}0{{b{j{h}}}{{A`{{n{l}}}}}}44{c{{Ab{e}}}{}{}}0{{Ad{j{h}}}{{A`{{n{l}}}}}}{{f{j{h}}}{{A`{{n{l}}}}}}{c{{Af{e}}}{}{}}000{cAh{}}099`99{AjAj}{{ce}Al{}{}}{{}{{d{Aj}}}}99{Aj{{d{{An{h}}}}}}=8{Aj{{d{Al}}}}>665>","c":[],"p":[[5,"InstanceEncryptionKeyHandle",4],[8,"Result",47],[5,"InstanceSigner",4],[1,"u8"],[1,"slice"],[10,"Future",48],[5,"Box",49],[5,"Pin",50],[5,"Request",51],[10,"Signer",4],[6,"Result",52],[5,"TypeId",53],[5,"OrchestratorClient",30],[1,"unit"],[5,"Vec",54]],"b":[]}],\
["oak_containers_stage1",{"doc":"","t":"FNNNNCNNCONNNNNCONNOHNNHNNNNFNNNNONNNNNNNSFSSNNONHNNNNHHHONNNONNHH","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","client","command","command_for_update","dice","dice_addr","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","image","init","into","into_request","launcher_addr","main","try_from","try_into","try_parse_phys_addr","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","LauncherClient","borrow","borrow_mut","from","get_oak_system_image","inner","into","into_request","new","try_from","try_into","type_id","vzip","MEMMAP_PATH","MemoryRange","PHYS_MEM_PATH","RESERVED_E820_TYPE","borrow","borrow_mut","end","end_bound","extract_stage0_dice_data","fmt","from","into","into_request","measure_system_image","read_memory_ranges","read_stage0_dice_data","start","start_bound","try_from","try_into","type_description","type_id","vzip","extract","switch"],"q":[[0,"oak_containers_stage1"],[28,"oak_containers_stage1::client"],[41,"oak_containers_stage1::dice"],[64,"oak_containers_stage1::image"],[66,"clap_builder::builder::command"],[67,"core::fmt"],[68,"core::fmt"],[69,"clap_builder"],[70,"core::result"],[71,"clap_builder::util::id"],[72,"core::option"],[73,"tonic::request"],[74,"core::error"],[75,"alloc::boxed"],[76,"x86_64::addr"],[77,"anyhow"],[78,"core::any"],[79,"alloc::vec"],[80,"http::uri"],[81,"core::ops::range"],[82,"oak_attestation::dice"],[83,"coset::cwt"],[84,"ciborium::value"],[85,"oak_dice::evidence"],[86,"std::path"],[87,"core::ffi::c_str"],[88,"core::convert"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","Tries to parse a string slice as an address.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","The path for reading the memory map from the sysfs …","","The path for reading the physical memory from the mem …","The expected string representation for reserved memory.","","","","","Extracts the DICE evidence and ECA key from the Stage 0 …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Measures the downloaded system image bytes and returns it …","Reads the memory ranges which supplied by the firmware to …","Reads the DICE data from the physical memory range …","","","","","","","","",""],"i":[0,2,2,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,0,2,2,2,2,0,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,22,22,22,22,0,22,22,22,22,0,0,0,22,22,22,22,22,22,22,0,0],"f":"`{bb}0{ce{}{}}0`{{}b}0``{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}``5{c{{Ad{e}}}{}{}}`{{}{{n{Af{Aj{Ah}}}}}}{c{{n{e}}}{}{}}0{Al{{B`{An}}}}{cBb{}}{{dj}{{n{Afl}}}}0;`;;8{Bd{{B`{{Bh{Bf}}}}}}`<6{Bj{{B`{Bd}}}}553=````==`{Bl{{Bn{An}}}}{An{{B`{C`}}}}{{Blf}h}={ce{}{}};{{{Cb{Bf}}}{{Bh{{Ch{CdCf}}}}}}{{}{{B`{{Bh{Bl}}}}}}{An{{B`{Cj}}}}`6<<`:3{{{Cb{Bf}}Cl}{{B`{Af}}}}{{Al{Cb{c}}}{{B`{Cn}}}{{Db{D`}}}}","c":[],"p":[[5,"Command",66],[5,"Args",0],[5,"Formatter",67],[8,"Result",67],[5,"ArgMatches",68],[8,"Error",69],[6,"Result",70],[5,"Id",71],[6,"Option",72],[5,"Request",73],[1,"unit"],[10,"Error",74],[5,"Box",75],[1,"str"],[5,"PhysAddr",76],[8,"Result",77],[5,"TypeId",78],[5,"LauncherClient",28],[1,"u8"],[5,"Vec",79],[5,"Uri",80],[5,"MemoryRange",41],[6,"Bound",81],[5,"DiceBuilder",82],[1,"slice"],[8,"ClaimName",83],[6,"Value",84],[1,"tuple"],[5,"Stage0DiceData",85],[5,"Path",86],[1,"never"],[5,"CStr",87],[10,"AsRef",88]],"b":[]}],\
["oak_containers_syslogd",{"doc":"","t":"FNNNNNNNNNNNNNOCHHCNNNNNNHTTTFFTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNCONNNNNNNNNNNOONNNNNFHHHHHHNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","into_request","launcher_addr","log_relay","main","signal_handler","systemd_journal","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","run","ALL_NAMESPACES","CURRENT_USER","INCLUDE_DEFAULT_NAMESPACE","Journal","JournalOpenFlags","LOCAL_ONLY","OS_ROOT","RUNTIME_ONLY","SYSTEM","TAKE_DIRECTORY_FD","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","complement","contains","difference","drop","empty","extend","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into_iter","into_iter","into_request","into_request","is_all","is_empty","iter","iter_names","journal","new","next","next","next_data","not","remove","seek_head","set","sub","sub_assign","symmetric_difference","systemd_sys","terminate","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","vzip","vzip","wait","_data","_marker","borrow","borrow_mut","from","into","into_request","sd_journal","sd_journal_close","sd_journal_enumerate_data","sd_journal_next","sd_journal_open","sd_journal_seek_head","sd_journal_wait","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_syslogd"],[25,"oak_containers_syslogd::log_relay"],[26,"oak_containers_syslogd::systemd_journal"],[105,"oak_containers_syslogd::systemd_journal::systemd_sys"],[123,"clap_builder::builder::command"],[124,"core::fmt"],[125,"core::fmt"],[126,"clap_builder"],[127,"core::result"],[128,"clap_builder::util::id"],[129,"core::option"],[130,"tonic::request"],[131,"core::error"],[132,"alloc::boxed"],[133,"signal_hook_tokio"],[134,"tokio::sync::once_cell"],[135,"alloc::sync"],[136,"core::any"],[137,"oak_containers_orchestrator::launcher_client"],[138,"anyhow"],[139,"core::ffi"],[140,"core::iter::traits::collect"],[141,"bitflags::iter"],[142,"bitflags::iter"],[143,"alloc::string"],[144,"std::collections::hash::map"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Simple wrapper around libsystemd for reading entries from …","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","Reads the next entry from the journal; returns None if …","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Moves the cursor to before the first record in the journal.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Blocks until something is added to the journal.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Opaque type representing the systemd journal obtained via …","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,20,20,20,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,23,20,23,20,20,20,20,23,20,20,20,20,20,20,23,20,20,20,20,20,20,20,20,20,20,23,20,23,20,23,20,20,20,20,20,23,23,23,23,23,20,20,23,20,20,20,20,0,23,20,23,20,23,20,23,20,20,23,20,23,34,34,34,34,34,34,34,0,0,0,0,0,0,0,34,34,34,34],"f":"`{bb}0{ce{}{}}0{{}b}0{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}5{c{{Ad{e}}}{}{}}``{{}{{n{Af{Aj{Ah}}}}}}{{Al{B`{{An{Af}}}}}Af}`{c{{n{e}}}{}{}}0{cBb{}}{{dj}{{n{Afl}}}}0;{{Bd{B`{{An{Af}}}}}{{Bf{Af}}}}``````````{{}Bh}{{BhBh}Bh}{{BhBh}Af}10{BhBj}021{ce{}{}}000{BhBh}{{BhBh}Bl}5{BnAf}7{{Bhc}Af{{Cb{}{{C`{Bh}}}}}}{{Bhf}h}000{cc{}}0{Bj{{Ab{Bh}}}}{BjBh}00{cBh{{Cb{}{{C`{Bh}}}}}}{Cd{{Ab{Bh}}}}<=8:::{Bhc{}}{c{{Ad{e}}}{}{}}0{BhBl}0{Bh{{Cf{Bh}}}}{Bh{{Ch{Bh}}}}`{{Bh{B`{{An{Af}}}}}{{n{BnCj}}}}{Bn{{n{{Ab{{Cn{ClCl}}}}Cj}}}}{Bn{{Ab{c}}}{}}{Bn{{n{{Ab{{Db{D`}}}}Cj}}}}{BhBh}{{BhBh}Af}{Bn{{n{AfCj}}}}{{BhBhBl}Af}{{BhBh}Bh}30``3{c{{n{e}}}{}{}}000{cBb{}}02{ce{}{}}0{Bn{{n{BlCj}}}}``11{cc{}}2{c{{Ad{e}}}{}{}}```````5543","c":[],"p":[[5,"Command",123],[5,"Args",0],[5,"Formatter",124],[8,"Result",124],[5,"ArgMatches",125],[8,"Error",126],[6,"Result",127],[5,"Id",128],[6,"Option",129],[5,"Request",130],[1,"unit"],[10,"Error",131],[5,"Box",132],[8,"Signals",133],[5,"OnceCell",134],[5,"Arc",135],[5,"TypeId",136],[5,"LauncherClient",137],[8,"Result",138],[5,"JournalOpenFlags",26],[8,"c_int",139],[1,"bool"],[5,"Journal",26],[17,"Item"],[10,"IntoIterator",140],[1,"str"],[5,"Iter",141],[5,"IterNames",141],[6,"Errno",142],[5,"String",143],[5,"HashMap",144],[1,"u8"],[1,"slice"],[5,"sd_journal",105]],"b":[[41,"impl-Flags-for-JournalOpenFlags"],[42,"impl-JournalOpenFlags"],[55,"impl-Octal-for-JournalOpenFlags"],[56,"impl-UpperHex-for-JournalOpenFlags"],[57,"impl-Binary-for-JournalOpenFlags"],[58,"impl-LowerHex-for-JournalOpenFlags"],[62,"impl-JournalOpenFlags"],[63,"impl-Flags-for-JournalOpenFlags"],[82,"impl-Journal"],[83,"impl-Iterator-for-Journal"]]}],\
["oak_core",{"doc":"","t":"CCCKFNNNNNNNMNMNNNNFNNNNNNNNNNNFNNNNNNNNHNNNN","n":["samplestore","sync","timer","SampleStore","StaticSampleStore","borrow","borrow_mut","eq","fmt","from","into","new","percentile","percentile","record","record","try_from","try_into","type_id","OnceCell","borrow","borrow_mut","default","from","get","into","new","set","try_from","try_into","type_id","Timer","borrow","borrow_mut","elapsed","fmt","from","into","new","new_rdtsc","rdtsc","timed","try_from","try_into","type_id"],"q":[[0,"oak_core"],[3,"oak_core::samplestore"],[19,"oak_core::sync"],[31,"oak_core::timer"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::result"],[48,"core::any"],[49,"core::ops::function"]],"d":["Probabilistic sample store to compute percentiles over …","Synchronization utils.","Utils to read the CPUs timestamp counter.","","Basic Probabilistic sample store to compute percentiles …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Gets the n-th percentile. n needs to be between 0 and 100, …","","Records a new data point value.","","","","","A synchronised implementation of a cell that can be …","","","","Returns the argument unchanged.","Gets a reference to the inner value if the cell has been …","Calls <code>U::from(self)</code>.","","Sets the inner value of the cell if it has not been …","","","","Measures the number of clock cycles between <code>new()</code> and …","","","Returns the approximate number of clock cycles elapsed …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new timer, recording the current tick counter …","Read the timestamp counter register from the CPU.","Returns the approximate number of clock cycles it took to …","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,6,1,6,1,1,1,1,0,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,0,13,13,13,13],"f":"`````{ce{}{}}0{{bb}d}{{bf}h}{cc{}}3{{}{{j{b}}}}{{ln}{{j{A`}}}}{{bn}{{j{A`}}}}{{lA`}Ab}{{bA`}Ab}{c{{Ad{e}}}{}{}}0{cAf{}}`::{{}{{Ah{c}}}{}}8{{{Ah{c}}}{{j{c}}}{}}<1{{{Ah{c}}c}{{Ad{Abc}}}{}}443`=={AjA`}{{Ajf}h}<?{A`Aj}{{}Aj}{{}A`}{cA`Al}::9","c":[],"p":[[5,"StaticSampleStore",3],[1,"bool"],[5,"Formatter",45],[8,"Result",45],[6,"Option",46],[10,"SampleStore",3],[1,"f64"],[1,"u64"],[1,"unit"],[6,"Result",47],[5,"TypeId",48],[5,"OnceCell",19],[5,"Timer",31],[10,"FnOnce",49]],"b":[]}],\
["oak_crypto",{"doc":"","t":"SCCCCCCKFKNNNNNHMMNNNNNNNNNFKFNNNNNMNNNMNNNNNNNNNNNNNNNKIRIIFFKNNNNNNNMNNNNMNNNNNNNNFFSFFSFSSHHNNNNNNCONHNNNNOHNNNHHHHOHHNNNNNNNNNNNNFFSFSSSHHNNNNNNNNNHNNNNNNHNNNNNHNNHHHNNNNNNNNNNNNNNNKMKM","n":["EMPTY_ASSOCIATED_DATA","encryption_key","encryptor","hpke","noise_handshake","signer","verifier","AsyncEncryptionKeyHandle","EncryptionKey","EncryptionKeyHandle","borrow","borrow_mut","deserialize","encrypted_private_key","from","generate_encryption_key_pair","generate_recipient_context","generate_recipient_context","generate_recipient_context","generate_recipient_context","into","new","serialize","try_from","try_into","type_id","vzip","ClientEncryptor","Encryptor","ServerEncryptor","borrow","borrow","borrow_mut","borrow_mut","create","decrypt","decrypt","decrypt","decrypt_async","encrypt","encrypt","encrypt","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Deserializable","Kem","OutputSize","PrivateKey","PublicKey","RecipientContext","SenderContext","Serializable","borrow","borrow","borrow_mut","borrow_mut","deserialize","from","from","from_bytes","into","into","serialize","size","to_bytes","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Crypter","EcdsaKeyPair","NONCE_LEN","Nonce","P256Scalar","P256_X962_LEN","Response","SHA256_OUTPUT_LEN","SYMMETRIC_KEY_LEN","aes_256_gcm_open_in_place","aes_256_gcm_seal_in_place","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","crypter","decrypt","ecdsa_verify","encrypt","from","from","from","handshake_hash","hkdf_sha256","into","into","into","p256_scalar_mult","rand_bytes","respond_nk","respond_nn","response","sha256","sha256_two_part","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","EcdsaKeyPair","HandshakeInitiator","NONCE_LEN","P256Scalar","P256_X962_LEN","SHA256_OUTPUT_LEN","SYMMETRIC_KEY_LEN","aes_256_gcm_open_in_place","aes_256_gcm_seal_in_place","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_initial_message","bytes","compute_public_key","ecdsa_verify","from","from","from","from_pkcs8","generate","generate_pkcs8","hkdf_sha256","into","into","into","new_nk","new_nn","p256_scalar_mult","process_response","public_key","rand_bytes","sha256","sha256_two_part","sign","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Signer","sign","Verifier","verify"],"q":[[0,"oak_crypto"],[7,"oak_crypto::encryption_key"],[27,"oak_crypto::encryptor"],[55,"oak_crypto::hpke"],[84,"oak_crypto::noise_handshake"],[133,"oak_crypto::noise_handshake::client"],[185,"oak_crypto::signer"],[187,"oak_crypto::verifier"],[189,"anyhow"],[190,"oak_proto_rust::oak::crypto::v1"],[191,"alloc::vec"],[192,"core::future::future"],[193,"alloc::boxed"],[194,"core::pin"],[195,"core::result"],[196,"core::any"],[197,"aead"],[198,"core::convert"],[199,"oak_proto_rust::oak::crypto::v1"],[200,"oak_proto_rust::oak::crypto::v1"],[201,"generic_array"],[202,"generic_array"]],"d":["","","Implementation of the Bidirectional Hybrid Public Key …","","This was copied from Chromium’s …","","","","","Exposes the ability to derive a session key from the …","","","","Returns the private key encrypted with the <code>peer_public_key</code>.","Returns the argument unchanged.","Generates a random encryption key pair and returns an …","","","","","Calls <code>U::from(self)</code>.","","","","","","","Encryptor object for encrypting client requests that will …","","Encryptor object for decrypting client requests that are …","","","","","Creates an HPKE crypto context by generating an new …","","Decrypts a <code>EncryptedResponse</code> proto message using AEAD. …","Decrypts a <code>EncryptedRequest</code> proto message using AEAD. …","Decrypts a <code>EncryptedRequest</code> proto message using AEAD. …","","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Implemented by types that can be deserialized from byte …","","","","","","","Implemented by types that have a fixed-length byte …","","","","","Deserializes recipient context from a <code>SessionKeys</code> Protobuf …","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serializes recipient context into a <code>SessionKeys</code> Protobuf …","Returns the size (in bytes) of this type when serialized","","","","","","","","","","","","","","","The length of an uncompressed, X9.62 encoding of a P-256 …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Perform the HKDF operation from …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Performs the Responder side of the Noise protocol with the …","","","","Compute the SHA-256 hash of the concatenation of two …","","","","","","","","","","","","","","","","","The length of an uncompressed, X9.62 encoding of a P-256 …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Perform the HKDF operation from …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Compute the SHA-256 hash of the concatenation of two …","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,8,10,3,3,3,3,3,3,3,3,3,0,0,0,17,22,17,22,17,18,17,22,22,18,17,22,17,22,17,22,22,17,22,17,22,17,22,17,22,0,0,29,0,0,0,0,0,44,9,44,9,9,44,9,25,44,9,9,29,29,44,9,44,9,44,9,44,9,0,0,0,0,0,0,0,0,0,0,0,45,34,37,45,34,37,0,37,34,0,34,45,34,37,37,0,45,34,37,0,0,0,0,37,0,0,45,34,37,45,34,37,45,34,37,45,34,37,0,0,0,0,0,0,0,0,0,38,36,39,38,36,39,38,36,36,0,38,36,39,39,36,39,0,38,36,39,38,38,0,38,39,0,0,0,39,38,36,36,36,39,38,36,39,38,36,39,38,36,39,0,41,0,43],"f":"``````````{ce{}{}}0{{{d{b}}}{{h{f}}}}{{f{d{b}}}{{h{j}}}}{cc{}}{{}{{n{f{l{b}}}}}}{{A`{d{b}}}{{h{Ab}}}}{{Ad{d{b}}}{{Aj{{Ah{Af}}}}}}{{f{d{b}}}{{Aj{{Ah{Af}}}}}}{{f{d{b}}}{{h{Ab}}}}8{Alf}{f{{l{b}}}}{c{{An{e}}}{}{}}0{cB`{}}<```<<<<{{{d{b}}}{{h{Bb}}}}{{Bdc}{{h{{l{b}}}}}{{Bh{Bf}}}}{{BbBj}{{h{{n{{l{b}}{l{b}}}}}}}}{{jc}{{h{{n{Bl{l{b}}{l{b}}}}}}}{A`Bn}}{{jc}{{h{{n{Bl{l{b}}{l{b}}}}}}}{AdBn}}3{{Bb{d{b}}{d{b}}}{{h{j}}}}{{Bl{d{b}}{d{b}}}{{h{Bj}}}}{cc{}}0{ce{}{}}0{AbBl};;;;::11````````1111{C`{{h{Ab}}}}33{{{d{b}}}{{An{CbCd}}}}33{Ab{{h{C`}}}}{{}Cf}{{{Cj{}{{Ch{c}}}}}{{Cl{bc}}}{{Cn{b}}}}{c{{An{e}}}{}{}}000{cB`{}}088`````````{{{D`{b}}{D`{b}}{d{b}}{l{b}}}{{An{{l{b}}Db}}}}{{{D`{b}}{D`{b}}{d{b}}{l{b}}}Db}::::::``{{Dd{d{b}}}{{An{{l{b}}`}}}}{{{d{b}}{d{b}}{d{b}}}Df}1===`{{{d{b}}{d{b}}{d{b}}{d{b}}}{{An{DbDb}}}}==={{Dh{D`{b}}}{{An{{D`{b}}Db}}}}{{{d{b}}}Db}{{{d{b}}{d{b}}}{{An{Dj`}}}}{{{d{b}}}{{An{Dj`}}}}`{{{d{b}}}{{D`{b}}}}{{{d{b}}{d{b}}}{{D`{b}}}}<<<<<<;;;{ce{}{}}00```````;:000000{Dl{{l{b}}}}{Dh{{D`{b}}}}0:{cc{}}00{{{d{b}}}{{An{DnDb}}}}{{}Dh}{{}{{An{{`{{E`{{d{b}}}}}}Db}}}}=666{{{D`{b}}}Dl}{{}Dl}>{{Dl{d{b}}}{{n{{D`{b}}Dd}}}}{Dn{{`{{E`{{d{b}}}}}}}}?<;{{Dn{d{b}}}{{An{{`{{E`{{d{b}}}}}}Db}}}}{c{{An{e}}}{}{}}{{{D`{b}}}{{An{DhDb}}}}1{{{d{b}}}{{An{DhDb}}}}2222{cB`{}}00???`{{Eb{d{b}}}Ed}`{{Ef{d{b}}Ed}{{h{Db}}}}","c":[],"p":[[1,"u8"],[1,"slice"],[5,"EncryptionKey",7],[8,"Result",189],[5,"EncryptedRequest",190],[5,"Vec",191],[1,"tuple"],[10,"EncryptionKeyHandle",7],[5,"RecipientContext",55],[10,"AsyncEncryptionKeyHandle",7],[10,"Future",192],[5,"Box",193],[5,"Pin",194],[8,"PrivateKey",55],[6,"Result",195],[5,"TypeId",196],[5,"ClientEncryptor",27],[10,"Encryptor",27],[5,"Payload",197],[10,"Into",198],[5,"EncryptedResponse",190],[5,"ServerEncryptor",27],[10,"Sized",199],[5,"SessionKeys",190],[10,"Deserializable",55],[6,"HpkeError",200],[1,"usize"],[17,"OutputSize"],[10,"Serializable",55],[5,"GenericArray",201],[10,"ArrayLength",201],[1,"array"],[1,"unit"],[5,"Crypter",84],[1,"bool"],[5,"P256Scalar",133],[5,"Response",84],[5,"HandshakeInitiator",133],[5,"EcdsaKeyPair",133],[10,"AsRef",198],[10,"Signer",185],[5,"Signature",190],[10,"Verifier",187],[5,"SenderContext",55],[5,"Nonce",84]],"b":[[18,"impl-AsyncEncryptionKeyHandle-for-EncryptionKey"],[19,"impl-EncryptionKeyHandle-for-EncryptionKey"],[172,"impl-TryFrom%3C%26%5Bu8;+P256_SCALAR_LEN%5D%3E-for-P256Scalar"],[174,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-P256Scalar"]]}],\
["oak_debug_service",{"doc":"","t":"FNNNNNNNNNNN","n":["Service","borrow","borrow_mut","cpu_profile","from","into","into_request","new_server","try_from","try_into","type_id","vzip"],"q":[[0,"oak_debug_service"],[12,"oak_grpc::oak::debug"],[13,"tonic::request"],[14,"core::future::future"],[15,"alloc::boxed"],[16,"core::pin"],[17,"oak_grpc::oak::debug::debug_service_server"],[18,"core::result"],[19,"core::any"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{{b{f{d}}}{{l{{j{h}}}}}}{cc{}}2{c{{f{e}}}{}{}}{{}{{n{b}}}}{c{{A`{e}}}{}{}}0{cAb{}}6","c":[],"p":[[5,"Service",0],[5,"CpuProfileRequest",12],[5,"Request",13],[10,"Future",14],[5,"Box",15],[5,"Pin",16],[5,"DebugServiceServer",17],[6,"Result",18],[5,"TypeId",19]],"b":[]}],\
["oak_dice",{"doc":"Structs and helpers for implementing DICE-based …","t":"CCCSSSTTTTTTSSSSSSSSTTTSSFSSSSSSSNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNHHHHHHNNNNNNNNNNNNNNNNNNNNNHPFFSSFFSFPFPSSSSFFSFGPSOONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOOOOONONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["cert","evidence","utils","ACPI_MEASUREMENT_ID","APPLICATION_KEY_ID","CONTAINER_IMAGE_LAYER_ID","CONTENT_COMMITMENT","CRL_SIGN","DATA_ENCIPHERMENT","DECIPHER_ONLY","DIGITAL_SIGNATURE","ENCIPHER_ONLY","ENCLAVE_APPLICATION_LAYER_ID","EVENT_ID","FINAL_LAYER_CONFIG_MEASUREMENT_ID","INITRD_MEASUREMENT_ID","KERNEL_COMMANDLINE_ID","KERNEL_COMMANDLINE_MEASUREMENT_ID","KERNEL_LAYER_ID","KERNEL_MEASUREMENT_ID","KEY_AGREEMENT","KEY_CERT_SIGN","KEY_ENCIPHERMENT","KEY_ID_LENGTH","KEY_USAGE_ID","KeyUsage","LAYER_2_CODE_MEASUREMENT_ID","LAYER_3_CODE_MEASUREMENT_ID","MEMORY_MAP_MEASUREMENT_ID","SETUP_DATA_MEASUREMENT_ID","SHA2_256_ID","SUBJECT_PUBLIC_KEY_ID","SYSTEM_IMAGE_LAYER_ID","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","cose_key_to_hpke_public_key","cose_key_to_verifying_key","derive_kem_public_key_id","derive_verifying_key_id","difference","empty","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","generate_ecdsa_key_pair","generate_kem_certificate","generate_signing_certificate","get_claims_set_from_certificate_bytes","get_public_key_from_claims_set","hpke_public_key_to_cose_key","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","verifying_key_to_cose_key","AmdSevSnp","ApplicationKeys","ApplicationPrivateKeys","CDI_SIZE","CERTIFICATE_SIZE","CertificateAuthority","CompoundDeviceIdentifier","DICE_DATA_CMDLINE_PARAM","Evidence","IntelTdx","LayerEvidence","None","P256_PRIVATE_KEY_SIZE","PRIVATE_KEY_SIZE","PUBLIC_KEY_SIZE","REPORT_SIZE","RestrictedKernelDiceData","RootLayerEvidence","STAGE0_MAGIC","Stage0DiceData","TeePlatform","Unspecified","X25519_PRIVATE_KEY_SIZE","application_keys","application_private_keys","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cdi","claims","claims","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","drop","drop","drop","eca_certificate","eca_private_key","eca_public_key","encryption_private_key","encryption_public_key_certificate","eq","evidence","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_repr","get_eca_public_key","get_remote_attestation_report","get_tee_platform","into","into","into","into","into","into","into","into","into","into","layer_1_cdi","layer_1_certificate_authority","layer_1_evidence","magic","remote_attestation_report","restricted_kernel_evidence","root_layer_evidence","root_layer_evidence","set_eca_public_key","set_remote_attestation_report","signing_private_key","signing_public_key_certificate","tee_platform","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zeroize","zeroize","zeroize","cbor_encoded_bytes_to_vec"],"q":[[0,"oak_dice"],[3,"oak_dice::cert"],[95,"oak_dice::evidence"],[241,"oak_dice::utils"],[242,"coset::key"],[243,"alloc::vec"],[244,"core::result"],[245,"p256::ecdsa"],[246,"core::iter::traits::collect"],[247,"core::fmt"],[248,"core::fmt"],[249,"p256::ecdsa"],[250,"coset::cwt"],[251,"ciborium::value"],[252,"coset::sign"],[253,"coset::common"],[254,"coset::cwt"],[255,"bitflags::iter"],[256,"core::fmt"]],"d":["Constants and helper functions to work with CWT-based DICE …","C-like structs for representing DICE data in environments …","Utilities to handle encoded keys and certificates","The CWT private claim ID for the concatenated hash of the …","The CWT private claim ID of the application keys.","The CWT private claim ID for the container image.","","","","","","","The CWT private claim ID for an enclave application layer.","The CWT private claim ID of the Event.","The CWT private claim ID for the measurement of the …","The CWT private claim ID for the initial RAM file system …","The CWT private claim ID for the raw kernel command-line.","The CWT private claim ID for the kernel command-line …","The CWT private claim ID for the Kernel layer.","The CWT private claim ID for the kernel measurement.","","","","Length of the unique ID for ECDSA keys generated.","ID for the bitstring used to describe the intended usage …","Intended usage of a key.","The CWT private claim ID for the measurement of the layer …","The CWT private claim ID for the measurement of the layer …","The CWT private claim ID for the physical memory map (e820 …","The CWT private claim ID for the kernel setup data …","The CWT private claim ID for SHA2_256 digests.","ID for the CWT private claim corresponding to the Subject …","The CWT private claim ID for the Oak Containers system …","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Converts a COSE_Key to a serialized HPKE KEM public key.","Converts a COSE_Key to a ECDSA verifying key.","Derives an ID from an HPKE KEM public key.","Derives an ID from a verifying key.","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Generates private/public ECDSA key pair.","Generates a CWT certificate representing a Key …","Generates a CWT certificate representing an ECDSA signing …","Parses a bytes slice as a CWT certificate and extracts the …","Extracts the certified public key from the claims set of a …","Converts a serialized HPKE KEM public key to a COSE_Key …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Converts an ECDSA verifying key to a COSE_Key …","AMD SEV-SNP.","Certificates for the ECDSA keys that can be used for an …","ECDSA private keys that can be used for an application for …","The size for compound device identifiers.","The maximum size of a serialized CWT certificate.","Private key that can be used by a layer to sign a …","","The name of the kernel command-line parameter that is used …","Wrapper for passing the attestation evidence from the …","Intel TDX.","Attestation evidence for non-root layers.","None.","The actual size used when encoding a Nist P256 private key.","The maximum size of an ECDSA private key.","The maximum size of a serialized COSE Key object …","The maximum size of the signed attestation report.","Wrapper for passing the attestation evidence and private …","Attestation evidence generated by Stage 0.","The magic number used to identify the Stage 0 DICE data in …","Wrapper for passing DICE info from Stage0 to the next …","The hardware platform providing the Trusted Execution …","Platform is not specified.","The actual size used when encoding a X25519 private key.","Keys (and associated certificates) that can be used by the …","","","","","","","","","","","","","","","","","","","","","","The RAW bytes representing the CDI.","","","","","","","","","","","","","","","","Serialized CWT certificate for the ECA private key owned …","The RAW bytes representing an ECDSA private key.","Serialized COSE Key representation of the ECDSA public key …","The RAW bytes representing an ECDSA private key that can …","Serialized CWT certificate for the encryption private key. …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The compound device identifier for Layer 1.","The private key for the Layer 1 ECA certificate.","The evidence about the next layer.","Magic number that is expected to always be set to the …","Byte representation of the signed attestation report …","The evidence about the Restricted Kernel.","The evidence about Stage 0 and the initial state of the VM.","Evidence about Stage 0 and the initial state of the VM.","","","The RAW bytes representing an ECDSA private key that can …","Serialized CWT certificate for the signing private key. …","The hardware platform that generated the remote …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the bytes used to encode a CBOR object from a …"],"i":[0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,31,0,0,0,0,0,0,0,0,31,0,31,0,0,0,0,0,0,0,0,0,31,0,33,39,31,32,29,34,35,40,30,36,33,39,31,32,29,34,35,40,30,36,33,39,35,29,30,31,32,29,30,33,31,32,29,30,33,34,35,36,29,34,32,36,30,31,39,31,31,31,32,29,34,35,40,30,36,33,39,31,32,32,32,31,32,29,34,35,40,30,36,33,39,40,40,40,40,32,33,40,33,32,32,36,30,32,31,32,29,30,33,31,31,32,29,34,35,40,30,36,33,39,31,32,29,34,35,40,30,36,33,39,31,32,29,34,35,40,30,36,33,39,34,35,36,0],"f":"`````````````````````````````````{{}b}{{bb}b}{{bb}d}10{bf}021{ce{}{}}0{bb}{{ce}d{}{}}1{{bb}h}{j{{Ab{{n{l}}A`}}}}{j{{Ab{AdA`}}}}{{{Af{l}}}{{Ah{l}}}}{Ad{{Ah{l}}}}:;{{bc}d{{Al{}{{Aj{b}}}}}}{{bAn}B`}0000{cc{}}{f{{Bb{b}}}}{fb}00{cb{{Al{}{{Aj{b}}}}}}{A`{{Bb{b}}}}{{}{{Bf{BdAd}}}}{{BdBh{Af{l}}{n{{Bf{BjBl}}}}}{{Ab{BnC`}}}}{{BdBhAd{n{{Bf{BjBl}}}}}{{Ab{BnC`}}}}{{{Af{l}}}{{Ab{CbC`}}}}{Cb{{Ab{jA`}}}}{{{Af{l}}}j}{{bb}d}{{bb}b}{{bb}h}{ce{}{}}{bc{}}{bh}0{b{{Cd{b}}}}{b{{Cf{b}}}}{bb}8{{bbh}d}89869{c{{Ab{e}}}{}{}}0{cCh{}}:{Adj}`````````````````````````99999999999999999999`{Cj{{Ab{CbBh}}}}{Cl{{Ab{CbBh}}}}{CnCn}{D`D`}{CjCj}{ClCl}{DbDb}{{ce}d{}{}}0000{Ddd}{Dfd}{Dhd}`````{{CnCn}h}`{{CnAn}B`}{{CnAn}{{Ab{dDj}}}}{cc{}}000000000{Dl{{Bb{Cn}}}}{D`{{Ab{{n{l}}Bh}}}}{D`{{Ab{{Af{l}}A`}}}}{D`{{Ab{CnA`}}}}{ce{}{}}000000000````````{{D`{Af{l}}}{{Ab{dA`}}}}0```11111{cBh{}}{c{{Ab{e}}}{}{}}0000000000000000000{cCh{}}000000000?>={{{Af{l}}}{{Ab{{n{l}}Bh}}}}","c":[],"p":[[5,"KeyUsage",3],[1,"unit"],[1,"u16"],[1,"bool"],[5,"CoseKey",242],[1,"u8"],[5,"Vec",243],[1,"str"],[6,"Result",244],[8,"VerifyingKey",245],[1,"slice"],[1,"array"],[17,"Item"],[10,"IntoIterator",246],[5,"Formatter",247],[8,"Result",247],[6,"Option",248],[8,"SigningKey",245],[1,"tuple"],[5,"String",249],[8,"ClaimName",250],[6,"Value",251],[5,"CoseSign1",252],[6,"CoseError",253],[5,"ClaimsSet",250],[5,"Iter",254],[5,"IterNames",254],[5,"TypeId",255],[5,"LayerEvidence",95],[5,"ApplicationKeys",95],[6,"TeePlatform",95],[5,"RootLayerEvidence",95],[5,"Evidence",95],[5,"CertificateAuthority",95],[5,"CompoundDeviceIdentifier",95],[5,"ApplicationPrivateKeys",95],[5,"Error",247],[1,"u64"],[5,"RestrictedKernelDiceData",95],[5,"Stage0DiceData",95]],"b":[[38,"impl-KeyUsage"],[39,"impl-Flags-for-KeyUsage"],[55,"impl-UpperHex-for-KeyUsage"],[56,"impl-Debug-for-KeyUsage"],[57,"impl-Octal-for-KeyUsage"],[58,"impl-Binary-for-KeyUsage"],[59,"impl-LowerHex-for-KeyUsage"],[62,"impl-KeyUsage"],[63,"impl-Flags-for-KeyUsage"],[163,"impl-Debug-for-TeePlatform"],[164,"impl-Display-for-TeePlatform"]]}],\
["oak_echo_linux_init",{"doc":"","t":"SCHHH","n":["DEVICE_PATH","init","main","set_console_to_raw_mode","init"],"q":[[0,"oak_echo_linux_init"],[4,"oak_echo_linux_init::init"],[5,"std::os::fd::owned"],[6,"anyhow"]],"d":["","","","","Performs the minimum initialization required from the …"],"i":[0,0,0,0,0],"f":"``{{}b}{cdf}{{}{{h{d}}}}","c":[],"p":[[1,"never"],[1,"unit"],[10,"AsFd",5],[8,"Result",6]],"b":[]}],\
["oak_echo_service",{"doc":"","t":"FNNNNONNNCNNNNCCCCFONNNNNNNNNNNOONNNNNKFFFFFFOONNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNONNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["EchoService","borrow","borrow_mut","default","echo","evidence_provider","from","get_evidence","into","proto","try_from","try_into","type_id","vzip","oak","attestation","echo","v1","Evidence","application_keys","borrow","borrow_mut","clear","clone","clone_into","default","encoded_len","eq","fmt","from","into","layers","root_layer","to_owned","try_from","try_into","type_id","vzip","Echo","EchoAsyncClient","EchoClient","EchoRequest","EchoResponse","EchoServer","GetEvidenceResponse","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","echo","echo","echo","encoded_len","encoded_len","encoded_len","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from","from","from","get_evidence","get_evidence","get_evidence","into","into","into","into","into","into","invoke","new","new","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_echo_service"],[14,"oak_echo_service::proto"],[15,"oak_echo_service::proto::oak"],[17,"oak_echo_service::proto::oak::attestation"],[18,"oak_echo_service::proto::oak::attestation::v1"],[38,"oak_echo_service::proto::oak::echo"],[133,"core::default"],[134,"oak_restricted_kernel_sdk::attestation"],[135,"micro_rpc::status"],[136,"core::result"],[137,"core::any"],[138,"core::fmt"],[139,"core::fmt"],[140,"micro_rpc"],[141,"micro_rpc"]],"d":["","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Attestation Evidence used by the client to the identity of …","Application keys signed by the penultimate layer’s ECA …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Layer1..LayerN-1 attestation evidence.","Layer0 attestation evidence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,4,5,19,21,4,5,9,16,19,21,4,5,9,16,4,5,9,4,5,9,16,4,5,9,16,4,5,9,18,19,21,4,5,9,4,5,9,9,4,5,9,19,21,4,5,9,16,18,19,21,19,21,4,5,9,16,16,19,21,16,4,5,9,16,19,21,4,5,9,16,19,21,4,5,9,16,19,21,4,5,9,16,19,21,4,5,9,16],"f":"`{ce{}{}}0{{}{{b{c}}}{df}}{{{b{c}}h}{{n{jl}}}f}`{cc{}}{{{b{c}}A`}{{n{Abl}}}f}4`{c{{n{e}}}{}{}}0{cAd{}}6``````66{AfA`}{AfAf}{{ce}A`{}{}}{{}Af}{AfAh}{{AfAf}Aj}{{AfAl}{{n{A`An}}}}:=``=887=`````````============{hA`}{jA`}{AbA`}{hh}{jj}{AbAb}{{{B`{c}}}{{B`{c}}}Bb};;;;{{}h}{{}j}{{}Ab}{{Bdh}{{n{jl}}}}{{{Bf{c}}h}{{n{{n{jl}}}}}Bh}{{{Bj{c}}h}{{n{{n{jl}}}}}Bl}{hAh}{jAh}{AbAh}{{hh}Aj}{{jj}Aj}{{AbAb}Aj}`{{hAl}Bn}{{jAl}Bn}{{AbAl}Bn}{cc{}}00000{{BdA`}{{n{Abl}}}}{{{Bf{c}}A`}{{n{{n{Abl}}}}}Bh}{{{Bj{c}}A`}{{n{{n{Abl}}}}}Bl}{ce{}{}}00000{{{B`{c}}{Cb{C`}}}{{n{{Cd{C`}}Cf}}}Bd}{c{{Bf{c}}}Bh}{c{{Bj{c}}}Bl}{c{{B`{c}}}Bd}4444{c{{n{e}}}{}{}}00000000000{cAd{}}00000666666","c":[],"p":[[5,"EchoService",0],[10,"Default",133],[10,"EvidenceProvider",134],[5,"EchoRequest",38],[5,"EchoResponse",38],[5,"Status",135],[6,"Result",136],[1,"unit"],[5,"GetEvidenceResponse",38],[5,"TypeId",137],[5,"Evidence",18],[1,"usize"],[1,"bool"],[5,"Formatter",138],[5,"Error",138],[5,"EchoServer",38],[10,"Clone",139],[10,"Echo",38],[5,"EchoClient",38],[10,"Transport",140],[5,"EchoAsyncClient",38],[10,"AsyncTransport",140],[8,"Result",138],[1,"u8"],[1,"slice"],[5,"Vec",141],[1,"never"]],"b":[]}],\
["oak_enclave_runtime_support",{"doc":"","t":"CHFFNNNNNNNNNNNNNNNNNNNNN","n":["heap","init","GrowableHeap","LockedGrowableHeap","alloc","allocate","borrow","borrow","borrow_mut","borrow_mut","dealloc","deallocate","deref","empty","empty","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_enclave_runtime_support"],[2,"oak_enclave_runtime_support::heap"],[25,"core::alloc::layout"],[26,"core::ptr::non_null"],[27,"core::result"],[28,"spinning_top::spinlock"],[29,"core::any"]],"d":["no_std compatible allocators.","","Heap implementation that asks Restricted Kernel for more …","Thread-safe version of GrowableHeap, above, usable as a …","","","","","","","","Safety","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,2,5,5,2,5,2,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2],"f":"`{{}b}``{{df}h}{{jf}{{n{{l{h}}b}}}}{ce{}{}}000{{dhf}b}{{j{l{h}}A`}b}{d{{Ab{j}}}}{{}j}{{}d}{cc{}}066{c{{n{e}}}{}{}}000{cAd{}}0","c":[1],"p":[[1,"unit"],[5,"LockedGrowableHeap",2],[5,"Layout",25],[1,"u8"],[5,"GrowableHeap",2],[5,"NonNull",26],[6,"Result",27],[1,"usize"],[8,"Spinlock",28],[5,"TypeId",29]],"b":[]}],\
["oak_functions_abi",{"doc":"Type, constant and Wasm host function definitions for the …","t":"PPPPSFFGPPNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNHONONNNNNNNNNNNNN","n":["BadRequest","InternalServerError","PolicySizeViolation","PolicyTimeViolation","RESPONSE_BODY_OFFSET","Request","Response","StatusCode","Success","Unspecified","body","body","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create","decode","encode_to_vec","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_repr","into","into","into","invoke","length","pad","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"oak_functions_abi"],[59,"core::num::error"],[60,"core::result"],[61,"alloc::vec"],[62,"anyhow"],[63,"core::fmt"],[64,"core::fmt"],[65,"alloc::string"],[66,"core::any"]],"d":["","","","","","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","","","Returns the body of the response, excluding any trailing …","","body (may include padding 0s)","","","","","","","","","","","","","Creates a new instance of Response.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","See <code>invoke</code>.","The effective length of the body, excluding any padding …","Creates and returns a new <code>Response</code> instance with the same …","","","","","","","","","","","","","",""],"i":[7,7,7,7,0,0,0,0,7,7,1,6,1,6,1,7,6,1,7,6,1,7,6,1,7,1,1,1,6,1,7,6,1,7,7,6,1,7,7,6,1,7,0,1,1,1,6,1,7,7,6,1,7,6,1,7,6,1,7],"f":"``````````{b{{j{{f{d}}h}}}}``{ce{}{}}00000{ll}{bb}{nn}{{ce}A`{}{}}00{{n{Ab{d}}}b}{{{f{d}}}{{Ad{b}}}}{b{{Ab{d}}}}{{ll}Af}{{bb}Af}{{nn}Af}{{lAh}Aj}{{bAh}Aj}{{nAh}Aj}{{nAh}{{j{A`Al}}}}{cc{}}00{An{{B`{n}}}}{ce{}{}}00``{{bBb}{{Ad{b}}}}`111{cBd{}}{c{{j{e}}}{}{}}00000{cBf{}}00","c":[],"p":[[5,"Response",0],[1,"u8"],[1,"slice"],[5,"TryFromIntError",59],[6,"Result",60],[5,"Request",0],[6,"StatusCode",0],[1,"unit"],[5,"Vec",61],[8,"Result",62],[1,"bool"],[5,"Formatter",63],[8,"Result",63],[5,"Error",63],[1,"u32"],[6,"Option",64],[1,"usize"],[5,"String",65],[5,"TypeId",66]],"b":[[33,"impl-Debug-for-StatusCode"],[34,"impl-Display-for-StatusCode"]]}],\
["oak_functions_client",{"doc":"","t":"FNNNNNNNNNNN","n":["OakFunctionsClient","borrow","borrow_mut","from","into","into_request","invoke","new","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_client"],[12,"tonic::request"],[13,"alloc::vec"],[14,"micro_rpc::status"],[15,"core::result"],[16,"oak_client::verifier"],[17,"anyhow"],[18,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2],"f":"`{ce{}{}}0{cc{}}1{c{{b{e}}}{}{}}{{d{h{f}}}{{n{{j{f}}l}}}}{{A`Ab}{{Ad{d}}}}{c{{n{e}}}{}{}}0{cAf{}}6","c":[],"p":[[5,"Request",12],[5,"OakFunctionsClient",0],[1,"u8"],[1,"slice"],[5,"Vec",13],[5,"Status",14],[6,"Result",15],[1,"str"],[10,"AttestationVerifier",16],[8,"Result",17],[5,"TypeId",18]],"b":[]}],\
["oak_functions_containers_app",{"doc":"","t":"FNNNNNNNNNNNNNNNNNNNCNNHNNNNNFNNNNNNNNNNNNNNNNNNNN","n":["OakFunctionsContainersService","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","init","initialize","into","into_any","into_any_arc","into_any_rc","into_request","native_handler","new","reserve","serve","stream_lookup_data","try_from","try_into","type_id","vzip","NativeHandler","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","handle_invoke","init","into","into_any","into_any_arc","into_any_rc","into_request","new_handler","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_containers_app"],[29,"oak_functions_containers_app::native_handler"],[50,"oak_proto_rust::oak::functions"],[51,"tonic::request"],[52,"core::future::future"],[53,"alloc::boxed"],[54,"core::pin"],[55,"oak_functions_service"],[56,"core::any"],[57,"oak_proto_rust::oak::functions"],[58,"alloc::rc"],[59,"oak_crypto::encryption_key"],[60,"oak_functions_service"],[61,"oak_proto_rust::oak::functions"],[62,"opentelemetry::metrics::meter"],[63,"anyhow"],[64,"oak_proto_rust::oak::functions"],[65,"core::result"],[66,"core::any"],[67,"oak_functions_abi"],[68,"oak_functions_service::lookup"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Starts up and serves an OakFunctionsContainersService …","","","","","","Variant of a Handler that dynamically loads a <code>.so</code> file and …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Creates a new native handler.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":"`{{{b{c}}{f{d}}}{{l{{j{h}}}}}n}{cA`{}}0{ce{}{}}0{Abc{}}0{AbAd}{{{b{c}}{f{Af}}}{{l{{j{h}}}}}n}{{{b{c}}{f{Ah}}}{{l{{j{h}}}}}n}{cc{}}{{{b{c}}{f{Aj}}}{{l{{j{h}}}}}n}{{}Ab}{{{b{c}}{f{Al}}}{{l{{j{h}}}}}n}8{{{j{c}}}{{j{A`}}}{}}{{{An{c}}}{{An{A`}}}{}}{{{B`{c}}}{{B`{A`}}}{}}{c{{f{e}}}{}{}}`{{{An{Bb}}{Bf{{An{Bd}}}}}{{b{c}}}n}{{{b{c}}{f{Bh}}}{{l{{j{h}}}}}n}{{{j{Bj}}{j{Bb}}Bl}{{Bn{Ad}}}}{{{b{c}}{f{{Cb{C`}}}}}{{l{{j{h}}}}}n}{c{{Cd{e}}}{}{}}0{cCf{}}{ce{}{}}`{cA`{}}011{Abc{}}0{AbAd}{cc{}}{{ChCj}{{Cd{ClCn}}}}{{}Ab}6{{{j{c}}}{{j{A`}}}{}}{{{An{c}}}{{An{A`}}}{}}{{{B`{c}}}{{B`{A`}}}{}}{c{{f{e}}}{}{}}{{Ad{Db{D`}}{An{Dd}}{Bf{{An{Bd}}}}}{{Bn{Ch}}}}==<;","c":[],"p":[[5,"OakFunctionsContainersService",0],[5,"Empty",50],[5,"Request",51],[10,"Future",52],[5,"Box",53],[5,"Pin",54],[10,"Handler",55],[10,"Any",56],[1,"usize"],[1,"unit"],[5,"ExtendNextLookupDataRequest",50],[5,"FinishNextLookupDataRequest",50],[5,"InvokeRequest",50],[5,"InitializeRequest",50],[5,"Arc",57],[5,"Rc",58],[10,"AsyncEncryptionKeyHandle",59],[10,"Observer",55],[6,"Option",60],[5,"ReserveRequest",50],[10,"Stream",61],[5,"Meter",62],[8,"Result",63],[5,"LookupDataChunk",50],[5,"Streaming",64],[6,"Result",65],[5,"TypeId",56],[5,"NativeHandler",29],[5,"Request",66],[5,"Response",66],[5,"Status",67],[1,"u8"],[1,"slice"],[5,"LookupDataManager",68]],"b":[]}],\
["oak_functions_containers_launcher",{"doc":"","t":"FNNNNNNNNOOCNNNNNFNNNNNHNNNNN","n":["UntrustedApp","borrow","borrow_mut","create","from","initialize_enclave","into","into_request","kill","launcher","oak_functions_client","server","setup_lookup_data","try_from","try_into","type_id","vzip","SessionProxy","borrow","borrow_mut","from","into","into_request","new","stream","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_containers_launcher"],[17,"oak_functions_containers_launcher::server"],[29,"oak_containers_launcher"],[30,"anyhow"],[31,"oak_proto_rust::oak::functions"],[32,"oak_proto_rust::oak::functions"],[33,"alloc::boxed"],[34,"core::result"],[35,"tonic::request"],[36,"oak_functions_launcher"],[37,"core::any"],[38,"core::net::socket_addr"],[39,"tonic::transport::channel"],[40,"oak_grpc::oak::functions::oak_functions_client"],[41,"oak_proto_rust::oak::attestation::v1"],[42,"oak_proto_rust::oak::attestation::v1"],[43,"core::future::future"],[44,"oak_proto_rust::oak::session::v1"],[45,"tonic::codec::decode"],[46,"core::pin"]],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,21,21,21,21,21,0,21,21,21,21,21],"f":"`{ce{}{}}0{b{{f{d}}}}{cc{}}{{dh}{{A`{j{n{l}}}}}}3{c{{Ab{e}}}{}{}}{dAd}```{{dAf}{{f{Ad}}}}{c{{A`{e}}}{}{}}0{cAh{}}8`88684{{Aj{An{Al}}B`Bb}{{`{{Bh{}{{Bd{{A`{AdBf}}}}}}}}}}{{Bj{Ab{{Bn{Bl}}}}}{{C`{{n{Bh}}}}}}332:","c":[],"p":[[5,"Args",29],[5,"UntrustedApp",0],[8,"Result",30],[5,"InitializeRequest",31],[5,"InitializeResponse",31],[10,"Error",32],[5,"Box",33],[6,"Result",34],[5,"Request",35],[1,"unit"],[5,"LookupDataConfig",36],[5,"TypeId",37],[6,"SocketAddr",38],[5,"Channel",39],[5,"OakFunctionsClient",40],[5,"Evidence",41],[5,"Endorsements",41],[17,"Output"],[5,"Error",42],[10,"Future",43],[5,"SessionProxy",17],[5,"RequestWrapper",44],[5,"Streaming",45],[5,"Pin",46]],"b":[]}],\
["oak_functions_enclave_service",{"doc":"","t":"FNNNNNNNNNNNNNNNNNNNNNNNNN","n":["OakFunctionsService","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","init","initialize","into","into_any","into_any_arc","into_any_rc","new","reserve","stream_lookup_data","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_enclave_service"],[26,"oak_proto_rust::oak::functions"],[27,"oak_proto_rust::oak::functions"],[28,"core::result"],[29,"oak_crypto::encryption_key"],[30,"oak_restricted_kernel_sdk::attestation"],[31,"oak_functions_service"],[32,"core::any"],[33,"oak_proto_rust::oak::functions"],[34,"alloc::sync"],[35,"alloc::rc"],[36,"oak_functions_service"],[37,"oak_proto_rust::oak::functions"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{{{b{ceg}}d}{{j{fh}}}lnA`}{cAb{}}0{ce{}{}}0{Adc{}}0{AdAf}{{{b{ceg}}Ah}{{j{Ajh}}}lnA`}{{{b{ceg}}Al}{{j{Anh}}}lnA`}{cc{}}{{{b{ceg}}B`}{{j{Bbh}}}lnA`}{{}Ad}{{{b{ceg}}Bd}{{j{Bfh}}}lnA`}8{{{Bh{c}}}{{Bh{Ab}}}{}}{{{Bj{c}}}{{Bj{Ab}}}{}}{{{Bl{c}}}{{Bl{Ab}}}{}}{{c{Bj{e}}{C`{{Bj{Bn}}}}}{{b{ecg}}}nlA`}{{{b{ceg}}Cb}{{j{Cdh}}}lnA`}{{{b{ceg}}Cf}{{j{Anh}}}lnA`}{c{{j{e}}}{}{}}0{cCh{}}{ce{}{}}","c":[],"p":[[5,"OakFunctionsService",0],[5,"Empty",26],[5,"AbortNextLookupDataResponse",26],[5,"Status",27],[6,"Result",28],[10,"EncryptionKeyHandle",29],[10,"EvidenceProvider",30],[10,"Handler",31],[10,"Any",32],[1,"usize"],[1,"unit"],[5,"ExtendNextLookupDataRequest",26],[5,"ExtendNextLookupDataResponse",26],[5,"FinishNextLookupDataRequest",26],[5,"FinishNextLookupDataResponse",26],[5,"InvokeRequest",26],[5,"InvokeResponse",26],[5,"InitializeRequest",26],[5,"InitializeResponse",26],[5,"Box",33],[5,"Arc",34],[5,"Rc",35],[10,"Observer",31],[6,"Option",36],[5,"ReserveRequest",26],[5,"ReserveResponse",26],[5,"LookupDataChunk",26],[5,"TypeId",32]],"b":[]}],\
["oak_functions_launcher",{"doc":"","t":"FFNNNNNNNNOHNNNNNNNNNNOOOOCNNNNNNNNOHNNOFNNNNNHNNNNN","n":["Args","LookupDataConfig","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","constant_response_size","create","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","into_request","into_request","lookup_data","lookup_data_path","max_chunk_size","port","server","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","update_interval","update_lookup_data","vzip","vzip","wasm","SessionProxy","borrow","borrow_mut","from","into","into_request","new","stream","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_launcher"],[40,"oak_functions_launcher::server"],[52,"clap_builder::builder::command"],[53,"oak_launcher_utils::launcher"],[54,"std::path"],[55,"oak_launcher_utils::launcher"],[56,"oak_launcher_utils::channel"],[57,"oak_proto_rust::oak::functions"],[58,"core::error"],[59,"core::result"],[60,"core::fmt"],[61,"core::fmt"],[62,"clap_builder"],[63,"clap_builder::util::id"],[64,"core::option"],[65,"tonic::request"],[66,"core::any"],[67,"oak_proto_rust::oak::functions"],[68,"core::net::socket_addr"],[69,"oak_proto_rust::oak::attestation::v1"],[70,"oak_proto_rust::oak::attestation::v1"],[71,"core::future::future"],[72,"oak_proto_rust::oak::session::v1"],[73,"tonic::codec::decode"],[74,"core::pin"]],"d":["","","","","","","","","","","Consistent response size that the enclave should apply","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Path to a file containing key / value entries in protobuf …","","","","","","","","","","","","","","","","","Path to a Wasm file to be loaded into the enclave and …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,13,13,3,13,3,13,13,13,13,0,13,3,13,13,13,13,3,13,3,13,13,3,3,13,0,3,13,3,13,3,13,13,13,3,0,3,13,13,0,31,31,31,31,31,0,31,31,31,31,31],"f":"``{bb}0{ce{}{}}000{{}b}0`{{dfhj}{{Ah{{Ad{{n{l}}A`Ab}}{n{Af}}}}}}{{AjAl}An}{cc{}}0{B`{{Ah{AjBb}}}}0{{}{{Bf{Bd}}}}66{c{{Bh{e}}}{}{}}0`````{c{{Ah{e}}}{}{}}000{cBj{}}0{{AjB`}{{Ah{BlBb}}}}0`{{{Bn{A`}}f}{{C`{Bl}}}};;``;;7;4{{CbA`CdCf}{{`{{Cl{}{{Ch{{Ah{BlCj}}}}}}}}}}{{Cn{Bh{{Db{D`}}}}}{{Dd{{n{Cl}}}}}}554=","c":[],"p":[[5,"Command",52],[5,"Params",53],[5,"LookupDataConfig",0],[5,"PathBuf",54],[1,"u32"],[10,"GuestInstance",53],[5,"Box",55],[5,"ConnectorHandle",56],[5,"InitializeResponse",57],[1,"tuple"],[10,"Error",58],[6,"Result",59],[5,"Args",0],[5,"Formatter",60],[8,"Result",60],[5,"ArgMatches",61],[8,"Error",62],[5,"Id",63],[6,"Option",64],[5,"Request",65],[5,"TypeId",66],[1,"unit"],[5,"OakFunctionsAsyncClient",57],[8,"Result",67],[6,"SocketAddr",68],[5,"Evidence",69],[5,"Endorsements",69],[17,"Output"],[5,"Error",70],[10,"Future",71],[5,"SessionProxy",40],[5,"RequestWrapper",72],[5,"Streaming",73],[5,"Pin",74]],"b":[]}],\
["oak_functions_sdk",{"doc":"Oak Functions SDK","t":"HQHHHHHH","n":["alloc","log","read_request","storage_get_item","storage_get_items","testing","write_log_message","write_response"],"q":[[0,"oak_functions_sdk"],[8,"alloc::vec"],[9,"micro_rpc::status"],[10,"core::result"],[11,"core::option"],[12,"core::iter::traits::collect"],[13,"core::convert"]],"d":["","Logs a debug message.","See <code>StdWasmApiClient::read_request</code>.","See <code>StdWasmApiClient::lookup_data</code>.","See <code>StdWasmApiClient::lookup_data_multi</code>.","See <code>StdWasmApiClient::test</code>.","See <code>StdWasmApiClient::log</code>.","See <code>StdWasmApiClient::write_response</code>."],"i":[0,0,0,0,0,0,0,0],"f":"{bd}`{{}{{j{{f{d}}h}}}}{{{l{d}}}{{j{{n{{f{d}}}}h}}}}{c{{j{{f{{n{{f{d}}}}}}h}}}A`}{{{l{d}}Ab}{{j{{f{d}}h}}}}{c{{j{Adh}}}{{Ah{Af}}}}{{{l{d}}}{{j{Adh}}}}","c":[],"p":[[1,"u32"],[1,"u8"],[5,"Vec",8],[5,"Status",9],[6,"Result",10],[1,"slice"],[6,"Option",11],[10,"IntoIterator",12],[1,"bool"],[1,"unit"],[1,"str"],[10,"AsRef",13]],"b":[]}],\
["oak_functions_sdk_abi_test_get_storage_item",{"doc":"Oak Functions ABI test.","t":"H","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_get_storage_item"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["oak_functions_sdk_abi_test_invoke_testing",{"doc":"Oak Functions ABI test for Testing Extension.","t":"H","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_invoke_testing"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["oak_functions_service",{"doc":"","t":"KRRKMCCCCMCMMFNNNNNNNNNNNNNNNNNNNNNNNPPPGKFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNHNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNSIISSFKKFFCNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNSIISSFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Handler","HandlerConfig","HandlerType","Observer","handle_invoke","instance","logger","lookup","lookup_htbl","new_handler","wasm","wasm_initialization","wasm_invocation","OakFunctionsInstance","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","extend_lookup_data_chunk","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","init","into","into_any","into_any_arc","into_any_rc","new","reserve","try_from","try_into","type_id","Debug","Error","Info","Level","OakLogger","StandaloneLogger","Trace","Warn","as_any","as_any","as_any_mut","as_any_mut","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","compare","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_str","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","iter","log_public","log_public","log_sensitive","log_sensitive","max","partial_cmp","partial_cmp","to_level_filter","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","LookupData","LookupDataManager","abort_next_lookup_data","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_lookup_data","deref","deref","deref_mut","deref_mut","drop","drop","extend_next_lookup_data","finish_next_lookup_data","for_test","format_bytes","from","from","get","init","init","insert","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_empty","len","limit","log_debug","log_error","new_empty","reserve","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","LookupHtbl","LookupHtblIter","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","contains_key","default","deref","deref","deref_mut","deref_mut","drop","drop","extend","from","from","get","hash","init","init","insert","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_iter","into_iter","is_empty","iter","len","multiunzip","next","reserve","try_from","try_from","try_into","try_into","type_id","type_id","ALLOC_FUNCTION_NAME","AbiPointer","AbiPointerOffset","MAIN_FUNCTION_NAME","MEMORY_NAME","UserState","WasmApi","WasmApiFactory","WasmConfig","WasmHandler","api","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create_wasm_api","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","handle_invoke","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new_handler","to_owned","transport","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wasmtime","StdWasmApiFactory","StdWasmApiImpl","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_wasm_api","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","log","lookup_data","lookup_data_manager","lookup_data_multi","read_request","test","to_owned","transport","try_from","try_from","try_into","try_into","type_id","type_id","write_response","ALLOC_FUNCTION_NAME","AbiPointer","AbiPointerOffset","MAIN_FUNCTION_NAME","MEMORY_NAME","UserState","WasmtimeHandler","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","create","deref","deref","deref_mut","deref_mut","drop","drop","from","from","handle_invoke","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new_handler","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_functions_service"],[13,"oak_functions_service::instance"],[37,"oak_functions_service::logger"],[103,"oak_functions_service::lookup"],[155,"oak_functions_service::lookup_htbl"],[203,"oak_functions_service::wasm"],[271,"oak_functions_service::wasm::api"],[316,"oak_functions_service::wasm::wasmtime"],[357,"oak_functions_abi"],[358,"oak_functions_abi"],[359,"core::result"],[360,"core::default"],[361,"core::marker"],[362,"core::marker"],[363,"alloc::sync"],[364,"core::option"],[365,"anyhow"],[366,"core::time"],[367,"oak_proto_rust::oak::functions"],[368,"oak_proto_rust::oak::functions"],[369,"oak_proto_rust::oak::functions"],[370,"alloc::boxed"],[371,"alloc::rc"],[372,"oak_proto_rust::oak::functions"],[373,"log"],[374,"core::fmt"],[375,"core::fmt"],[376,"core::iter::traits::iterator"],[377,"alloc::string"],[378,"core::iter::traits::collect"],[379,"core::cell"],[380,"micro_rpc"],[381,"oak_proto_rust::oak::functions::wasm::v1"],[382,"oak_proto_rust::oak::functions::wasm::v1"]],"d":["","","","","Handles a call to invoke by getting the raw request bytes …","","","","This is a key/value hash table optimized for large numbers …","","Wasm business logic provider based on Wasmi.","","","","See […","","","","","","","","","See […","See […","Returns the argument unchanged.","See […","","Calls <code>U::from(self)</code>.","","","","See [<code>crate::proto::oak::functions::OakFunctions::initialize</code>…","","","","","The “debug” level.","The “error” level.","The “info” level.","An enum representing the available verbosity levels of the …","","Temporary OakLogger implementation using the <code>log</code> crate.","The “trace” level.","The “warn” level.","","","","","Returns the string representation of the <code>Level</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Iterate through all supported logging levels.","Logs a message that contains only public, non-sensitive …","","Logs the message, which might contain sensitive …","","Returns the most verbose logging level.","","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","Provides access to shared lookup data.","Utility for managing lookup data.","","","","","","","","","","","","Creates a new <code>LookupData</code> instance with a reference to the …","","","","","","","","","Creates an instance of LookupData populated with the given …","Converts a binary sequence to a string if it is a valid …","Returns the argument unchanged.","Returns the argument unchanged.","Gets an individual entry from the backing data.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Whether the backing data is empty.","Gets the number of entries in the backing data.","Returns a slice covering up to the first <code>limit</code> elements of …","Logs a debug message.","Logs an error message.","Creates a new instance with empty backing data.","","","","","","","","","","","","","","","","","","","This is like HashMapp::contains_key.","","","","","","","","This is like HashMap::extend.","Returns the argument unchanged.","Returns the argument unchanged.","This is like HashMapp::get.","","","","Insert a k/v pair into the table.  Returns None if the key …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Return true if there are no entries in the hash table.","Return an iterator that can be used to iterate through k/v …","Return the number of entries in the hash table.","","","Set the initial size of self.table.  For best speed and …","","","","","","","Fixed name of the function to allocate memory. Every Oak …","Type aliases for positions in Wasm linear memory. Any …","Type aliases for offsets in Wasm linear memory.","Fixed name of the function to start a Wasm. Every Oak Wasm …","The name of the memory every Oak Wasm module has.","<code>UserState</code> holds the user request bytes and response bytes …","A trait for Wasm APIs that can be called from Wasm modules.","A trait for creating Wasm APIs that can be called from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Wasm business logic provider based on wasmtime.","The main purpose of this factory is to allow creating a …","Implementation of the standard Oak Functions API.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Fixed name of the function to allocate memory. Every Oak …","Type aliases for positions in Wasm linear memory. Any …","Type aliases for offsets in Wasm linear memory.","Fixed name of the function to start a Wasm. Every Oak Wasm …","The name of the memory every Oak Wasm module has.","<code>UserState</code> holds the user request bytes and response bytes …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,3,3,0,3,0,0,0,0,3,0,16,16,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,38,38,38,0,0,0,38,38,49,38,49,38,38,49,38,49,38,38,38,38,38,49,38,49,38,49,38,38,38,38,38,38,38,38,38,49,38,38,38,49,38,49,38,49,38,49,38,49,38,38,48,49,48,49,38,38,38,38,38,38,49,38,49,38,49,38,0,0,14,14,51,14,51,14,51,14,51,51,51,14,14,51,14,51,14,51,14,14,14,0,14,51,51,14,51,14,14,51,14,51,14,51,14,51,51,51,0,51,51,14,14,51,14,51,14,51,14,51,0,0,56,55,56,55,56,55,56,55,55,55,56,55,56,55,56,55,55,56,55,55,0,56,55,55,56,55,56,55,56,55,56,55,56,55,55,55,55,56,56,55,56,55,56,55,56,55,0,0,0,0,0,0,0,0,0,0,0,79,59,57,79,59,57,79,59,57,79,59,57,57,57,59,58,57,79,59,57,79,59,57,79,59,57,79,59,57,59,79,59,57,79,59,57,79,59,57,59,57,79,59,57,59,57,61,79,59,57,79,59,57,79,59,57,0,0,0,64,63,64,63,64,63,64,63,63,63,64,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,64,63,63,63,64,63,63,63,63,63,64,63,64,63,64,63,63,0,0,0,0,0,0,0,80,78,80,78,80,78,80,78,78,80,78,80,78,80,78,80,78,78,80,78,80,78,80,78,78,80,78,78,80,78,80,78,80,78],"f":"````{{{f{}{{b{c}}{d{e}}}}h}{{n{jl}}}f{A`AbAdAf}}````{{c{Aj{Ah}}{An{Al}}{Bb{{An{B`}}}}}{{Bd{e}}}{}{}}`{{B`Bf}Bh}0`{{{Bj{c}}Bl}{{n{Bnl}}}f}{cC`{}}0{ce{}{}}0{Cbc{}}0{CbBh}{{{Bj{c}}Cd}{{n{Bhl}}}f}{{{Bj{c}}Cf}{{n{Chl}}}f}{{{Bj{c}}Cj}{{n{Cll}}}f}{cc{}}{{{Bj{c}}{Cn{Ah}}}{{n{{Cn{Ah}}l}}}f}{{}Cb}8{{{D`{c}}}{{D`{C`}}}{}}{{{An{c}}}{{An{C`}}}{}}{{{Db{c}}}{{Db{C`}}}{}}{{Dd{Bb{{An{B`}}}}}{{n{{Bj{c}}l}}}f}{{{Bj{c}}Df}{{n{Dhl}}}f}{c{{n{e}}}{}{}}0{cDj{}}````````{cC`{}}000{DlDn}{ce{}{}}000{DlDl}{{ce}Bh{}{}}{{DlDl}E`}{{ce}E`{}{}}{Cbc{}}000{CbBh}0{{DlEb}Ed}{{DlDl}Ed}{{ce}Ed{}{}}000{{DlEf}{{n{BhEh}}}}0{cc{}}0{Dn{{n{Dl}}}}{{Dlc}BhEj}{{}Cb}0>>{{{D`{c}}}{{D`{C`}}}{}}0{{{An{c}}}{{An{C`}}}{}}0{{{Db{c}}}{{Db{C`}}}{}}0{{}{{`{{En{}{{El{Dl}}}}}}}}{{F`DlDn}Bh}{{FbDlDn}Bh}10{{}Dl}{{DlEb}{{Bb{E`}}}}{{DlDl}{{Bb{E`}}}}{DlEb}{ce{}{}}{cFd{}}{c{{n{e}}}{}{}}000{cDj{}}0``{AlBh}{cC`{}}0005555{FfFf}{{ce}Bh{}{}}{AlFf}{Cbc{}}000{CbBh}0{{Alc}Bh{{Fj{}{{El{{Fh{{Aj{Ah}}{Aj{Ah}}}}}}}}}}7{{{Cn{{Fh{{Cn{Ah}}{Cn{Ah}}}}}}{An{F`}}}Al}{{{Aj{Ah}}}Fd}{cc{}}0{{Ff{Aj{Ah}}}{{Bb{{Aj{Ah}}}}}}{{}Cb}0{{Al{Aj{Ah}}{Aj{Ah}}}Bh}{ce{}{}}0{{{D`{c}}}{{D`{C`}}}{}}0{{{An{c}}}{{An{C`}}}{}}0{{{Db{c}}}{{Db{C`}}}{}}0{FfEd}{FfCb}{{{Aj{c}}Cb}{{Aj{c}}}{}}{{FfDn}Bh}0{{{An{F`}}}Al}{{AlFl}{{Bd{Bh}}}}9{c{{n{e}}}{}{}}000{cDj{}}0``{cC`{}}000<<<<{{Fn{Aj{Ah}}}Ed}{{}Fn}{Cbc{}}000{CbBh}0{{Fnc}Bh{{Fj{}{{El{{Fh{{Aj{Ah}}{Aj{Ah}}}}}}}}}}{cc{}}0{{Fn{Aj{Ah}}}{{Bb{{Aj{Ah}}}}}}{{{Aj{Ah}}Fl}Fl}{{}Cb}0{{Fn{Aj{Ah}}{Aj{Ah}}}{{Bb{{Aj{Ah}}}}}}{ce{}{}}0{{{D`{c}}}{{D`{C`}}}{}}0{{{An{c}}}{{An{C`}}}{}}0{{{Db{c}}}{{Db{C`}}}{}}03{Fnc{}}{FnEd}{FnG`}{FnCb}{c{{Fh{eg}}}{}{}{}}{G`{{Bb{c}}}{}}{{FnCb}Bh}{c{{n{e}}}{}{}}000{cDj{}}0```````````{cC`{}}00000======{GbGb}{{ce}Bh{}{}}{{{Aj{Ah}}{An{Gd}}{An{F`}}{Bb{{An{B`}}}}}{{Bd{Gf}}}}{{Gd{Cn{Ah}}{Db{{Gh{{Cn{Ah}}}}}}}{{D`{Gj}}}}{{}Gb}{Cbc{}}00000{CbBh}00{cc{}}00{{Gfh}{{n{jl}}}}{{}Cb}00{ce{}{}}00{{{D`{c}}}{{D`{C`}}}{}}00{{{An{c}}}{{An{C`}}}{}}0{{{Db{c}}}{{Db{C`}}}{}}00{{Gb{Aj{Ah}}{An{Al}}{Bb{{An{B`}}}}}{{Bd{Gf}}}}4{Gj{{D`{Gl}}}}{c{{n{e}}}{}{}}00000{cDj{}}00```{cC`{}}0008888{GnGn}{{ce}Bh{}{}}{{H`{Cn{Ah}}{Db{{Gh{{Cn{Ah}}}}}}}{{D`{Gj}}}}{Cbc{}}000{CbBh}0{cc{}}0??>>==<;;{{GnHb}{{n{Hdl}}}}{{GnHf}{{n{Hhl}}}}`{{GnHj}{{n{Hll}}}}{{GnHn}{{n{I`l}}}}{{GnIb}{{n{Idl}}}}{ce{}{}}{Gn{{D`{Gl}}}}????>>{{GnIf}{{n{Ihl}}}}```````>>>>2222{{{Aj{Ah}}Ij{D`{Gd}}{D`{F`}}{Bb{{An{B`}}}}}{{Bd{Il}}}};;;;::99{{Ilh}{{n{jl}}}}{{}Cb}055{{{D`{c}}}{{D`{C`}}}{}}0{{{An{c}}}{{An{C`}}}{}}{{{Db{c}}}{{Db{C`}}}{}}0{{Ij{Aj{Ah}}{An{Al}}{Bb{{An{B`}}}}}{{Bd{Il}}}}{c{{n{e}}}{}{}}000{cDj{}}0","c":[],"p":[[17,"HandlerType"],[17,"HandlerConfig"],[10,"Handler",0],[5,"Request",357],[5,"Response",357],[5,"Status",358],[6,"Result",359],[10,"Default",360],[10,"Send",361],[10,"Sync",361],[10,"Clone",362],[1,"u8"],[1,"slice"],[5,"LookupDataManager",103],[5,"Arc",363],[10,"Observer",0],[6,"Option",364],[8,"Result",365],[5,"Duration",366],[1,"unit"],[5,"OakFunctionsInstance",13],[5,"Empty",367],[5,"AbortNextLookupDataResponse",367],[10,"Any",368],[1,"usize"],[5,"LookupDataChunk",367],[5,"ExtendNextLookupDataRequest",367],[5,"ExtendNextLookupDataResponse",367],[5,"FinishNextLookupDataRequest",367],[5,"FinishNextLookupDataResponse",367],[5,"Vec",369],[5,"Box",370],[5,"Rc",371],[5,"InitializeRequest",367],[5,"ReserveRequest",367],[5,"ReserveResponse",367],[5,"TypeId",368],[6,"Level",37],[1,"str"],[6,"Ordering",372],[6,"LevelFilter",373],[1,"bool"],[5,"Formatter",374],[5,"Error",374],[10,"Hasher",375],[17,"Item"],[10,"Iterator",376],[10,"OakLogger",37],[5,"StandaloneLogger",37],[5,"String",377],[5,"LookupData",103],[1,"tuple"],[10,"IntoIterator",378],[1,"u64"],[5,"LookupHtbl",155],[5,"LookupHtblIter",155],[5,"WasmConfig",203],[10,"WasmApiFactory",203],[5,"WasmHandler",203],[5,"Cell",379],[10,"WasmApi",203],[10,"Transport",380],[5,"StdWasmApiImpl",271],[5,"StdWasmApiFactory",271],[5,"LogRequest",381],[5,"LogResponse",381],[5,"LookupDataRequest",381],[5,"LookupDataResponse",381],[5,"LookupDataMultiRequest",381],[5,"LookupDataMultiResponse",381],[5,"ReadRequestRequest",381],[5,"ReadRequestResponse",381],[5,"TestRequest",381],[5,"TestResponse",381],[5,"WriteResponseRequest",381],[5,"WriteResponseResponse",381],[5,"WasmtimeConfig",382],[5,"WasmtimeHandler",316],[5,"UserState",203],[5,"UserState",316]],"b":[[64,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[65,"impl-PartialEq-for-Level"],[70,"impl-Display-for-Level"],[71,"impl-Debug-for-Level"],[92,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[93,"impl-PartialOrd-for-Level"]]}],\
["oak_functions_test_module",{"doc":"Oak Functions test module.","t":"H","n":["main"],"q":[[0,"oak_functions_test_module"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["oak_functions_test_utils",{"doc":"Test utilities to help with unit testing of Oak Functions …","t":"FFJJFHHNNNNNNHNHNNNNNNNNNNHHNHHHHHHHHNNNNNNNNNNNNNHH","n":["Background","BackgroundHandle","MOCK_LOOKUP_DATA_PATH","OAK_RESTRICTED_KERNEL_WRAPPER_BIN","Term","assert_response_body","background","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create_test_lookup_data","drop","free_port","from","from","from","into","into","into","into_future","into_request","into_request","into_request","kill_process","make_request","poll","run_cc_client","run_java_client","run_oak_functions_containers_example_in_background","run_oak_functions_example_in_background","rust_crate_enclave_out_path","rust_crate_wasm_out_path","serialize_entries","skip_test","terminate_and_join","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","workspace_path","write_to_temp_file"],"q":[[0,"oak_functions_test_utils"],[52,"oak_functions_abi"],[53,"core::future::future"],[54,"core::marker"],[55,"core::ops::function"],[56,"ubyte::byte_unit"],[57,"alloc::vec"],[58,"std::collections::hash::map"],[59,"tonic::request"],[60,"duct"],[61,"core::pin"],[62,"core::task::wake"],[63,"core::task::poll"],[64,"std::process"],[65,"std::io::error"],[66,"alloc::string"],[67,"core::result"],[68,"core::any"],[69,"std::path"],[70,"tempfile::file"]],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and the","A wrapper around a child process that kills it when its …","","","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Kills all the processes identified by the provided handle.","","","","","Runs the specified example as a background task. Returns a …","Runs the specified example as a background task. Returns a …","","Returns the path of the Wasm module generated by the crate …","Serializes the provided map as a contiguous buffer of …","Whether to skip the test. For instance, GitHub Actions …","Sends the termination signal to the background task and …","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,7,15,4,7,15,0,15,0,4,7,15,4,7,15,7,4,7,15,0,0,7,0,0,0,0,0,0,0,0,4,4,7,15,4,7,15,4,7,15,4,7,15,0,0],"f":"`````{{bd}f}{eh{jl}{{Ab{n}{{A`{c}}}}}}{ce{}{}}00000{{AdAf}{{Al{{Aj{Ah}}{Aj{Ah}}}}}}{Anf}{{}B`}{cc{}}00444{c{}{}}{c{{Bb{e}}}{}{}}00{Bdf}{{B`{Bf{Ah}}}{{Aj{Ah}}}}{{{Bh{n}}Bj}{{Bl{f}}}}{{dd}{{C`{Bn}}}}{d{{C`{Bn}}}}{{ddd}{{Cb{AnB`}}}}{{dd}{{Cb{AnB`}}}}{dCd}0{{{Al{{Aj{Ah}}{Aj{Ah}}}}}{{Aj{Ah}}}}{{}Cf}{{{h{c}}}c{}}{c{{Ch{e}}}{}{}}00000{cCj{}}00{ce{}{}}00{{{Bf{d}}}Cl}{{{Bf{Ah}}}Cn}","c":[],"p":[[5,"Response",52],[1,"str"],[1,"unit"],[5,"Background",0],[10,"Future",53],[10,"Send",54],[5,"Term",0],[17,"Output"],[10,"FnOnce",55],[5,"ByteUnit",56],[1,"u32"],[1,"u8"],[5,"Vec",57],[5,"HashMap",58],[5,"BackgroundHandle",0],[1,"u16"],[5,"Request",59],[5,"ReaderHandle",60],[1,"slice"],[5,"Pin",61],[5,"Context",62],[6,"Poll",63],[5,"Output",64],[8,"Result",65],[1,"tuple"],[5,"String",66],[1,"bool"],[6,"Result",67],[5,"TypeId",68],[5,"PathBuf",69],[5,"NamedTempFile",70]],"b":[]}],\
["oak_grpc",{"doc":"","t":"CCCCCCCFFFNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNNNNONNNNNNCCCCNNNNNNNNNNNNCNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNRRKFNNNNNNNNNNNMMMNNNNNNMNNMNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNNNNNMNNNNNNMNNNNNNNNNFFPFFPPGGPFFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNCCNNNNNNNNNNNNNNNNNNNNOOOCCNNNOOONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNNNNNMMNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNMNNNNNNNNNNNNNMNNNNNNFFNNNNNNNNNNCCNNONNNNNNNNNNNNNNONNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNMNNNNNNNNNNNNNNNNNNNCCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFMNNNNNNNMMNNNNMMNNNNNNNNMNMNNNNNNCFFFNNNNNNNNNNNNNNNNNNNNNOONNNONNNNNNNNNONNNNNNCCNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNNNNNMNNNNNNNNNNNNNNNCCCFNNNNNNNNNNNNNNNNNNNNNNNRKFNNNNNNNNNNNNNNNNNNNNMNNNNNNCFFFFFFFFONNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNOOONNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOONNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNOONNNNNNNN","n":["oak","perftools","containers","debug","functions","key_provisioning","session","GetApplicationConfigResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","config","default","default","default","dice_evidence","encoded_len","encoded_len","encoded_len","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","image_chunk","into","into","into","into_request","into_request","into_request","launcher_client","launcher_server","orchestrator_client","orchestrator_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v1","vzip","vzip","vzip","LauncherClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","GetContainerBundleStream","GetOakSystemImageStream","Launcher","LauncherServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","OrchestratorClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","Orchestrator","OrchestratorServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","DeriveSessionKeysRequest","DeriveSessionKeysResponse","Follower","GetGroupKeysResponse","GetKeyProvisioningRoleResponse","Group","Instance","KeyOrigin","KeyProvisioningRole","Leader","SignRequest","SignResponse","Unspecified","Unspecified","as_str_name","as_str_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compare","compare","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_i32","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","from_str_name","group_keys","hash","hash","hostlib_key_provisioning_client","hostlib_key_provisioning_server","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","is_valid","key_origin","key_origin","key_origin","key_origin","message","orchestrator_crypto_client","orchestrator_crypto_server","partial_cmp","partial_cmp","role","role","serialized_encapsulated_public_key","session_keys","set_key_origin","set_key_origin","set_role","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","HostlibKeyProvisioningClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_group_keys","get_key_provisioning_role","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","HostlibKeyProvisioning","HostlibKeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","get_key_provisioning_role","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","OrchestratorCryptoClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","derive_session_keys","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","sign","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorCrypto","OrchestratorCryptoServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","derive_session_keys","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","sign","to_owned","try_from","try_into","type_id","vzip","with_interceptor","CpuProfileRequest","CpuProfileResponse","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","debug_service_client","debug_service_server","default","default","duration","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from_ref","from_ref","into","into","into_request","into_request","profile","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DebugServiceClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","cpu_profile","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","DebugService","DebugServiceServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","cpu_profile","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","oak_functions_client","oak_functions_server","OakFunctionsClient","abort_next_lookup_data","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","extend_next_lookup_data","finish_next_lookup_data","fmt","from","from_ref","handle_user_request","initialize","into","into_request","max_decoding_message_size","max_encoding_message_size","new","reserve","send_compressed","stream_lookup_data","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OakFunctions","OakFunctionsServer","abort_next_lookup_data","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","extend_next_lookup_data","finish_next_lookup_data","fmt","from","from_arc","from_ref","handle_user_request","initialize","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","reserve","send_compressed","stream_lookup_data","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","GetGroupKeysRequest","GetGroupKeysResponse","GroupKeys","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","encoded_len","encoded_len","encoded_len","encrypted_encryption_private_key","endorsements","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","group_keys","into","into","into","into_request","into_request","into_request","key_provisioning_client","key_provisioning_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","KeyProvisioningClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_group_keys","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","KeyProvisioning","KeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","streaming_session_client","streaming_session_server","StreamingSessionClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","StreamStream","StreamingSession","StreamingSessionServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","profiles","Function","Label","Line","Location","Mapping","Profile","Sample","ValueType","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_id","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","default","default","default","default","default","default","default","default","default_sample_type","drop_frames","duration_nanos","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","file_offset","filename","filename","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","function","function_id","has_filenames","has_functions","has_inline_frames","has_line_numbers","id","id","id","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_folded","keep_frames","key","label","line","line","location","location_id","mapping","mapping_id","memory_limit","memory_start","name","num","num_unit","period","period_type","sample","sample_type","start_line","str","string_table","system_name","time_nanos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_grpc"],[2,"oak_grpc::oak"],[7,"oak_grpc::oak::containers"],[72,"oak_grpc::oak::containers::launcher_client"],[100,"oak_grpc::oak::containers::launcher_server"],[135,"oak_grpc::oak::containers::orchestrator_client"],[160,"oak_grpc::oak::containers::orchestrator_server"],[190,"oak_grpc::oak::containers::v1"],[388,"oak_grpc::oak::containers::v1::hostlib_key_provisioning_client"],[413,"oak_grpc::oak::containers::v1::hostlib_key_provisioning_server"],[443,"oak_grpc::oak::containers::v1::orchestrator_crypto_client"],[468,"oak_grpc::oak::containers::v1::orchestrator_crypto_server"],[498,"oak_grpc::oak::debug"],[540,"oak_grpc::oak::debug::debug_service_client"],[564,"oak_grpc::oak::debug::debug_service_server"],[593,"oak_grpc::oak::functions"],[595,"oak_grpc::oak::functions::oak_functions_client"],[625,"oak_grpc::oak::functions::oak_functions_server"],[660,"oak_grpc::oak::key_provisioning"],[661,"oak_grpc::oak::key_provisioning::v1"],[724,"oak_grpc::oak::key_provisioning::v1::key_provisioning_client"],[748,"oak_grpc::oak::key_provisioning::v1::key_provisioning_server"],[777,"oak_grpc::oak::session"],[778,"oak_grpc::oak::session::v1"],[780,"oak_grpc::oak::session::v1::streaming_session_client"],[804,"oak_grpc::oak::session::v1::streaming_session_server"],[834,"oak_grpc::perftools"],[835,"oak_grpc::perftools::profiles"],[1032,"core::fmt"],[1033,"core::fmt"],[1034,"core::result"],[1035,"core::any"],[1036,"tonic::codec::compression"],[1037,"tonic::body"],[1038,"tonic::client::service"],[1039,"core::clone"],[1040,"tonic::transport::channel"],[1041,"tonic::transport::error"],[1042,"tonic::transport::channel::endpoint"],[1043,"core::convert"],[1044,"core::fmt"],[1045,"tonic::status"],[1046,"tonic::request"],[1047,"tonic::service::interceptor"],[1048,"http::request"],[1049,"http::response"],[1050,"tower_service"],[1051,"tonic::service::interceptor"],[1052,"http_body"],[1053,"core::marker"],[1054,"alloc::sync"],[1055,"core::future::future"],[1056,"alloc::boxed"],[1057,"core::pin"],[1058,"futures_core::stream"],[1059,"axum::routing::into_make_service"],[1060,"core::task::wake"],[1061,"core::task::poll"],[1062,"core::cmp"],[1063,"core::option"],[1064,"core::hash"],[1065,"prost::error"],[1066,"oak_proto_rust::oak::functions"],[1067,"oak_proto_rust::oak::functions"],[1068,"oak_proto_rust::oak::session::v1"]],"d":["","","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated client implementations.","Generated server implementations.","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Server streaming response type for the GetContainerBundle …","Server streaming response type for the GetOakSystemImage …","Generated trait containing gRPC methods that should be …","Defines the service exposed by the launcher, that can be …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","","","Sends Attestation Evidence containing the Attestation …","Compress responses with the given encoding, if the client …","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the orchestrator, that can …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","","Choice between a key generated by the enclave instance and …","","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>KeyOrigin</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>KeyProvisioningRole</code>, or <code>None</code> if <code>value</code> …","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","Generated client implementations.","Generated server implementations.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>KeyOrigin</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>KeyProvisioningRole</code>.","Returns the enum value of <code>key_origin</code>, or the default if …","Returns the enum value of <code>key_origin</code>, or the default if …","","","","Generated client implementations.","Generated server implementations.","","","Returns the enum value of <code>role</code>, or the default if the …","","Ephemeral Diffie-Hellman client public key that is needed …","Session keys for decrypting client requests and encrypting …","Sets <code>key_origin</code> to the provided enum value.","Sets <code>key_origin</code> to the provided enum value.","Sets <code>role</code> to the provided enum value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the service exposed by the Hostlib that is used …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Get enclave group keys to the enclave as part of Key …","Get the enclave role for Key Provisioning. Could be one of …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the Hostlib that is used …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Get enclave group keys to the enclave as part of Key …","Get the enclave role for Key Provisioning. Could be one of …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","RPC service that is exposed to an enclave application and …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","Derives session keys for decrypting client requests and …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","Signs the provided message using the hardware rooted …","","","","","","","","Generated trait containing gRPC methods that should be …","RPC service that is exposed to an enclave application and …","Enable decompressing requests with the given encoding.","","","","","","","Derives session keys for decrypting client requests and …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","Signs the provided message using the hardware rooted …","","","","","","","","","","","","","","","","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","","Enable decompressing requests with the given encoding.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","Generated client implementations.","Generated server implementations.","","Aborts building the next lookup data.option","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","Extends the next lookup data by the given chunk of lookup …","Finishes building the next lookup data with the given …","","Returns the argument unchanged.","","Handles an invocation coming from a client.","Initializes the service and remote attestation keys.","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Reserves additional capacity for entries in the lookup …","Compress requests with the given encoding.","Streaming version combining <code>ExtendNextLookupData</code> and …","","","","","","","","Generated trait containing gRPC methods that should be …","","Aborts building the next lookup data.option","Enable decompressing requests with the given encoding.","","","","","","","Extends the next lookup data by the given chunk of lookup …","Finishes building the next lookup data with the given …","","Returns the argument unchanged.","","","Handles an invocation coming from a client.","Initializes the service and remote attestation keys.","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Reserves additional capacity for entries in the lookup …","Compress responses with the given encoding, if the client …","Streaming version combining <code>ExtendNextLookupData</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encryption private key that was encrypted with HPKE using …","","","","","Evidence contains the encryption public key for encrypting …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","Defines the Key Provisioning Service that distributes keys …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Request enclave group keys from for other enclaves as part …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the Key Provisioning Service that distributes keys …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Request enclave group keys from for other enclaves as part …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","","Generated client implementations.","Generated server implementations.","Service definition for streaming communication with an Oak …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","Used to send a sequence of messages ensuring that they are …","","","","","","","","Server streaming response type for the Stream method.","Generated trait containing gRPC methods that should be …","Service definition for streaming communication with an Oak …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","Used to send a sequence of messages ensuring that they are …","","","","","","","","","","","Describes function and line table debug information.","","","Each Sample records values encountered in some program …","ValueType describes the semantics and measurement units of …","The instruction address for this location, if available.  …","","","","","","","","","","","","","","","","","A string that uniquely identifies a particular program …","","","","","","","","","","","","","","","","","","","","","","","","","Freeform text associated to the profile.","","","","","","","","","Index into the string table of the type of the preferred …","frames with Function.function_name fully matching the …","Duration of the profile, if a duration makes sense.","","","","","","","","","","","","","","","","","Offset in the binary that corresponds to the first mapped …","The object this entry is loaded from.  This can be a …","Source file containing the function.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Functions referenced by locations","The id of the corresponding profile.Function for this line.","","The following fields indicate the resolution of symbolic …","","","Unique nonzero id for the mapping.","Unique nonzero id for the location.  A profile could use …","Unique nonzero id for the function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Provides an indication that multiple symbols map to this …","frames with Function.function_name fully matching the …","Index into string table","label includes additional context for this sample. It can …","Multiple line indicates this location has inlined …","Line number in source code.","Useful program location","The ids recorded here correspond to a Profile.location.id. …","Mapping from address ranges to the image/binary/library …","The id of the corresponding profile.Mapping for this …","The limit of the address range occupied by this mapping.","Address at which the binary (or DLL) is loaded into memory.","Name of the function, in human-readable form if available.","","Should only be present when num is present. Specifies the …","The number of events between sampled occurrences.","The kind of events between sampled ocurrences. e.g [ “cpu…","The set of samples recorded in this profile.","A description of the samples associated with each …","Line number in source file.","At most one of the following must be present","A common table for strings referenced by various messages. …","Name of the function, as identified by the system. For …","Time of collection (UTC) represented as nanoseconds past …","","","","","","","","","","","","","","","","","","","","","","","","","Rename it from type to ty to avoid using keyword in Rust.","","","","","","","","","Index into string table.","The type and unit of each value is defined by the …","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,3,4,1,3,4,1,3,4,1,3,4,1,3,4,3,1,3,4,4,1,3,4,1,3,4,1,3,4,1,3,4,1,3,4,1,1,3,4,1,3,4,0,0,0,0,1,3,4,1,3,4,1,3,4,1,3,4,0,1,3,4,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,34,34,0,0,33,33,33,33,33,33,33,33,33,33,33,34,34,34,33,33,33,33,33,33,34,33,33,34,33,33,33,33,33,33,33,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,49,49,49,49,49,49,49,49,49,49,49,50,49,49,49,49,49,49,50,49,49,49,49,49,49,49,49,49,0,0,53,0,0,51,51,0,0,53,0,0,51,53,51,53,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,54,55,56,57,58,59,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,51,53,51,53,54,55,56,57,51,58,59,53,54,55,56,57,58,59,54,55,56,57,51,58,59,53,51,51,51,51,53,53,53,53,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,51,53,54,55,56,57,51,58,59,53,51,53,59,51,53,0,0,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,51,53,54,56,54,56,56,0,0,51,53,58,58,54,55,54,56,58,57,54,55,56,57,51,58,59,53,54,55,56,57,51,51,58,59,53,53,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,54,55,56,57,51,58,59,53,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,66,66,66,66,66,66,66,66,67,67,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,69,69,69,69,69,69,69,70,69,69,69,69,69,69,69,69,69,69,69,69,69,70,69,69,69,69,69,69,0,0,71,72,71,72,71,72,71,72,71,72,0,0,71,72,71,71,72,71,72,71,72,71,72,71,72,71,72,71,72,72,71,72,71,72,71,72,71,72,71,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,74,74,74,74,74,74,74,75,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,92,93,93,93,93,93,93,93,92,92,93,93,93,93,92,92,93,93,93,93,93,93,93,93,92,93,92,93,93,93,93,93,93,0,0,0,0,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,94,95,96,95,94,95,96,94,95,96,94,95,96,96,94,95,96,94,95,96,0,0,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,98,98,98,98,98,98,98,98,98,98,98,99,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,104,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,103,103,103,103,103,103,0,0,0,0,0,0,0,0,0,111,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,110,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,106,106,107,108,109,110,111,112,113,106,106,106,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,110,110,113,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,106,112,110,110,110,110,110,111,113,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,111,106,109,108,111,112,106,108,106,111,110,110,113,109,109,106,106,106,106,113,109,106,113,106,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,106,107,108,109,110,111,112,113,107,106,107,108,109,110,111,112,113,107,108,106,107,108,109,110,111,112,113],"f":"``````````{ce{}{}}00000{bd}{fd}{hd}{bb}{ff}{hh}{{ce}d{}{}}00`{{}b}{{}f}{{}h}`{bj}{fj}{hj}{{bb}l}{{ff}l}{{hh}l}{{bn}A`}{{fn}A`}{{hn}A`}{cc{}}00000`{ce{}{}}00{c{{Ab{e}}}{}{}}00````111{c{{Ad{e}}}{}{}}00000{cAf{}}00`333`{{{Ah{c}}Aj}{{Ah{c}}}{{An{Al}}}}44{{{Ah{c}}}{{Ah{c}}}B`}{{ce}d{}{}}{c{{Ad{{Ah{Bb}}Bd}}}{{Bh{Bf}}}}{{{Ah{c}}n}A`Bj}99{{{Ah{c}}e}{{Ad{{Bl{f}}Bn}}}{{An{Al}}}{{C`{d}}}}{{{Ah{c}}e}{{Ad{{Bl{{Cb{b}}}}Bn}}}{{An{Al}}}{{C`{d}}}}0:9{{{Ah{c}}j}{{Ah{c}}}{{An{Al}}}}0{c{{Ah{c}}}{{An{Al}}}}{{{Ah{c}}e}{{Ad{{Bl{d}}Bn}}}{{An{Al}}}{{C`{d}}}}{{{Ah{c}}e}{{Ad{{Bl{d}}Bn}}}{{An{Al}}}{{C`{h}}}}:><<;>{{ce}{{Ah{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Ah{c}}}{{An{Al}}}}````{{{Db{c}}Aj}{{Db{c}}}Dd}{ce{}{}}0{{c{Cf{e}}}{}{}{}}{{{Db{c}}{Cf{e}}}gDd{DfDh}{}}{{{Db{c}}}{{Db{c}}}Dd}?{{{Db{c}}n}A`{BjDd}}{cc{}}{{{Dj{c}}}{{Db{c}}}Dd}1{{{Dd{}{{Dl{c}}{Dn{e}}}}{Ab{d}}}{{Ed{{Eb{E`}}}}}{{Eh{}{{Ef{{Ad{bBn}}}}}}Dh}{{Eh{}{{Ef{{Ad{bBn}}}}}}Dh}}007{c{{Ej{e}}}{}{}}{c{{Ab{e}}}{}{}}{{{Db{c}}j}{{Db{c}}}Dd}0{c{{Db{c}}}Dd}4{{{Db{c}}El}{{En{{Ad{de}}}}}Dd{}}{{cEl}{{En{{Ad{d}}}}}{}}{{{Dd{}{{Dl{c}}{Dn{e}}}}{Ab{h}}}{{Ed{{Eb{E`}}}}}{{Eh{}{{Ef{{Ad{bBn}}}}}}Dh}{{Eh{}{{Ef{{Ad{bBn}}}}}}Dh}}?>{c{{Ad{e}}}{}{}}0{cAf{}}{ce{}{}}{{ce}{{Cd{{Db{c}}e}}}DdCn}`{{{F`{c}}Aj}{{F`{c}}}{{An{Al}}}}22{{{F`{c}}}{{F`{c}}}B`}{{ce}d{}{}}{c{{Ad{{F`{Bb}}Bd}}}{{Bh{Bf}}}}{{{F`{c}}n}A`Bj}{cc{}}0{{{F`{c}}e}{{Ad{{Bl{f}}Bn}}}{{An{Al}}}{{C`{d}}}}8{c{{Ab{e}}}{}{}}{{{F`{c}}j}{{F`{c}}}{{An{Al}}}}0{c{{F`{c}}}{{An{Al}}}}{{{F`{c}}e}{{Ad{{Bl{d}}Bn}}}{{An{Al}}}{{C`{d}}}}:<>>=<{{ce}{{F`{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{F`{c}}}{{An{Al}}}}``{{{Fb{c}}Aj}{{Fb{c}}}Fd}??{{c{Cf{e}}}{}{}{}}{{{Fb{c}}{Cf{e}}}gFd{DfDh}{}}{{{Fb{c}}}{{Fb{c}}}Fd}>{{{Fb{c}}n}A`{BjFd}}<{{{Dj{c}}}{{Fb{c}}}Fd}={{Fd{Ab{d}}}{{Ed{{Eb{E`}}}}}}{ce{}{}}{c{{Ej{e}}}{}{}}>{{{Fb{c}}j}{{Fb{c}}}Fd}0{c{{Fb{c}}}Fd}4{{{Fb{c}}El}{{En{{Ad{de}}}}}Fd{}}{{cEl}{{En{{Ad{d}}}}}{}}<5{c{{Ad{e}}}{}{}}0{cAf{}}7{{ce}{{Cd{{Fb{c}}e}}}FdCn}``````````````{FfFh}{FjFh}::::::::::::::::{Fld}{Fnd}{G`d}{Gbd}{Gdd}{Gfd}{FlFl}{FnFn}{G`G`}{GbGb}{FfFf}{GdGd}{GfGf}{FjFj}{{ce}d{}{}}0000000{{FfFf}Gh}{{FjFj}Gh}{{ce}Gh{}{}}0{{}Fl}{{}Fn}{{}G`}{{}Gb}{{}Ff}{{}Gd}{{}Gf}{{}Fj}{Flj}{Fnj}{G`j}{Gbj}{Gdj}{Gfj}{{FlFl}l}{{FnFn}l}{{G`G`}l}{{GbGb}l}{{FfFf}l}{{GdGd}l}{{GfGf}l}{{FjFj}l}{{ce}l{}{}}0000000{{Fln}A`}{{Fnn}A`}{{G`n}A`}{{Gbn}A`}{{Ffn}A`}{{Gdn}A`}{{Gfn}A`}{{Fjn}A`}{cc{}}0000000{Gj{{Gl{Ff}}}}{Gj{{Gl{Fj}}}}22222222{Fh{{Gl{Ff}}}}{Fh{{Gl{Fj}}}}`{{Ffc}dGn}{{Fjc}dGn}``{ce{}{}}0000000{c{{Ab{e}}}{}{}}0000000{Gjl}0{FlFf}{G`Ff}`````{{FfFf}{{Gl{Gh}}}}{{FjFj}{{Gl{Gh}}}}{GdFj}```{{FlFf}d}{{G`Ff}d}{{GdFj}d}`::::::::{c{{Ad{e}}}{}{}}0000{Gj{{Ad{FfH`}}}}111{Gj{{Ad{FjH`}}}}22222222{cAf{}}0000000>>>>>>>>`{{{Hb{c}}Aj}{{Hb{c}}}{{An{Al}}}}??{{{Hb{c}}}{{Hb{c}}}B`}{{ce}d{}{}}{c{{Ad{{Hb{Bb}}Bd}}}{{Bh{Bf}}}}{{{Hb{c}}n}A`Bj}{cc{}}0{{{Hb{c}}e}{{Ad{{Bl{Gf}}Bn}}}{{An{Al}}}{{C`{d}}}}{{{Hb{c}}e}{{Ad{{Bl{Gd}}Bn}}}{{An{Al}}}{{C`{d}}}}{ce{}{}}{c{{Ab{e}}}{}{}}{{{Hb{c}}j}{{Hb{c}}}{{An{Al}}}}0{c{{Hb{c}}}{{An{Al}}}};3??<3{{ce}{{Hb{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Hb{c}}}{{An{Al}}}}``{{{Hd{c}}Aj}{{Hd{c}}}Hf}66{{{Hd{c}}{Cf{e}}}gHf{DfDh}{}}{{c{Cf{e}}}{}{}{}}{{{Hd{c}}}{{Hd{c}}}Hf}?{{{Hd{c}}n}A`{BjHf}}={{{Dj{c}}}{{Hd{c}}}Hf}>{{Hf{Ab{d}}}{{Ed{{Eb{E`}}}}}}0<{c{{Ej{e}}}{}{}}<{{{Hd{c}}j}{{Hd{c}}}Hf}0{c{{Hd{c}}}Hf}{{{Hd{c}}El}{{En{{Ad{de}}}}}Hf{}}{{cEl}{{En{{Ad{d}}}}}{}};{ce{}{}}{c{{Ad{e}}}{}{}}0{cAf{}}2{{ce}{{Cd{{Hd{c}}e}}}HfCn}`{{{Hh{c}}Aj}{{Hh{c}}}{{An{Al}}}}44{{{Hh{c}}}{{Hh{c}}}B`}{{ce}d{}{}}{c{{Ad{{Hh{Bb}}Bd}}}{{Bh{Bf}}}}{{{Hh{c}}e}{{Ad{{Bl{Fn}}Bn}}}{{An{Al}}}{{C`{Fl}}}}{{{Hh{c}}n}A`Bj}{cc{}}0:{c{{Ab{e}}}{}{}}{{{Hh{c}}j}{{Hh{c}}}{{An{Al}}}}0{c{{Hh{c}}}{{An{Al}}}}9{{{Hh{c}}e}{{Ad{{Bl{Gb}}Bn}}}{{An{Al}}}{{C`{G`}}}}>==<>{{ce}{{Hh{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Hh{c}}}{{An{Al}}}}``{{{Hj{c}}Aj}{{Hj{c}}}Hl}{ce{}{}}0{{c{Cf{e}}}{}{}{}}{{{Hj{c}}{Cf{e}}}gHl{DfDh}{}}{{{Hj{c}}}{{Hj{c}}}Hl}?{{Hl{Ab{Fl}}}{{Ed{{Eb{E`}}}}}}{{{Hj{c}}n}A`{BjHl}}={{{Dj{c}}}{{Hj{c}}}Hl}>6{c{{Ej{e}}}{}{}}>{{{Hj{c}}j}{{Hj{c}}}Hl}0{c{{Hj{c}}}Hl}{{{Hj{c}}El}{{En{{Ad{de}}}}}Hl{}}{{cEl}{{En{{Ad{d}}}}}{}}<{{Hl{Ab{G`}}}{{Ed{{Eb{E`}}}}}}<{c{{Ad{e}}}{}{}}0{cAf{}}>{{ce}{{Cd{{Hj{c}}e}}}HlCn}``????{Hnd}{I`d}{HnHn}{I`I`}{{ce}d{}{}}0``{{}Hn}{{}I`}`{Hnj}{I`j}{{HnHn}l}{{I`I`}l}{{Hnn}A`}{{I`n}A`}{cc{}}000{ce{}{}}0{c{{Ab{e}}}{}{}}0`11{c{{Ad{e}}}{}{}}000{cAf{}}033`{{{Ib{c}}Aj}{{Ib{c}}}{{An{Al}}}}44{{{Ib{c}}}{{Ib{c}}}B`}?{c{{Ad{{Ib{Bb}}Bd}}}{{Bh{Bf}}}}{{{Ib{c}}e}{{Ad{{Bl{I`}}Bn}}}{{An{Al}}}{{C`{Hn}}}}{{{Ib{c}}n}A`Bj}9987{{{Ib{c}}j}{{Ib{c}}}{{An{Al}}}}0{c{{Ib{c}}}{{An{Al}}}}6:887:{{ce}{{Ib{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Ib{c}}}{{An{Al}}}}``{{{Id{c}}Aj}{{Id{c}}}If}=={{{Id{c}}{Cf{e}}}gIf{DfDh}{}}{{c{Cf{e}}}{}{}{}}{{{Id{c}}}{{Id{c}}}If}{{ce}d{}{}}{{If{Ab{Hn}}}{{Ed{{Eb{E`}}}}}}{{{Id{c}}n}A`{BjIf}}{cc{}}{{{Dj{c}}}{{Id{c}}}If}1{ce{}{}}{c{{Ej{e}}}{}{}}{c{{Ab{e}}}{}{}}{{{Id{c}}j}{{Id{c}}}If}0{c{{Id{c}}}If}{{{Id{c}}El}{{En{{Ad{de}}}}}If{}}{{cEl}{{En{{Ad{d}}}}}{}}?6{c{{Ad{e}}}{}{}}0{cAf{}}8{{ce}{{Cd{{Id{c}}e}}}IfCn}```{{{Ih{c}}e}{{Ad{{Bl{Ij}}Bn}}}{{An{Al}}}{{C`{Il}}}}{{{Ih{c}}Aj}{{Ih{c}}}{{An{Al}}}};;{{{Ih{c}}}{{Ih{c}}}B`}{{ce}d{}{}}{c{{Ad{{Ih{Bb}}Bd}}}{{Bh{Bf}}}}{{{Ih{c}}e}{{Ad{{Bl{In}}Bn}}}{{An{Al}}}{{C`{J`}}}}{{{Ih{c}}e}{{Ad{{Bl{Jb}}Bn}}}{{An{Al}}}{{C`{Jd}}}}{{{Ih{c}}n}A`Bj}{cc{}}0{{{Ih{c}}e}{{Ad{{Bl{Jf}}Bn}}}{{An{Al}}}{{C`{Jh}}}}{{{Ih{c}}e}{{Ad{{Bl{Jj}}Bn}}}{{An{Al}}}{{C`{Jl}}}}{ce{}{}}{c{{Ab{e}}}{}{}}{{{Ih{c}}j}{{Ih{c}}}{{An{Al}}}}0{c{{Ih{c}}}{{An{Al}}}}{{{Ih{c}}e}{{Ad{{Bl{Jn}}Bn}}}{{An{Al}}}{{C`{K`}}}}>{{{Ih{c}}e}{{Ad{{Bl{Jb}}Bn}}}{{An{Al}}}{{Kf{}{{Kb{Kd}}}}}}5{c{{Ad{e}}}{}{}}0{cAf{}}7{{ce}{{Ih{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Ih{c}}}{{An{Al}}}}``{{Kh{Ab{Il}}}{{Ed{{Eb{E`}}}}}}{{{Kj{c}}Aj}{{Kj{c}}}Kh};;{{c{Cf{e}}}{}{}{}}{{{Kj{c}}{Cf{e}}}gKh{DfDh}{}}{{{Kj{c}}}{{Kj{c}}}Kh}{{ce}d{}{}}{{Kh{Ab{J`}}}{{Ed{{Eb{E`}}}}}}{{Kh{Ab{Jd}}}{{Ed{{Eb{E`}}}}}}{{{Kj{c}}n}A`{BjKh}}{cc{}}{{{Dj{c}}}{{Kj{c}}}Kh}1{{Kh{Ab{Jh}}}{{Ed{{Eb{E`}}}}}}{{Kh{Ab{Jl}}}{{Ed{{Eb{E`}}}}}}{ce{}{}}{c{{Ej{e}}}{}{}}{c{{Ab{e}}}{}{}}{{{Kj{c}}j}{{Kj{c}}}Kh}0{c{{Kj{c}}}Kh}{{{Kj{c}}El}{{En{{Ad{de}}}}}Kh{}}{{cEl}{{En{{Ad{d}}}}}{}}{{Kh{Ab{K`}}}{{Ed{{Eb{E`}}}}}}{{{Kj{c}}Aj}{{Kj{c}}}Kh}{{Kh{Ab{{Cb{Kd}}}}}{{Ed{{Eb{E`}}}}}}9{c{{Ad{e}}}{}{}}0{cAf{}};{{ce}{{Cd{{Kj{c}}e}}}KhCn}````<<<<<<{Kld}{Knd}{L`d}{KlKl}{KnKn}{L`L`}{{ce}d{}{}}00{{}Kl}{{}Kn}{{}L`}{Klj}{Knj}{L`j}``{{KlKl}l}{{KnKn}l}{{L`L`}l}`{{Kln}A`}{{Knn}A`}{{L`n}A`}{cc{}}00000`{ce{}{}}00{c{{Ab{e}}}{}{}}00``111{c{{Ad{e}}}{}{}}00000{cAf{}}00333`{{{Lb{c}}Aj}{{Lb{c}}}{{An{Al}}}}44{{{Lb{c}}}{{Lb{c}}}B`}{{ce}d{}{}}{c{{Ad{{Lb{Bb}}Bd}}}{{Bh{Bf}}}}{{{Lb{c}}n}A`Bj}99{{{Lb{c}}e}{{Ad{{Bl{L`}}Bn}}}{{An{Al}}}{{C`{Kn}}}}98{{{Lb{c}}j}{{Lb{c}}}{{An{Al}}}}0{c{{Lb{c}}}{{An{Al}}}}7;998;{{ce}{{Lb{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Lb{c}}}{{An{Al}}}}``{{{Ld{c}}Aj}{{Ld{c}}}Lf}>>{{{Ld{c}}{Cf{e}}}gLf{DfDh}{}}{{c{Cf{e}}}{}{}{}}{{{Ld{c}}}{{Ld{c}}}Lf};{{{Ld{c}}n}A`{BjLf}}{cc{}}{{{Dj{c}}}{{Ld{c}}}Lf}1{{Lf{Ab{Kn}}}{{Ed{{Eb{E`}}}}}}{ce{}{}}{c{{Ej{e}}}{}{}}{c{{Ab{e}}}{}{}}{{{Ld{c}}j}{{Ld{c}}}Lf}0{c{{Ld{c}}}Lf}{{{Ld{c}}El}{{En{{Ad{de}}}}}Lf{}}{{cEl}{{En{{Ad{d}}}}}{}}>6{c{{Ad{e}}}{}{}}0{cAf{}}8{{ce}{{Cd{{Ld{c}}e}}}LfCn}````{{{Lh{c}}Aj}{{Lh{c}}}{{An{Al}}}}::{{{Lh{c}}}{{Lh{c}}}B`}{{ce}d{}{}}{c{{Ad{{Lh{Bb}}Bd}}}{{Bh{Bf}}}}{{{Lh{c}}n}A`Bj}{cc{}}0?={{{Lh{c}}j}{{Lh{c}}}{{An{Al}}}}0{c{{Lh{c}}}{{An{Al}}}}7{{{Lh{c}}e}{{Ad{{Bl{{Cb{Lj}}}}Bn}}}{{An{Al}}}{{Kf{}{{Kb{Ll}}}}}}{ce{}{}}<<;0{{ce}{{Lh{{Cd{ce}}}}}{{Cl{{Cf{Al}}}{{Ch{Cj}}}}{An{Al}}}Cn}{{cD`}{{Lh{c}}}{{An{Al}}}}```{{{Ln{c}}Aj}{{Ln{c}}}M`}33{{{Ln{c}}{Cf{e}}}gM`{DfDh}{}}{{c{Cf{e}}}{}{}{}}{{{Ln{c}}}{{Ln{c}}}M`}={{{Ln{c}}n}A`{BjM`}};{{{Dj{c}}}{{Ln{c}}}M`}<8{c{{Ej{e}}}{}{}}{c{{Ab{e}}}{}{}}{{{Ln{c}}j}{{Ln{c}}}M`}0{c{{Ln{c}}}M`}{{{Ln{c}}El}{{En{{Ad{de}}}}}M`{}}{{cEl}{{En{{Ad{d}}}}}{}};{{{M`{}{{Mb{c}}}}{Ab{{Cb{Ll}}}}}{{Ed{{Eb{E`}}}}}{{Eh{}{{Ef{{Ad{LjBn}}}}}}Dh}}?{c{{Ad{e}}}{}{}}0{cAf{}}{ce{}{}}{{ce}{{Cd{{Ln{c}}e}}}M`Cn}``````````1111111111111111`{Mdd}{Mfd}{Mhd}{Mjd}{Mld}{Mnd}{N`d}{Nbd}{MdMd}{MfMf}{MhMh}{MjMj}{MlMl}{MnMn}{N`N`}{NbNb}{{ce}d{}{}}0000000`{{}Md}{{}Mf}{{}Mh}{{}Mj}{{}Ml}{{}Mn}{{}N`}{{}Nb}```{Mdj}{Mfj}{Mhj}{Mjj}{Mlj}{Mnj}{N`j}{Nbj}{{MdMd}l}{{MfMf}l}{{MhMh}l}{{MjMj}l}{{MlMl}l}{{MnMn}l}{{N`N`}l}{{NbNb}l}```{{Mdn}A`}{{Mfn}A`}{{Mhn}A`}{{Mjn}A`}{{Mln}A`}{{Mnn}A`}{{N`n}A`}{{Nbn}A`}{cc{}}000000000000000`````````{ce{}{}}0000000{c{{Ab{e}}}{}{}}0000000````````````````````````11111111{c{{Ad{e}}}{}{}}000000000000000`{cAf{}}0000000``33333333","c":[294,295],"p":[[5,"GetImageResponse",7],[1,"unit"],[5,"GetApplicationConfigResponse",7],[5,"SendAttestationEvidenceRequest",7],[1,"usize"],[1,"bool"],[5,"Formatter",1032],[8,"Result",1032],[5,"Request",1033],[6,"Result",1034],[5,"TypeId",1035],[5,"LauncherClient",72],[6,"CompressionEncoding",1036],[8,"BoxBody",1037],[10,"GrpcService",1038],[10,"Clone",1039],[5,"Channel",1040],[5,"Error",1041],[5,"Endpoint",1042],[10,"TryInto",1043],[10,"Debug",1032],[5,"Response",1044],[5,"Status",1045],[10,"IntoRequest",1033],[5,"Streaming",1046],[5,"InterceptedService",1047],[5,"Request",1048],[17,"Response"],[5,"Response",1049],[10,"Service",1050],[10,"Interceptor",1047],[5,"Uri",1051],[5,"LauncherServer",100],[10,"Launcher",100],[10,"Body",1052],[10,"Send",1053],[5,"Arc",1054],[17,"GetOakSystemImageStream"],[17,"GetContainerBundleStream"],[10,"Future",1055],[5,"Box",1056],[5,"Pin",1057],[17,"Item"],[10,"Stream",1058],[5,"IntoMakeService",1059],[5,"Context",1060],[6,"Poll",1061],[5,"OrchestratorClient",135],[5,"OrchestratorServer",160],[10,"Orchestrator",160],[6,"KeyOrigin",190],[1,"str"],[6,"KeyProvisioningRole",190],[5,"DeriveSessionKeysRequest",190],[5,"DeriveSessionKeysResponse",190],[5,"SignRequest",190],[5,"SignResponse",190],[5,"GetKeyProvisioningRoleResponse",190],[5,"GetGroupKeysResponse",190],[6,"Ordering",1062],[1,"i32"],[6,"Option",1063],[10,"Hasher",1064],[5,"DecodeError",1065],[5,"HostlibKeyProvisioningClient",388],[5,"HostlibKeyProvisioningServer",413],[10,"HostlibKeyProvisioning",413],[5,"OrchestratorCryptoClient",443],[5,"OrchestratorCryptoServer",468],[10,"OrchestratorCrypto",468],[5,"CpuProfileRequest",498],[5,"CpuProfileResponse",498],[5,"DebugServiceClient",540],[5,"DebugServiceServer",564],[10,"DebugService",564],[5,"OakFunctionsClient",595],[5,"AbortNextLookupDataResponse",1066],[5,"Empty",1066],[5,"ExtendNextLookupDataResponse",1066],[5,"ExtendNextLookupDataRequest",1066],[5,"FinishNextLookupDataResponse",1066],[5,"FinishNextLookupDataRequest",1066],[5,"InvokeResponse",1066],[5,"InvokeRequest",1066],[5,"InitializeResponse",1066],[5,"InitializeRequest",1066],[5,"ReserveResponse",1066],[5,"ReserveRequest",1066],[17,"Message"],[5,"LookupDataChunk",1066],[10,"IntoStreamingRequest",1033],[10,"OakFunctions",625],[5,"OakFunctionsServer",625],[5,"GroupKeys",661],[5,"GetGroupKeysRequest",661],[5,"GetGroupKeysResponse",661],[5,"KeyProvisioningClient",724],[5,"KeyProvisioningServer",748],[10,"KeyProvisioning",748],[5,"StreamingSessionClient",780],[5,"ResponseWrapper",1067],[5,"RequestWrapper",1067],[5,"StreamingSessionServer",804],[10,"StreamingSession",804],[17,"StreamStream"],[5,"Profile",835],[5,"ValueType",835],[5,"Sample",835],[5,"Label",835],[5,"Mapping",835],[5,"Location",835],[5,"Line",835],[5,"Function",835]],"b":[]}],\
["oak_grpc_utils",{"doc":"","t":"FFNNNNOONNONNHNNNNNNNNN","n":["CodegenOptions","ExternPath","borrow","borrow","borrow_mut","borrow_mut","build_client","build_server","default","default","extern_paths","from","from","generate_grpc_code","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_grpc_utils"],[23,"std::io::error"],[24,"std::path"],[25,"core::convert"],[26,"core::result"],[27,"core::any"]],"d":["Options for building gRPC code.","","","","","","Specify whether to build client related code.","Specify whether to build server related code.","","","Specify externally provided Protobuf packages or types.","Returns the argument unchanged.","Returns the argument unchanged.","Generate gRPC code from Protobuf using <code>tonic</code> library.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,2,1,1,2,0,1,2,2,1,2,1,2,1,2],"f":"``{ce{}{}}000``{{}b}{{}d}`{cc{}}0{{{f{c}}{f{e}}b}{{j{h}}}{{n{l}}}{{n{l}}}}44{{A`A`}d}{c{{Ab{e}}}{}{}}000{cAd{}}0","c":[],"p":[[5,"CodegenOptions",0],[5,"ExternPath",0],[1,"slice"],[1,"unit"],[8,"Result",23],[5,"Path",24],[10,"AsRef",25],[1,"str"],[6,"Result",26],[5,"TypeId",27]],"b":[]}],\
["oak_hello_world_linux_init",{"doc":"","t":"CHH","n":["init","main","init"],"q":[[0,"oak_hello_world_linux_init"],[2,"oak_hello_world_linux_init::init"],[3,"anyhow"]],"d":["","","Performs the minimum initialization required from the …"],"i":[0,0,0],"f":"`{{}b}{{}{{f{d}}}}","c":[],"p":[[1,"never"],[1,"unit"],[8,"Result",3]],"b":[]}],\
["oak_kernel_measurement",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNOOONONHONNNNNNNNN","n":["Cli","Kernel","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","from","from","from_arg_matches","from_arg_matches_mut","from_bz_image","group_id","into","into","kernel","kernel_image","kernel_image_output","kernel_path","kernel_setup_data_output","load","main","setup_data","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"oak_kernel_measurement"],[37,"clap_builder::builder::command"],[38,"clap_builder::parser::matches::arg_matches"],[39,"clap_builder"],[40,"core::result"],[41,"clap_builder::util::id"],[42,"core::option"],[43,"std::path"],[44,"anyhow"],[45,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Parses a bzImage kernel file and extracts the kernel image …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Loads the bzImage-format kernel from the supplied path/","","","","","","","","","","",""],"i":[0,0,2,2,9,2,9,2,2,2,2,2,9,2,2,2,9,2,9,2,2,9,2,2,2,9,0,9,2,9,2,9,2,9,2,2,2],"f":"``{bb}0{ce{}{}}000{dd}{{ce}f{}{}}{{}b}0{cc{}}0{h{{l{dj}}}}0{{{A`{n}}}Ab}{{}{{Af{Ad}}}}77```{dAh}`{Ah{{Aj{Ab}}}}{{}{{Aj{f}}}}`:{c{{l{e}}}{}{}}000{cAl{}}0{{dh}{{l{fj}}}}0","c":[],"p":[[5,"Command",37],[5,"Cli",0],[1,"unit"],[5,"ArgMatches",38],[8,"Error",39],[6,"Result",40],[1,"u8"],[1,"slice"],[5,"Kernel",0],[5,"Id",41],[6,"Option",42],[5,"PathBuf",43],[8,"Result",44],[5,"TypeId",45]],"b":[]}],\
["oak_launcher_utils",{"doc":"","t":"CCFFNNNNNNNNNNNNNNNNNNNKFFONNONNNNNNNNMNNNNNNNONONNOMNHOONNNNNNNNNNOMN","n":["channel","launcher","Connector","ConnectorHandle","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","invoke","spawn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","GuestInstance","Instance","Params","app_binary","augment_args","augment_args_for_update","bios_binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","connect","connect","eq","fmt","from","from","from_arg_matches","from_arg_matches_mut","gdb","group_id","initrd","into","into","kernel","kill","kill","launch","memory_size","pci_passthrough","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmm_binary","wait","wait"],"q":[[0,"oak_launcher_utils"],[2,"oak_launcher_utils::channel"],[23,"oak_launcher_utils::launcher"],[70,"core::future::future"],[71,"alloc::boxed"],[72,"core::pin"],[73,"oak_channel"],[74,"core::result"],[75,"core::any"],[76,"clap_builder::builder::command"],[77,"core::fmt"],[78,"core::fmt"],[79,"clap_builder"],[80,"clap_builder::util::id"],[81,"core::option"],[82,"core::error"],[83,"anyhow"],[84,"std::os::unix::net::stream"]],"d":["","","Singleton responsible for sending requests, and receiving …","Implementation of an <code>micro_rpc::AsyncTransport</code> that …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Spawn an instance of the <code>Connector</code> in a seperate task, and …","","","","","","","","Defines the interface of a launched guest instance. …","Represents an a guest instance launched in virtualized …","Represents parameters used for launching VM instances.","Path to the Oak Functions application binary to be loaded …","","","Path to the BIOS image to use.","","","","","","","","","Creates a channel to communicate with the guest instance.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Port to use for debugging with gdb","","Path to the initrd image to use.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Path to the enclave binary to load into the VM.","Kill the guest instance.","","Launches a new guest instance in given mode.","How much memory to give to the enclave binary, e.g., 256M …","Pass the specified host PCI device through to the virtual …","Starts virtualized instance with given parameters and …","","","","","","","","","","Path to the VMM binary to execute.","Wait for the guest instance process to finish.",""],"i":[0,0,0,0,26,1,26,1,1,1,26,1,26,1,1,26,1,26,1,26,1,26,1,0,0,0,12,12,12,12,14,12,14,12,12,12,12,12,13,14,12,12,14,12,12,12,12,12,12,14,12,12,13,14,0,12,12,14,12,14,12,14,12,14,12,12,12,12,13,14],"f":"````{ce{}{}}000{bb}{{ce}d{}{}}{cc{}}033{{b{h{f}}}{{n{{l{j}}}}}}{{{l{A`}}}b}5{c{{Ab{e}}}{}{}}000{cAd{}}0````{AfAf}0`8888{AhAh}7{{}Af}0{Aj{{n{{l{j}}}}}}{Al{{n{{l{j}}}}}}{{AhAh}An}{{AhB`}Bb};;{Bd{{Ab{AhBf}}}}0`{{}{{Bj{Bh}}}}`{ce{}{}}0`{{{l{Aj}}}{{n{{l{j}}}}}}{{{l{Al}}}{{n{{l{j}}}}}}{Ah{{C`{{Bl{{l{Aj}}b}}{l{Bn}}}}}}``{{AhCb}{{C`{Al}}}}4????>>{{AhBd}{{Ab{dBf}}}}0`;:","c":[],"p":[[5,"ConnectorHandle",2],[1,"unit"],[1,"u8"],[1,"slice"],[10,"Future",70],[5,"Box",71],[5,"Pin",72],[10,"Channel",73],[6,"Result",74],[5,"TypeId",75],[5,"Command",76],[5,"Params",23],[10,"GuestInstance",23],[5,"Instance",23],[1,"bool"],[5,"Formatter",77],[8,"Result",77],[5,"ArgMatches",78],[8,"Error",79],[5,"Id",80],[6,"Option",81],[1,"tuple"],[10,"Error",82],[8,"Result",83],[5,"UnixStream",84],[5,"Connector",2]],"b":[]}],\
["oak_linux_boot_params",{"doc":"","t":"PFPFFTPFFSPPGPFPFPPFPTTTFPPFPPTPPFPFFGFFPTTTTTFOOOOOOOOOOOOOONONNOONNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNOOOOOONNNNOOOONOOOOOOOOOOOOOONNNNNNNOOOOOOOONNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNOOOOOOOOOOOOONOOONNNONNOOOOOOOOOOOOOOOOOONONNOOOOOONNOOOOOOOOOONNNNNOOOONOONNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNOOOOOOOOONON","n":["ACPI","APMBiosInfo","AppleProperties","BootE820Entry","BootParams","CAN_USE_HEAP","CCBlob","CCBlobSevInfo","CCSetupData","CC_BLOB_SEV_INFO_MAGIC","DISABLED","DTB","E820EntryType","E820Ext","EDIDInfo","EFI","EFIInfo","IMA","INVALID","ISTInfo","Jailhouse","KASLR_FLAG","KEEP_SEGMENTS","LOADED_HIGH","LoadFlags","NVS","None","OLPCOfwHeader","PCI","PMEM","QUIET_FLAG","RAM","RESERVED","Ramdisk","RngSeed","ScreenInfo","SetupData","SetupDataType","SetupHeader","SysDescTable","UNUSABLE","XLF_CAN_BE_LOADED_ABOVE_4G","XLF_EFI_HANDOVER_32","XLF_EFI_HANDOVER_64","XLF_EFI_KEXEC","XLF_KERNEL_64","XLoadFlags","_eddbuf","_pad2","_pad3","_pad4","_pad5","_pad6","_pad7","_pad8","_pad9","_reserved","_reserved","_rsvd1","_rsvd2","acpi_rsdp_addr","addr","addr","all","all","alt_mem_k","apm_bios_info","append_e820_entry","args","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blue_pos","blue_size","boot_flag","bootsect_kludge","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cc_blob_address","cc_blob_address","cif_handler","cl_magic","cl_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd_line_ptr","cmdline_size","code32_start","command","complement","complement","contains","contains","cpuid_len","cpuid_phys","cseg","cseg_16","cseg_16_len","cseg_len","default","delete_e820_entry","difference","difference","dseg","dseg_len","dummy","e820_entries","e820_table","e820_table","edd_mbr_sig_buf_entries","edd_mbr_sig_buffer","eddbuf_entries","edid_info","efi_info","efi_loader_signature","efi_memdesc_size","efi_memdesc_version","efi_memmap","efi_memmap_hi","efi_memmap_size","efi_systab","efi_systab_hi","empty","empty","end","entry_type","eq","eq","eq","event","ext_cmd_line_ptr","ext_lfb_base","ext_loader_type","ext_loader_ver","ext_mem_k","ext_ramdisk_image","ext_ramdisk_size","extend","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","green_pos","green_size","handover_offset","hardware_subarch","hardware_subarch_data","hd0_info","hd1_info","hdr","header","header","heap_end_ptr","init_size","initrd_addr_max","insert","insert","insert_e820_entry","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","irq_desc_table","is_all","is_all","is_empty","is_empty","ist_info","iter","iter","iter_names","iter_names","jump","kbd_status","kernel_alignment","kernel_info_offset","kernel_version","len","length","lfb_base","lfb_depth","lfb_height","lfb_linelength","lfb_size","lfb_width","load_flags","loadflags","magic","min_alignment","new","new","new","next","not","not","offset","ofw_magic","ofw_version","olpc_ofw_header","orig_video_cols","orig_video_ega_bx","orig_video_is_vga","orig_video_lines","orig_video_mode","orig_video_page","orig_video_points","orig_x","orig_y","pages","payload_length","payload_offset","perf_level","pref_address","protocol","ram_size","ramdisk","ramdisk","ramdisk_image","ramdisk_size","realmode_swtch","red_pos","red_size","relocatable_kernel","remove","remove","root_dev","root_flags","rsvd_pos","rsvd_size","scratch","screen_info","secrets_len","secrets_phys","secure_boot","sentinel","set","set","set_addr","set_size","setup_data","setup_data","setup_move_size","setup_sects","signature","size","size","start_sys_seg","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","sys_desc_table","syssize","table","tboot_addr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_loader","union","union","unused2","unused3","version","version","version","vesa_attributes","vesapm_off","vesapm_seg","vid_mode","x_load_flags","xloadflags","zeroed"],"q":[[0,"oak_linux_boot_params"],[498,"core::ffi::c_str"],[499,"core::option"],[500,"core::iter::traits::collect"],[501,"core::fmt"],[502,"core::fmt"],[503,"bitflags::iter"],[504,"bitflags::iter"],[505,"core::any"]],"d":["ACPI Reclaim Memory. Available after the OS reads the ACPI …","","","","","Indicates that the value entered in …","","","","","Memory that is not enabled.","","E820 address range types according to Chapter 15 of the …","","","","","","Uninitialized entry in the table. Don’t trust the …","","","Used internally by the compressed kernel to communicate …","","If <code>0</code>, the protected-mode code is loaded at <code>0x10000</code>.If <code>1</code>, …","Boot protocol option flags.","ACPI NVS memory; in use or reserved by the system.","","","","Persistent memory: must be handled distinct from …","Requests the kernel to not write early messages that …","Available RAM usable by the operating system.","In use or reserved by the system.","","","","","","Real-mode Kernel Header.","","Memory in which errors have been detected.","The kernel/boot_params/cmdline/ramdisk can be above 4G.","The kernel supports the 32-bit EFI handoff entry point …","The kernel supports the 64-bit EFI handoff entry point …","The kernel supports kexec EFI boot with EFI runtime …","This kernel has the legacy 64-bit entry point at <code>0x200</code>.","Extended Boot protocol option flags.","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","0xAA55 magic number","DO NOT USE - for bootsect.S use only","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","32-bit pointer to the kernel command line","Maximum size of the kernel command line","Boot loader hook","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","","","","","","","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","Extended boot laoder ID","Extended boot loader version","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","","","Offset of handover entry point","Hardware subarchitecture","Subarchitecture-specific data","","","","","Magic signature “HdrS”","Free memory after setup end","Linear memory required during initialization","Highest legal initrd address","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Jump instruction","","Physical addr alignment required for kernel","Offset of the kernel_info","Pointer to kernel version string","","","","","","","","","","Boot protocol option flags","","Minimum alignment, as a power of two","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","","","","","Length of kernel payload","Offset of kernel payload","","Preferred loading address","","DO NOT USE - for bootsect.S use only","","","initrd load address (set by boot loader)","initrd size (set by boot loader)","Boot loader hook","","","Whether kernel is relocatable or not","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Default root device number","If this field is nonzero, the root defaults to readonly.","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","64-bit physical pointer to linked list of struct setup_data","Move to high memory size (used with hooks)","The size of the setup code in 512-byte sectors.","","","","The load-low segment (<code>0x1000</code>) (obsolete)","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The size of the protected-mode code in units of 16-byte …","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boot loader identifier","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Boot protocol version supported","","","","","","Video mode control","","Boot protocol option flags",""],"i":[10,0,11,0,0,3,11,0,0,0,10,11,0,11,0,11,0,11,10,0,11,3,3,3,0,10,11,0,11,10,3,10,10,0,11,0,0,0,0,0,10,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,15,22,22,22,5,1,36,3,4,5,5,5,5,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,15,15,14,14,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,15,13,5,19,15,15,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,14,14,14,17,3,4,3,4,22,22,16,16,16,16,1,5,3,4,16,16,21,5,5,5,5,5,5,5,5,20,20,20,20,20,20,20,20,3,4,1,1,10,11,1,17,5,15,14,14,15,5,5,3,4,15,16,10,10,3,3,3,3,4,4,4,4,11,11,12,13,14,1,15,16,17,18,19,20,21,5,22,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,3,4,3,3,4,4,3,4,3,4,3,4,10,11,15,15,14,14,14,5,5,5,13,14,14,14,14,3,4,5,3,4,3,4,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,3,4,19,3,4,3,4,5,3,4,3,4,14,5,14,14,14,12,18,15,15,15,15,15,15,14,14,22,14,13,1,22,12,3,4,16,19,19,5,15,15,15,15,15,15,15,15,15,15,14,14,17,14,5,14,14,5,14,14,14,15,15,14,3,4,14,14,15,15,5,5,22,22,5,5,3,4,1,1,14,14,14,14,17,1,36,14,3,4,3,4,3,4,5,14,18,5,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,11,3,4,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,12,36,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,14,3,4,15,15,14,16,22,15,15,15,14,14,14,5],"f":"`````````````````````````````````````````````````````````````{bd}`{{}f}{{}h}``{{jb}l}{jn}{{ff}f}{{hh}h}{{ff}l}{{hh}l}3210{fA`}0{hAb}05432````{ce{}{}}00000000000000000000000000000000000``````{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{bb}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{jj}{BlBl}{{ce}l{}{}}00000000000000````{ff}{hh}{{ff}Bn}{{hh}Bn}``````{{}b}{{jA`}l}{{ff}f}{{hh}h}````{j{{C`{b}}}}``````````````{{}f}{{}h}{bd}{b{{Cb{Ad}}}}{{AdAd}Bn}{{AfAf}Bn}{{bb}Bn}````````{{fc}l{{Cf{}{{Cd{f}}}}}}{{hc}l{{Cf{}{{Cd{h}}}}}}``{{AdCh}Cj}{{AdCh}{{Cn{lCl}}}}{{fCh}Cj}000{{hCh}Cj}000{{AfCh}{{Cn{lCl}}}}{{AfCh}Cj}{{AhCh}Cj}{{AjCh}Cj}{{AlCh}Cj}{{bCh}Cj}{{AnCh}Cj}{{B`Ch}Cj}{{BbCh}Cj}{{BdCh}Cj}{{BfCh}Cj}{{BhCh}Cj}{{BjCh}Cj}{{jCh}Cj}{{BlCh}Cj}{cc{}}00000000000000000{A`{{Cb{f}}}}{Ab{{Cb{h}}}}{A`f}0{Abh}010{cf{{Cf{}{{Cd{f}}}}}}{ch{{Cf{}{{Cd{h}}}}}}{D`{{Cb{f}}}}{D`{{Cb{h}}}}{Db{{Cb{Ad}}}}{Db{{Cb{Af}}}}`````````````{{ff}l}{{hh}l}{{jbA`}l}{{ff}f}{{hh}h}{{ff}Bn}{{hh}Bn}{ce{}{}}00000000000000000{fc{}}{hc{}}`{fBn}{hBn}10`{f{{Dd{f}}}}{h{{Dd{h}}}}{f{{Df{f}}}}{h{{Df{h}}}}`````````````{Al{{Cb{f}}}}```{BlAj}{{ddAd}b}{{}Bl}`{ff}{hh}``````````````````{jD`}`{Al{{Cb{Dh}}}}{j{{Cb{Dh}}}}``````{{ff}l}{{hh}l}``````````{{ffBn}l}{{hhBn}l}{{bd}l}0{AlAh}````{bd}``{{ff}f}{{hh}h}8710````{ce{}{}}00000000000000{cDj{}}0:9{c{{Cn{e}}}{}{}}00000000000000000000000000000000000`{cDl{}}00000000000000000`54`````````{Al{{Cb{h}}}}`{{}j}","c":[22,88,279,280,366,377,378,398,405],"p":[[5,"BootE820Entry",0],[1,"usize"],[5,"LoadFlags",0],[5,"XLoadFlags",0],[5,"BootParams",0],[1,"unit"],[5,"CStr",498],[1,"u8"],[1,"u16"],[6,"E820EntryType",0],[6,"SetupDataType",0],[5,"SetupData",0],[5,"CCSetupData",0],[5,"SetupHeader",0],[5,"ScreenInfo",0],[5,"APMBiosInfo",0],[5,"ISTInfo",0],[5,"SysDescTable",0],[5,"OLPCOfwHeader",0],[5,"EFIInfo",0],[5,"EDIDInfo",0],[5,"CCBlobSevInfo",0],[1,"bool"],[1,"slice"],[6,"Option",499],[17,"Item"],[10,"IntoIterator",500],[5,"Formatter",501],[8,"Result",501],[5,"Error",501],[6,"Result",502],[1,"str"],[1,"u32"],[5,"Iter",503],[5,"IterNames",503],[5,"Ramdisk",0],[5,"String",504],[5,"TypeId",505]],"b":[[77,"impl-Flags-for-LoadFlags"],[78,"impl-LoadFlags"],[79,"impl-XLoadFlags"],[80,"impl-Flags-for-XLoadFlags"],[217,"impl-Debug-for-E820EntryType"],[218,"impl-Display-for-E820EntryType"],[219,"impl-Binary-for-LoadFlags"],[220,"impl-UpperHex-for-LoadFlags"],[221,"impl-LowerHex-for-LoadFlags"],[222,"impl-Octal-for-LoadFlags"],[223,"impl-UpperHex-for-XLoadFlags"],[224,"impl-LowerHex-for-XLoadFlags"],[225,"impl-Binary-for-XLoadFlags"],[226,"impl-Octal-for-XLoadFlags"],[227,"impl-Display-for-SetupDataType"],[228,"impl-Debug-for-SetupDataType"],[262,"impl-Flags-for-LoadFlags"],[263,"impl-LoadFlags"],[264,"impl-Flags-for-XLoadFlags"],[265,"impl-XLoadFlags"]]}],\
["oak_proto_rust",{"doc":"","t":"CFFCNNNNNNNNNNCNNNNNNNNNNCNNOOCOOOOOOOOOOOOOOOONNNNNNNNCFFFPFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFPFFFFFFFFFFFFPFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFPFOOOOOOOOOOOOOOOOONCOOOOOOCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOCCCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOCOOOOOOOOOOOOOOOOOOOOOONOOOOOOOOOOOONONOOOCCOOOOOOOOOOOOOOOOOOOOOCNNOOOOOOOOOOONOOOOOOOOOOOOOOOOCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOPGPPNNNNNNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPPPPGNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPGPPPNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNNPGPPNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPPPPGNNNNNNNNNNNNNNNCFFFFFONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNOOONOONNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFKFFFFFCMNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNOMNNCMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNOOCNNNMNNMNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCOFFNNNNNNNNNNOONNNNNNNNNNNNONNNNNNNNOFPGPPFFFCNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONOOONNONONNNNNNNNNNNNNNNNNNNNNCOGPPNNNNNNNNNNNNNNNFNNNNNNNNNNNNONONONONONONONONONONONONONONNONONONONONNNPGPNNNNNNNNNNNNNNNFNNNNNNNNNNNONNNNOFFFFKFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNCNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOPPGNNNNNNNNNNNNNNNNNNNNNCFFFFFFFFFKFFFFFFFOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOMNNMNNMNNONNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOMNNCFFFFFFFFFFFFFFFFOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOCCOONNNNNNNNNNNNNNNNOOOCOOCCCOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPNNNNNNNNNNNNNNNGPNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNNNN","n":["oak","HexDigest","RawDigest","attestation","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","crypto","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","functions","into","into","psha2","psha2","session","sha1","sha1","sha2_256","sha2_256","sha2_384","sha2_384","sha2_512","sha2_512","sha3_224","sha3_224","sha3_256","sha3_256","sha3_384","sha3_384","sha3_512","sha3_512","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","v1","AmdAttestationReport","AmdSevExpectedValues","AmdSevReferenceValues","AmdSevSnp","ApplicationKeys","ApplicationLayerData","ApplicationLayerEndorsements","ApplicationLayerExpectedValues","ApplicationLayerReferenceValues","AttestationResults","BinaryReferenceValue","CbData","CbEndorsements","CbExpectedValues","CbReferenceValues","CertificateAuthority","ContainerLayerData","ContainerLayerEndorsements","ContainerLayerExpectedValues","ContainerLayerReferenceValues","DiceData","Digests","EndorsementReferenceValue","Endorsements","Event","EventData","EventExpectedValues","EventLog","EventReferenceValues","Evidence","ExpectedDigests","ExpectedRegex","ExpectedStringLiterals","ExpectedValues","ExtractedEvidence","FakeAttestationReport","FileReferenceValue","FirmwareAttachment","InsecureExpectedValues","InsecureReferenceValues","IntelTdx","IntelTdxAttestationReport","IntelTdxExpectedValues","IntelTdxReferenceValues","KernelAttachment","KernelBinaryReferenceValue","KernelDigests","KernelExpectedValues","KernelLayerData","KernelLayerEndorsements","KernelLayerExpectedValues","KernelLayerReferenceValues","LayerEvidence","None","OakContainersData","OakContainersEndorsements","OakContainersExpectedValues","OakContainersReferenceValues","OakRestrictedKernelData","OakRestrictedKernelEndorsements","OakRestrictedKernelExpectedValues","OakRestrictedKernelReferenceValues","OakStandaloneData","OakStandaloneEndorsements","RawDigests","ReferenceValues","Regex","RegexReferenceValue","RootLayerData","RootLayerEndorsements","RootLayerEvidence","RootLayerExpectedValues","RootLayerReferenceValues","SkipVerification","Stage0Measurements","StringLiterals","StringReferenceValue","SystemLayerData","SystemLayerEndorsements","SystemLayerExpectedValues","SystemLayerReferenceValues","TcbVersion","TeePlatform","TextExpectedValue","TextReferenceValue","TransparentReleaseEndorsement","Unspecified","VerificationSkipped","acpi","acpi","acpi","acpi","acpi_digest","allow_debug","allow_debug","amd_sev","amd_sev","application_keys","application_layer","application_layer","application_layer","application_layer","application_layer","application_layer","application_layer","as_str_name","attestation_results","binary","binary","binary","binary","binary","binary","binary_reference_value","boot_loader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bundle","bundle","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","config","config","config","configs","configuration","configuration","configuration","configuration","configuration","container_layer","container_layer","container_layer","container_layer","current_tcb","debug","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","digests","digests","digests","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key","encryption_public_key","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","endorser_public_key","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","event","event","event","event","events","evidence","evidence_values","expected_digests","expected_values","extracted_evidence","extracted_evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_str_name","group_encryption_public_key_certificate","group_signing_public_key_certificate","hardware_id","hash","image","image","image","init_ram_fs","init_ram_fs","init_ram_fs","init_ram_fs","initial_measurement","insecure","insecure","intel_tdx","intel_tdx","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid","kernel","kernel","kernel","kernel_binary_reference_value","kernel_cmd_line","kernel_cmd_line","kernel_cmd_line","kernel_cmd_line_regex","kernel_cmd_line_text","kernel_cmd_line_text","kernel_cmdline","kernel_image","kernel_image","kernel_image","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_measurement","kernel_raw_cmd_line","kernel_raw_cmd_line","kernel_setup_data","kernel_setup_data","layers","memory_map","memory_map","memory_map","memory_map","memory_map_digest","microcode","min_tcb_version","min_tcb_version","partial_cmp","path","platform","platform","ram_disk_digest","reason","reference_values","regex_reference_value","rekor_log_entry","rekor_public_key","remote_attestation_report","report","report_data","report_data","report_data","reported_tcb","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer","root_layer_data","set_platform","set_status","setup_data","setup_data","setup_data","setup_data_digest","signing_public_key","signing_public_key","signing_public_key_certificate","snp","stage0","stage0","stage0_expected","status","status","subject","system_image","system_image","system_image","system_image","system_layer","system_layer","system_layer","system_layer","system_layer","system_layer","system_layer","tag","tee","tee_certificate","text_expected_value","text_reference_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type","type","type","type","type","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_url","value","value","value","value","values","vmpl","GenericFailure","Status","Success","Unspecified","as_str_name","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","from_i32","from_str_name","hash","into","is_valid","partial_cmp","to_owned","try_from","try_from","try_into","type_id","Digests","Endorsement","Skip","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","OakContainers","OakRestrictedKernel","Standalone","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Digests","Skipped","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","EvidenceValues","OakContainers","OakRestrictedKernel","Standalone","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Digests","Endorsement","Skip","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Regex","Skip","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Fake","Report","SevSnp","Tdx","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Regex","Skipped","StringLiterals","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Endorsement","Regex","Skip","StringLiterals","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","OakFunctions","OakFunctionsAsyncClient","OakFunctionsClient","OakFunctionsServer","ReserveRequest","ReserveResponse","abi","abort_next_lookup_data","abort_next_lookup_data","abort_next_lookup_data","additional_entries","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","constant_response_size","data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_request","encrypted_response","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data_request","finish_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","handle_user_request","handle_user_request","handle_user_request","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","items","key","lookup_data","new","new","new","reserve","reserve","reserve","stream_lookup_data","stream_lookup_data","stream_lookup_data","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wasm","wasm_module","ConfigurationReport","ServerPolicy","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","constant_processing_time_ms","constant_response_size_bytes","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","policy","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wasm_hash","ApplicationConfig","HandlerNative","HandlerType","HandlerUnspecified","HandlerWasm","TcpCommunicationChannel","VsockCommunicationChannel","WasmtimeConfig","application_config","as_str_name","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","communication_channel","default","default","default","default","default","dynamic_memory_guard_size","dynamic_memory_guard_size","dynamic_memory_reserved_for_growth","dynamic_memory_reserved_for_growth","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_i32","from_str_name","handler_type","handler_type","hash","into","into","into","into","into","is_valid","memory_init_cow","memory_init_cow","partial_cmp","pooling_strategy","port","port","set_handler_type","static_memory_guard_size","static_memory_guard_size","static_memory_maximum_size","static_memory_maximum_size","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wasmtime_config","wasmtime_config","CommunicationChannel","TcpChannel","VsockChannel","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","PoolingAllocationConfig","borrow","borrow_mut","clear","clone","clone_into","default","encoded_len","eq","fmt","from","into","linear_memory_keep_resident","linear_memory_keep_resident","max_component_instance_size","max_component_instance_size","max_core_instance_size","max_core_instance_size","max_core_instances_per_component","max_core_instances_per_component","max_memories_per_component","max_memories_per_component","max_memories_per_module","max_memories_per_module","max_memory_protection_keys","max_memory_protection_keys","max_tables_per_component","max_tables_per_component","max_tables_per_module","max_tables_per_module","max_unused_warm_slots","max_unused_warm_slots","memory_pages","memory_pages","memory_protection_keys","memory_protection_keys","table_elements","table_elements","table_keep_resident","table_keep_resident","to_owned","total_component_instances","total_component_instances","total_core_instances","total_core_instances","total_memories","total_memories","total_stacks","total_stacks","total_tables","total_tables","try_from","try_into","type_id","Chunk","Data","LengthDelimitedEntries","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Entry","borrow","borrow_mut","clear","clone","clone_into","default","encoded_len","eq","fmt","from","into","key","to_owned","try_from","try_into","type_id","value","EchoAndPanicRequest","EchoAndPanicResponse","LookupRequest","LookupResponse","TestModule","TestModuleAsyncClient","TestModuleClient","TestModuleServer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","data","data","default","default","default","default","echo_and_panic","echo_and_panic","echo_and_panic","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","invoke","keys","lookup","lookup","lookup","lookup_request","mode","mode","new","new","new","set_mode","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","Batch","Individual","Mode","as_str_name","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","from_i32","from_str_name","hash","into","is_valid","partial_cmp","to_owned","try_from","try_from","try_into","type_id","v1","BytesValue","LogRequest","LogResponse","LookupDataMultiRequest","LookupDataMultiResponse","LookupDataRequest","LookupDataResponse","ReadRequestRequest","ReadRequestResponse","StdWasmApi","StdWasmApiAsyncClient","StdWasmApiClient","StdWasmApiServer","TestRequest","TestResponse","WriteResponseRequest","WriteResponseResponse","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","echo","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","found","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","key","keys","log","log","log","lookup_data","lookup_data","lookup_data","lookup_data_multi","lookup_data_multi","lookup_data_multi","message","new","new","new","read_request","read_request","read_request","test","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","write_response","write_response","write_response","v1","AttestRequest","AttestResponse","AttestationBinding","AttestationBindingMessage","EndorsedEvidence","GetEndorsedEvidenceRequest","GetEndorsedEvidenceResponse","HandshakeRequest","HandshakeResponse","InvokeRequest","InvokeResponse","NoiseHandshakeMessage","RequestWrapper","ResponseWrapper","SessionRequest","SessionResponse","attestation_binding","attestation_binding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_request","encrypted_response","endorsed_evidence","endorsed_evidence","endorsed_evidence","endorsements","endorsements_hash","ephemeral_public_key","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","handshake_hash","handshake_request","handshake_response","handshake_type","handshake_type","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","peer_reference_values_hash","request","request","request_wrapper","response","response","response_wrapper","session_request","session_response","signature","static_public_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","HandshakeType","NoiseHandshakeMessage","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","HandshakeType","NoiseHandshakeMessage","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","GetEndorsedEvidenceRequest","InvokeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","GetEndorsedEvidenceResponse","InvokeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","AttestRequest","Ciphertext","HandshakeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","AttestResponse","Ciphertext","HandshakeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"oak_proto_rust"],[1,"oak_proto_rust::oak"],[55,"oak_proto_rust::oak::attestation"],[56,"oak_proto_rust::oak::attestation::v1"],[1609,"oak_proto_rust::oak::attestation::v1::attestation_results"],[1634,"oak_proto_rust::oak::attestation::v1::binary_reference_value"],[1653,"oak_proto_rust::oak::attestation::v1::endorsements"],[1673,"oak_proto_rust::oak::attestation::v1::expected_digests"],[1691,"oak_proto_rust::oak::attestation::v1::expected_values"],[1710,"oak_proto_rust::oak::attestation::v1::extracted_evidence"],[1730,"oak_proto_rust::oak::attestation::v1::kernel_binary_reference_value"],[1749,"oak_proto_rust::oak::attestation::v1::reference_values"],[1768,"oak_proto_rust::oak::attestation::v1::regex_reference_value"],[1786,"oak_proto_rust::oak::attestation::v1::root_layer_data"],[1805,"oak_proto_rust::oak::attestation::v1::text_expected_value"],[1824,"oak_proto_rust::oak::attestation::v1::text_reference_value"],[1844,"oak_proto_rust::oak::crypto"],[1845,"oak_proto_rust::oak::crypto::v1"],[1935,"oak_proto_rust::oak::functions"],[2228,"oak_proto_rust::oak::functions::abi"],[2264,"oak_proto_rust::oak::functions::config"],[2373,"oak_proto_rust::oak::functions::config::application_config"],[2391,"oak_proto_rust::oak::functions::config::wasmtime_config"],[2445,"oak_proto_rust::oak::functions::extend_next_lookup_data_request"],[2463,"oak_proto_rust::oak::functions::lookup_data"],[2481,"oak_proto_rust::oak::functions::testing"],[2591,"oak_proto_rust::oak::functions::testing::lookup_request"],[2615,"oak_proto_rust::oak::functions::wasm"],[2616,"oak_proto_rust::oak::functions::wasm::v1"],[2886,"oak_proto_rust::oak::session"],[2887,"oak_proto_rust::oak::session::v1"],[3171,"oak_proto_rust::oak::session::v1::handshake_request"],[3188,"oak_proto_rust::oak::session::v1::handshake_response"],[3205,"oak_proto_rust::oak::session::v1::request_wrapper"],[3223,"oak_proto_rust::oak::session::v1::response_wrapper"],[3241,"oak_proto_rust::oak::session::v1::session_request"],[3260,"oak_proto_rust::oak::session::v1::session_response"],[3279,"core::fmt"],[3280,"core::fmt"],[3281,"core::any"],[3282,"core::cmp"],[3283,"core::option"],[3284,"core::hash"],[3285,"prost::error"],[3286,"alloc::string"],[3287,"bytes::buf::buf_mut"],[3288,"prost::encoding"],[3289,"prost::encoding"],[3290,"micro_rpc::status"],[3291,"micro_rpc"],[3292,"micro_rpc"],[3293,"alloc::vec"]],"d":["","Similar to RawDigest, but contains hex-encoded hashes for …","Contains various digest formats for the same underlying …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Values extracted from an AMD SEV-SNP attestation report.","","","","Keys used by the application to derive encryption session …","Values extracted from the evidence that represents an …","","The expected binary and configuration digests for an …","Represents an application running under Oak Restricted …","Represents a verification result. Can be extended to …","","Reserved for future use.","","","","Message for passing embedded certificate authority …","Values extracted from the evidence that represents the …","","The expected bundle and configuration digests for a …","","Message that is sent between DICE layers.","Verifies that the field contains at least one of the given …","Verifies the transparency log entry, including signatures …","Endorsement contains statements that some entity (e.g. a …","Represents an event intended for inclusion in attestation. …","Values extracted from the evidence that represents an …","Represents digest of an event.","A sequence of Events intended for inclusion in attestation …","Represents digest of an event.","Attestation Evidence used by the client to the identity of …","","","","","Evidence values extracted from attestation evidence during …","Values extracted from a fake attestation report when not …","Reference value for a file including its digests.","The Transparent Release attachment for Oak Stage 0. …","","","","Values extracted from an Intel TDX attestation report.","","","The Transparent Release attachment for Oak Containers …","Follows the lines of <code>BinaryReferenceValue</code>, but provides a …","Similar to the <code>Digests</code> message, but allows to specify …","The expected values for kernel image and setup data, …","Values extracted from the the kernel layer evidence, as …","","Reference values of the kernel layer, as measured by …","Reference values of the kernel layer, as measured by …","DICE layer evidence containing a certificate signed by the …","","Values extracted from the evidence for an Oak Containers …","","","","Values extracted from the evidence for a restricted kernel …","","","","Oak Standalone currently skips all attestation","There are currently no endorsements in standalone mode. …","","","","","Values extracted from the root layer evidence.","","Evidence generated by the Layer0.","","","","All the related measurements for Stage 0.","A match in at least one value is considered a success. At …","Verifies that a particular string is equal to at least one …","Values extracted from the evidence that represents the Oak …","","The expected binary digests for a system layer image.","","The versions of the components in the AMD SEV-SNP platform …","This proto defines the layered DICE Attestation Evidence.","","Reference value to match text via endorsement, or directly …","Endorsement for binaries from the Transparent Release …","","","","","","Measured digests of the commands for building the ACPI …","ACPI table generation digest","If true, will skip the check that the TEE is not in debug …","If true, will skip the check that the TEE is not in debug …","Switches between AMD SEV-SNP and Intel TDX based on …","Switches between AMD SEV-SNP and Intel TDX based on …","Application keys signed by the penultimate layer’s ECA …","","","","","","","","String value of the enum field names used in the ProtoBuf …","Nested message and enum types in <code>AttestationResults</code>.","Verifies the application binary based on endorsement.","Verifies the container binary based on endorsement.","","","The allowable digest values for an application binary.","Measurement RawDigest of the application binary.","Nested message and enum types in <code>BinaryReferenceValue</code>.","The current security version number (SVN) of the secure …he allowable digest values for a container bundle.","Measurement RawDigest of the container bundlehe allowable digest values for a configuration passed …","Measurement RawDigest of the application configuration.","Measurement RawDigest of the configuration used by the …","Maps number of vCPUs to measurement of the modified …","Verifies configuration with respect to the application …","Verifies configuration with respect to the container …","","","The allowable digest values for a configuration passed to …","","","","","This represents the actual, up-to-date TCB version of the …","Whether the VM was booted in debug mode.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allowable digests for the file.","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the verified public key for encryption whenever …","Contains the public key for encryption. The key is …","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","The endorser’s public verifying key for signature …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Measurement RawDigest of an event.","","","","Nested message and enum types in <code>ExpectedDigests</code>.","Nested message and enum types in <code>ExpectedValues</code>.","Nested message and enum types in <code>ExtractedEvidence</code>.","Contains the evidence values whenever the status indicates …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","Creates an enum from field names used in the ProtoBuf …","Certificate signing the group encryption public key as …","Certificate signing the group signing public key as part …","The hardware ID of the AMD SEV-SNP platform that generated …","","Digest of the kernel image part of the bzImage.","Contains admissible digests for the kernel image part of …","Allowable digests for the image.","Verifies the stage1 binary if running as Oak Containers.","","Verifies the stage1 binary if running as Oak Containers.","Measured digests of the initial RAM disk.","The measurement of the initial memory and CPU state of the …","When insecure is set no verification of the TEE platform …","When insecure is set no verification of the TEE platform …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","Verifies the kernel based on endorsement.","","Verifies the kernel based on endorsement.","Nested message and enum types in <code>KernelBinaryReferenceValue</code>…","","","Measured digests of the command-line that was passed to …","","Verifies the kernel command line, i.e. the parameters …","Verifies the kernel command line, i.e. the parameters …","Kernel Command line.","","Field is deprecated and kept only for backwards …","Measured digests of the image part of the kernel.","","","","","","","","","","","","Kernel digest.","Returns the value of <code>kernel_raw_cmd_line</code>, or the default …","Command-line that was passed to the kernel during startup. …","Fields are deprecated and kept only for backwards …","Measured digests of the setup data part of the kernel.","Layer1..LayerN-1 attestation evidence.","","","","Measured digests of the physical memory map.","E820 table digest.","The lowest current patch level of all the CPU cores.","Minimum accepted versions of all TCB components.","Minimum accepted versions of all TCB components.","","Absolute path to the file in question, or just the file …","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","Initial RAM disk digest.","Provides the reason why verification did not pass, on …","Nested message and enum types in <code>ReferenceValues</code>.","Nested message and enum types in <code>RegexReferenceValue</code>.","The log entry as proof of inclusion of the endorsement …","Rekor’s public verifying key for log entry verification. …","TEE-specific attestation report acting as a non-standard …","","The custom bytes that were passed to the report when it …","The custom bytes that were passed to the report when it …","The custom bytes that were passed to the report when it …","This is the TCB version reported in attestation reports. …","Layer0 attestation evidence.","","","","","","","","","","","","","Nested message and enum types in <code>RootLayerData</code>.","Sets <code>platform</code> to the provided enum value.","Sets <code>status</code> to the provided enum value.","Digest of the setup data part of the bzImage.","Contains admissible digests for the setup data part of the …","Allowable digests for the setup data.","Kernel setup data digest.","Contains the verified public key for signing whenever the …","Contains the public key for signing. The key is serialized …","Certificate signing the signing public key.","The current SVN of the SNP firmware.","Verifies the stage0 binary implicitly contained in the …","Endorsement of the Stage0 binary.","","Returns the enum value of <code>status</code>, or the default if the …","Indicates whether the verification passed and perhaps more.","The data hashed as endorsement subject can be inlined here …","Verifies the system image binary based on endorsement.","","The allowable digest values for a system layer image.","Measurement RawDigest of the system image.","","","","","","","","Represents what is contained in the event. For example, …","The current SVN of the PSP operating system.","The serialized TEE certificate(s). The details of the …","Nested message and enum types in <code>TextExpectedValue</code>.","Nested message and enum types in <code>TextReferenceValue</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The VM Protection Leve (VMPL) that was active when the …","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Status</code>, or <code>None</code> if <code>value</code> is not a …","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Status</code>.","","","","","","","Explicitly verifies digests if the client has them.","Verifies the endorsement of the underlying binary.","Deliberately skips a verification step, rather than …","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","One or more digests that should be considered a valid …","If the reference value was set to SkipVerification, we …","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","Values extracted from a fake report when not running in a …","","Values extracted from an AMD SEV-SNP attestation report.","Values extracted from an Intel TDX attestation report.","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","If the reference value was set to SkipVerification, we …","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nested message and enum types in …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The client can check the configuration report for the …","/ Server-side policy describing limits on the size of the …","","","","","","","","","","","A fixed response time, in milliseconds.","A fixed size for responses returned by the trusted runtime.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The validated server-side policy.","","","","","","","","","Hash of the loaded Wasm module.","","Interpret the module as a native .so file. Only supported …","","Defaults to WASM.","Use a wasm interpreter to load the module.","","","Settings specific to the Wasmtime engine.","Nested message and enum types in <code>ApplicationConfig</code>.","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","Communication channel parameters. The default behaviour …","","","","","","Returns the value of <code>dynamic_memory_guard_size</code>, or the …","…","Returns the value of <code>dynamic_memory_reserved_for_growth</code>, …","…","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>HandlerType</code>, or <code>None</code> if <code>value</code> is not …","Creates an enum from field names used in the ProtoBuf …","Returns the enum value of <code>handler_type</code>, or the default if …","How to load the provided module.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>HandlerType</code>.","Returns the value of <code>memory_init_cow</code>, or the default value …","…","","If specified, switches to a pooling allocation strategy. …","Port to listen on. If not specified, defaults to 8080.","Port to listen on. If not specified, defaults to 8080.","Sets <code>handler_type</code> to the provided enum value.","Returns the value of <code>static_memory_guard_size</code>, or the …","…","Returns the value of <code>static_memory_maximum_size</code>, or the …","…","","","","","","","","","","","","","","","","","","","","","","Nested message and enum types in <code>WasmtimeConfig</code>.","Configuration for the Wasmtime engine, if that is used. …","Communication channel parameters. The default behaviour …","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","See …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the value of <code>linear_memory_keep_resident</code>, or the …","","Returns the value of <code>max_component_instance_size</code>, or the …","","Returns the value of <code>max_core_instance_size</code>, or the …","","Returns the value of <code>max_core_instances_per_component</code>, or …","","Returns the value of <code>max_memories_per_component</code>, or the …","","Returns the value of <code>max_memories_per_module</code>, or the …","","Returns the value of <code>max_memory_protection_keys</code>, or the …","","Returns the value of <code>max_tables_per_component</code>, or the …","","Returns the value of <code>max_tables_per_module</code>, or the default …","","Returns the value of <code>max_unused_warm_slots</code>, or the default …","","Returns the value of <code>memory_pages</code>, or the default value if …","","Returns the value of <code>memory_protection_keys</code>, or the …","Will set to <code>auto</code> if enabled.","Returns the value of <code>table_elements</code>, or the default value …","","Returns the value of <code>table_keep_resident</code>, or the default …","","","Returns the value of <code>total_component_instances</code>, or the …","","Returns the value of <code>total_core_instances</code>, or the default …","","Returns the value of <code>total_memories</code>, or the default value …","","Returns the value of <code>total_stacks</code>, or the default value if …","","Returns the value of <code>total_tables</code>, or the default value if …","","","","","","","Experimental: a serialized array of varint-prefixed …","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","An individual entry to be made available for lookup to an …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Echo the bytes back, and then panic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Nested message and enum types in <code>LookupRequest</code>.","Returns the enum value of <code>mode</code>, or the default if the …","","","","","Sets <code>mode</code> to the provided enum value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Mode</code>, or <code>None</code> if <code>value</code> is not a valid …","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Mode</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to echo the message back. If false, the response …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If true, the value was found in the store. This is useful …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Request message for the remote attestation.","Request message for the remote attestation.","Message that binds the Noise session (and optionally …","Message to be signed as part of the attestation binding.","Endorsed evidence contains an attestation evidence …","","","Request message for the crypto handshake request needed to …","Response message for the crypto handshake request needed …","","","Noise handshake message containing fields for all …","","","Request message for the Oak protocol attested secure …","Response message for the Oak protocol attested secure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Payload encrypted with the current chaining key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","","","","","","Noise Protocol ephemeral public key ‘e’. &lt;…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Nested message and enum types in <code>HandshakeRequest</code>.","Nested message and enum types in <code>HandshakeResponse</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Nested message and enum types in <code>RequestWrapper</code>.","","","Nested message and enum types in <code>ResponseWrapper</code>.","Nested message and enum types in <code>SessionRequest</code>.","Nested message and enum types in <code>SessionResponse</code>.","Signature of the serialized <code>AttestationBindingMessage</code> …","Noise Protocol static public key ‘s’. &lt;…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[0,0,0,0,1,3,1,3,1,3,1,3,1,3,0,1,3,1,3,1,3,1,3,1,3,0,1,3,1,3,0,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,37,48,71,86,57,33,64,32,70,17,42,44,52,76,78,91,93,10,0,39,40,50,51,74,87,0,20,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,73,89,19,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,10,73,87,89,12,39,40,50,51,74,43,53,77,92,83,83,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,26,36,61,15,18,14,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,80,81,16,46,46,0,22,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,41,58,75,90,59,19,81,0,0,0,80,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,10,10,16,16,83,10,13,24,63,37,48,71,86,83,32,70,32,70,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,10,37,48,71,0,37,48,86,37,37,71,57,37,48,86,42,43,44,52,53,76,77,78,91,92,93,57,86,86,37,86,17,37,48,71,86,57,20,33,64,10,26,14,14,57,80,0,0,46,22,14,82,83,84,85,83,17,42,43,44,52,53,54,76,77,78,91,92,93,0,14,80,13,24,63,57,80,81,16,20,33,47,64,80,80,46,38,49,72,88,43,44,53,77,78,92,93,58,20,47,0,0,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,23,25,30,31,45,56,62,69,79,12,13,14,15,16,17,10,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,57,28,29,67,68,27,83,99,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,102,102,102,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,108,108,108,108,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,0,0,0,0,120,118,119,120,121,122,118,119,120,121,122,120,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,120,121,121,118,118,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,129,131,143,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,133,134,135,136,137,138,139,140,141,142,127,126,143,144,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,0,133,139,133,134,135,136,137,138,139,140,141,142,127,126,143,144,133,134,135,136,137,138,139,140,141,142,127,126,143,144,135,136,133,134,135,136,137,138,139,140,141,142,127,126,143,144,134,125,129,131,0,125,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,125,129,131,125,129,131,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,145,138,137,0,129,131,145,125,129,131,125,129,131,0,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,129,131,133,134,135,136,137,138,139,140,141,142,127,126,143,144,145,137,0,133,0,0,149,150,149,150,149,150,149,150,149,150,150,150,149,150,149,150,149,150,149,150,149,150,149,150,149,149,150,149,150,149,150,149,150,149,0,151,0,151,151,0,0,0,0,151,152,153,154,155,151,152,153,154,155,151,152,153,154,155,152,153,154,155,151,152,153,154,155,151,151,155,152,153,154,155,151,154,154,154,154,152,153,154,155,152,153,154,155,151,152,153,154,155,151,152,153,154,155,151,151,151,155,155,151,152,153,154,155,151,151,154,154,151,154,152,153,155,154,154,154,154,152,153,154,155,151,152,153,154,155,151,151,152,153,154,155,151,152,153,154,155,151,0,155,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,159,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,0,0,0,0,0,0,0,167,168,161,162,163,164,165,167,168,161,162,163,164,165,161,162,163,164,161,162,163,164,165,161,162,163,164,165,163,164,161,162,163,164,166,167,168,161,162,163,164,161,162,163,164,161,162,163,164,167,168,161,162,163,164,165,167,168,161,162,163,164,165,165,161,166,167,168,0,161,161,167,168,165,161,161,162,163,164,165,167,168,161,162,163,164,165,167,168,161,162,163,164,165,167,168,161,162,163,164,165,162,169,169,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,172,180,181,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,170,171,172,173,174,175,176,177,178,179,180,181,182,170,171,172,173,174,175,176,177,178,179,180,181,182,183,170,171,172,173,174,175,176,177,178,179,180,181,182,183,170,171,172,173,174,175,176,177,178,179,180,181,182,180,170,171,172,173,174,175,176,177,178,179,180,181,182,170,171,172,173,174,175,176,177,178,179,180,181,182,170,171,172,173,174,175,176,177,178,179,180,181,182,182,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,176,178,184,185,186,184,185,186,184,185,186,174,185,186,183,184,185,186,184,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,170,171,172,173,174,175,176,177,178,179,180,181,182,183,177,182,179,184,185,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,200,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,196,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,189,194,195,187,197,196,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,197,0,0,199,200,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,197,192,201,0,193,202,0,0,0,198,196,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,0,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,205,205,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,207,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208],"f":"````{ce{}{}}000{bd}{fd}{bb}{ff}{{ce}d{}{}}0`{{}b}{{}f}{bh}{fh}{{bb}j}{{ff}j}{{bl}n}{{fl}n}{cc{}}0`>>```````````````````>>{c{{A`{e}}}{}{}}000{cAb{}}0``````````````````````````````````````````````````````````````````````````````````````````````````````````{AdAf}`````````{ce{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```{Ahd}{Ajd}{Ald}{And}{B`d}{Bbd}{Bdd}{Bfd}{Bhd}{Bjd}{Bld}{Bnd}{C`d}{Cbd}{Cdd}{Cfd}{Chd}{Cjd}{Cld}{Cnd}{D`d}{Dbd}{Ddd}{Dfd}{Dhd}{Djd}{Dld}{Dnd}{E`d}{Ebd}{Edd}{Efd}{Ehd}{Ejd}{Eld}{End}{F`d}{Fbd}{Fdd}{Ffd}{Fhd}{Fjd}{Fld}{Fnd}{G`d}{Gbd}{Gdd}{Gfd}{Ghd}{Gjd}{Gld}{Gnd}{H`d}{Hbd}{Hdd}{Hfd}{Hhd}{Hjd}{Hld}{Hnd}{I`d}{Ibd}{Idd}{Ifd}{Ihd}{Ijd}{Ild}{Ind}{J`d}{Jbd}{Jdd}{Jfd}{Jhd}{Jjd}{Jld}{Jnd}{K`d}{Kbd}{Kdd}{Kfd}{Khd}{Kjd}{Kld}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{AdAd}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{C`C`}{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{ClCl}{CnCn}{D`D`}{DbDb}{DdDd}{DfDf}{DhDh}{DjDj}{DlDl}{DnDn}{E`E`}{EbEb}{EdEd}{EfEf}{EhEh}{EjEj}{ElEl}{EnEn}{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{FlFl}{FnFn}{G`G`}{GbGb}{GdGd}{GfGf}{GhGh}{GjGj}{GlGl}{GnGn}{H`H`}{HbHb}{HdHd}{HfHf}{HhHh}{HjHj}{HlHl}{HnHn}{I`I`}{IbIb}{IdId}{IfIf}{IhIh}{IjIj}{IlIl}{InIn}{J`J`}{JbJb}{JdJd}{JfJf}{JhJh}{JjJj}{JlJl}{JnJn}{K`K`}{KbKb}{KdKd}{KfKf}{KhKh}{KjKj}{KlKl}{{ce}d{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{{AdAd}Kn}```````````````{{}Ah}{{}Aj}{{}Al}{{}An}{{}B`}{{}Bb}{{}Ad}{{}Bd}{{}Bf}{{}Bh}{{}Bj}{{}Bl}{{}Bn}{{}C`}{{}Cb}{{}Cd}{{}Cf}{{}Ch}{{}Cj}{{}Cl}{{}Cn}{{}D`}{{}Db}{{}Dd}{{}Df}{{}Dh}{{}Dj}{{}Dl}{{}Dn}{{}E`}{{}Eb}{{}Ed}{{}Ef}{{}Eh}{{}Ej}{{}El}{{}En}{{}F`}{{}Fb}{{}Fd}{{}Ff}{{}Fh}{{}Fj}{{}Fl}{{}Fn}{{}G`}{{}Gb}{{}Gd}{{}Gf}{{}Gh}{{}Gj}{{}Gl}{{}Gn}{{}H`}{{}Hb}{{}Hd}{{}Hf}{{}Hh}{{}Hj}{{}Hl}{{}Hn}{{}I`}{{}Ib}{{}Id}{{}If}{{}Ih}{{}Ij}{{}Il}{{}In}{{}J`}{{}Jb}{{}Jd}{{}Jf}{{}Jh}{{}Jj}{{}Jl}{{}Jn}{{}K`}{{}Kb}{{}Kd}{{}Kf}{{}Kh}{{}Kj}{{}Kl}``````{Ahh}{Ajh}{Alh}{Anh}{B`h}{Bbh}{Bdh}{Bfh}{Bhh}{Bjh}{Blh}{Bnh}{C`h}{Cbh}{Cdh}{Cfh}{Chh}{Cjh}{Clh}{Cnh}{D`h}{Dbh}{Ddh}{Dfh}{Dhh}{Djh}{Dlh}{Dnh}{E`h}{Ebh}{Edh}{Efh}{Ehh}{Ejh}{Elh}{Enh}{F`h}{Fbh}{Fdh}{Ffh}{Fhh}{Fjh}{Flh}{Fnh}{G`h}{Gbh}{Gdh}{Gfh}{Ghh}{Gjh}{Glh}{Gnh}{H`h}{Hbh}{Hdh}{Hfh}{Hhh}{Hjh}{Hlh}{Hnh}{I`h}{Ibh}{Idh}{Ifh}{Ihh}{Ijh}{Ilh}{Inh}{J`h}{Jbh}{Jdh}{Jfh}{Jhh}{Jjh}{Jlh}{Jnh}{K`h}{Kbh}{Kdh}{Kfh}{Khh}{Kjh}{Klh}```````{{AhAh}j}{{AjAj}j}{{AlAl}j}{{AnAn}j}{{B`B`}j}{{BbBb}j}{{AdAd}j}{{BdBd}j}{{BfBf}j}{{BhBh}j}{{BjBj}j}{{BlBl}j}{{BnBn}j}{{C`C`}j}{{CbCb}j}{{CdCd}j}{{CfCf}j}{{ChCh}j}{{CjCj}j}{{ClCl}j}{{CnCn}j}{{D`D`}j}{{DbDb}j}{{DdDd}j}{{DfDf}j}{{DhDh}j}{{DjDj}j}{{DlDl}j}{{DnDn}j}{{E`E`}j}{{EbEb}j}{{EdEd}j}{{EfEf}j}{{EhEh}j}{{EjEj}j}{{ElEl}j}{{EnEn}j}{{F`F`}j}{{FbFb}j}{{FdFd}j}{{FfFf}j}{{FhFh}j}{{FjFj}j}{{FlFl}j}{{FnFn}j}{{G`G`}j}{{GbGb}j}{{GdGd}j}{{GfGf}j}{{GhGh}j}{{GjGj}j}{{GlGl}j}{{GnGn}j}{{H`H`}j}{{HbHb}j}{{HdHd}j}{{HfHf}j}{{HhHh}j}{{HjHj}j}{{HlHl}j}{{HnHn}j}{{I`I`}j}{{IbIb}j}{{IdId}j}{{IfIf}j}{{IhIh}j}{{IjIj}j}{{IlIl}j}{{InIn}j}{{J`J`}j}{{JbJb}j}{{JdJd}j}{{JfJf}j}{{JhJh}j}{{JjJj}j}{{JlJl}j}{{JnJn}j}{{K`K`}j}{{KbKb}j}{{KdKd}j}{{KfKf}j}{{KhKh}j}{{KjKj}j}{{KlKl}j}```````````{{Ahl}n}{{Ajl}n}{{All}n}{{Anl}n}{{B`l}n}{{Bbl}n}{{Adl}n}{{Bdl}n}{{Bfl}n}{{Bhl}n}{{Bjl}n}{{Bll}n}{{Bnl}n}{{C`l}n}{{Cbl}n}{{Cdl}n}{{Cfl}n}{{Chl}n}{{Cjl}n}{{Cll}n}{{Cnl}n}{{D`l}n}{{Dbl}n}{{Ddl}n}{{Dfl}n}{{Dhl}n}{{Djl}n}{{Dll}n}{{Dnl}n}{{E`l}n}{{Ebl}n}{{Edl}n}{{Efl}n}{{Ehl}n}{{Ejl}n}{{Ell}n}{{Enl}n}{{F`l}n}{{Fbl}n}{{Fdl}n}{{Ffl}n}{{Fhl}n}{{Fjl}n}{{Fll}n}{{Fnl}n}{{G`l}n}{{Gbl}n}{{Gdl}n}{{Gfl}n}{{Ghl}n}{{Gjl}n}{{Gll}n}{{Gnl}n}{{H`l}n}{{Hbl}n}{{Hdl}n}{{Hfl}n}{{Hhl}n}{{Hjl}n}{{Hll}n}{{Hnl}n}{{I`l}n}{{Ibl}n}{{Idl}n}{{Ifl}n}{{Ihl}n}{{Ijl}n}{{Ill}n}{{Inl}n}{{J`l}n}{{Jbl}n}{{Jdl}n}{{Jfl}n}{{Jhl}n}{{Jjl}n}{{Jll}n}{{Jnl}n}{{K`l}n}{{Kbl}n}{{Kdl}n}{{Kfl}n}{{Khl}n}{{Kjl}n}{{Kll}n}{cc{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{L`{{Lb{Ad}}}}{Af{{Lb{Ad}}}}```{{Adc}dLd}````````````{ce{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{L`j}``````````````````````````{JlAf}````````````{{AdAd}{{Lb{Kn}}}}`{AlAd}```````````````````````````{{AlAd}d}{{J`Lf}d}```````````{J`Lf}``````````````````777777777777777777777777777777777777777777777777777777777777777777777777777777777777{c{{A`{e}}}{}{}}00000{L`{{A`{AdLh}}}}111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111`````````{cAb{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{{}Lj}``````````{LfAf}<<{LfLf}{{ce}d{}{}}{{LfLf}Kn}{{}Lf}{{LfLf}j}{{Lfl}n}{cc{}}{L`{{Lb{Lf}}}}{Af{{Lb{Lf}}}}{{Lfc}dLd}{ce{}{}}{L`j}{{LfLf}{{Lb{Kn}}}}2{L`{{A`{LfLh}}}}{c{{A`{e}}}{}{}}0{cAb{}}````55{LlLl}?{{Llc}dLn}{Llh}{{LlLl}j}{{Lll}n}>:{{{Lb{Ll}}M`MbcMd}{{A`{dLh}}}Mf};776`````;;{MhMh}{{ce}d{}{}}{{Mhc}dLn}{Mhh}{{MhMh}j}{{Mhl}n}{cc{}}{ce{}{}}{{{Lb{Mh}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}```33{MjMj}:{{Mjc}dLn}{Mjh}{{MjMj}j}{{Mjl}n}98{{{Lb{Mj}}M`MbcMd}{{A`{dLh}}}Mf}9776````99{MlMl}{{ce}d{}{}}{{Mlc}dLn}{Mlh}{{MlMl}j}{{Mll}n}{cc{}}{ce{}{}}{{{Lb{Ml}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}`````33{MnMn}:{{Mnc}dLn}{Mnh}{{MnMn}j}{{Mnl}n}98{{{Lb{Mn}}M`MbcMd}{{A`{dLh}}}Mf}9776````99{N`N`}{{ce}d{}{}}{{N`c}dLn}{N`h}{{N`N`}j}{{N`l}n}{cc{}}{ce{}{}}{{{Lb{N`}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}````33{NbNb}:{{Nbc}dLn}{Nbh}{{NbNb}j}{{Nbl}n}98{{{Lb{Nb}}M`MbcMd}{{A`{dLh}}}Mf}9776```99{NdNd}{{ce}d{}{}}{{Ndc}dLn}{Ndh}{{NdNd}j}{{Ndl}n}{cc{}}{ce{}{}}{{{Lb{Nd}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}````33{NfNf}:{{Nfc}dLn}{Nfh}{{NfNf}j}{{Nfl}n}98{{{Lb{Nf}}M`MbcMd}{{A`{dLh}}}Mf}9776````99{NhNh}{{ce}d{}{}}{{Nhc}dLn}{Nhh}{{NhNh}j}{{Nhl}n}{cc{}}{ce{}{}}{{{Lb{Nh}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}`````33{NjNj}:{{Njc}dLn}{Njh}{{NjNj}j}{{Njl}n}98{{{Lb{Nj}}M`MbcMd}{{A`{dLh}}}Mf}9776```````9999999999`{Nld}{Nnd}{O`d}{Obd}{Odd}{NlNl}{NnNn}{O`O`}{ObOb}{OdOd}{{ce}d{}{}}0000{{}Nl}{{}Nn}{{}O`}{{}Ob}{{}Od}{Nlh}{Nnh}{O`h}{Obh}{Odh}``{{NlNl}j}{{NnNn}j}{{O`O`}j}{{ObOb}j}{{OdOd}j}{{Nll}n}{{Nnl}n}{{O`l}n}{{Obl}n}{{Odl}n}{cc{}}0000{ce{}{}}0000```{Nl{{Oh{Of}}}}``11111{c{{A`{e}}}{}{}}000000000{cAb{}}0000```````````````````{{OjOl}{{A`{OnA`}}}}{{{Ab{c}}Ol}{{A`{{A`{OnA`}}}}}Ad}{{{Af{c}}Ol}{{A`{{A`{OnA`}}}}}Ah}`6666666666666666666666666666666666{Ajd}{Ald}{And}{AA`d}{AAbd}{AAdd}{AAfd}{AAhd}{AAjd}{AAld}{Ond}{Old}{AAnd}{AB`d}{AjAj}{AlAl}{AnAn}{AA`AA`}{AAbAAb}{AAdAAd}{AAfAAf}{AAhAAh}{AAjAAj}{AAlAAl}{OnOn}{OlOl}{AAnAAn}{AB`AB`}{{{ABb{c}}}{{ABb{c}}}ABd}{{ce}d{}{}}00000000000000```{{}Aj}{{}Al}{{}An}{{}AA`}{{}AAb}{{}AAd}{{}AAf}{{}AAh}{{}AAj}{{}AAl}{{}On}{{}Ol}{{}AAn}{{}AB`}{Ajh}{Alh}{Anh}{AA`h}{AAbh}{AAdh}{AAfh}{AAhh}{AAjh}{AAlh}{Onh}{Olh}{AAnh}{AB`h}``{{AjAj}j}{{AlAl}j}{{AnAn}j}{{AA`AA`}j}{{AAbAAb}j}{{AAdAAd}j}{{AAfAAf}j}{{AAhAAh}j}{{AAjAAj}j}{{AAlAAl}j}{{OnOn}j}{{OlOl}j}{{AAnAAn}j}{{AB`AB`}j}`{{OjAAf}{{A`{AAhA`}}}}{{{Ab{c}}AAf}{{A`{{A`{AAhA`}}}}}Ad}{{{Af{c}}AAf}{{A`{{A`{AAhA`}}}}}Ah}`{{OjAAj}{{A`{AAlA`}}}}{{{Ab{c}}AAj}{{A`{{A`{AAlA`}}}}}Ad}{{{Af{c}}AAj}{{A`{{A`{AAlA`}}}}}Ah}{{Ajl}n}{{All}n}{{Anl}n}{{AA`l}n}{{AAbl}n}{{AAdl}n}{{AAfl}n}{{AAhl}n}{{AAjl}n}{{AAll}n}{{Onl}n}{{Oll}n}{{AAnl}n}{{AB`l}n}{cc{}}0000000000000000{{OjAn}{{A`{AA`A`}}}}{{{Ab{c}}An}{{A`{{A`{AA`A`}}}}}Ad}{{{Af{c}}An}{{A`{{A`{AA`A`}}}}}Ah}{{OjAj}{{A`{AlA`}}}}{{{Ab{c}}Aj}{{A`{{A`{AlA`}}}}}Ad}{{{Af{c}}Aj}{{A`{{A`{AlA`}}}}}Ah}{ce{}{}}0000000000000000{{{ABb{c}}{Oh{Of}}}{{A`{{ABf{Of}}ABh}}}Oj}```{c{{Ab{c}}}Ad}{c{{Af{c}}}Ah}{c{{ABb{c}}}Oj}{{OjAAn}{{A`{AB`A`}}}}{{{Ab{c}}AAn}{{A`{{A`{AB`A`}}}}}Ad}{{{Af{c}}AAn}{{A`{{A`{AB`A`}}}}}Ah}{{OjAAd}{{A`{AAlA`}}}}{{{Ab{c}}AAd}{{A`{{A`{AAlA`}}}}}Ad}{{{Af{c}}AAd}{{A`{{A`{AAlA`}}}}}Ah}`:::::::::::::::{c{{A`{e}}}{}{}}000000000000000000000000000000000{cAb{}}0000000000000000`````<<<<{ABjd}{ABld}{ABjABj}{ABlABl}{{ce}d{}{}}0``{{}ABj}{{}ABl}{ABjh}{ABlh}{{ABjABj}j}{{ABlABl}j}{{ABjl}n}{{ABll}n}{cc{}}0{ce{}{}}0`00{c{{A`{e}}}{}{}}000{cAb{}}0``````````{ABnAf}3333333333{AC`d}{ACbd}{ACdd}{ACfd}{AC`AC`}{ACbACb}{ACdACd}{ACfACf}{ABnABn}{{ce}d{}{}}0000{{ABnABn}Kn}`{{}AC`}{{}ACb}{{}ACd}{{}ACf}{{}ABn}{ACdACh}`0`{AC`h}{ACbh}{ACdh}{ACfh}{{AC`AC`}j}{{ACbACb}j}{{ACdACd}j}{{ACfACf}j}{{ABnABn}j}{{AC`l}n}{{ACbl}n}{{ACdl}n}{{ACfl}n}{{ABnl}n}{cc{}}0000{L`{{Lb{ABn}}}}{Af{{Lb{ABn}}}}{ACfABn}`{{ABnc}dLd}{ce{}{}}0000{L`j}{ACdj}`{{ABnABn}{{Lb{Kn}}}}```{{ACfABn}d}{ACdACh}`0`55555{c{{A`{e}}}{}{}}000{L`{{A`{ABnLh}}}}111111{cAb{}}0000`````88{ACjACj}{{ce}d{}{}}{{ACjc}dLn}{ACjh}{{ACjACj}j}{{ACjl}n}{cc{}}?{{{Lb{ACj}}M`MbcMd}{{A`{dLh}}}Mf}{ce{}{}};;9`00{ACld}{AClACl}9{{}ACl}{AClh}{{AClACl}j}{{ACll}n}86{AClACh}`0`{AClM`}`0`0`0`1`0`0`0`1`{AClj}`1`2`91`1`1`1`1`{c{{A`{e}}}{}{}}0{cAb{}}```;;{ACnACn}{{ce}d{}{}}{{ACnc}dLn}{ACnh}{{ACnACn}j}{{ACnl}n}{cc{}}{ce{}{}}{{{Lb{ACn}}M`MbcMd}{{A`{dLh}}}Mf}1::9`11{AD`d}{AD`AD`}9{{}AD`}{AD`h}{{AD`AD`}j}{{AD`l}n}87`7{c{{A`{e}}}{}{}}0{cAb{}}`````````99999999999999{ADbd}{ADdd}{ADfd}{ADhd}{ADbADb}{ADdADd}{ADfADf}{ADhADh}{{{ADj{c}}}{{ADj{c}}}ABd}{{ce}d{}{}}0000``{{}ADb}{{}ADd}{{}ADf}{{}ADh}{{ADlADf}{{A`{ADhA`}}}}{{{ADn{c}}ADf}{{A`{{A`{ADhA`}}}}}Ad}{{{AE`{c}}ADf}{{A`{{A`{ADhA`}}}}}Ah}{ADbh}{ADdh}{ADfh}{ADhh}{{ADbADb}j}{{ADdADd}j}{{ADfADf}j}{{ADhADh}j}{{ADbl}n}{{ADdl}n}{{ADfl}n}{{ADhl}n}{cc{}}000000{ce{}{}}000000{{{ADj{c}}{Oh{Of}}}{{A`{{ABf{Of}}ABh}}}ADl}`{{ADlADb}{{A`{ADdA`}}}}{{{ADn{c}}ADb}{{A`{{A`{ADdA`}}}}}Ad}{{{AE`{c}}ADb}{{A`{{A`{ADdA`}}}}}Ah}`{ADbAEb}`{c{{ADn{c}}}Ad}{c{{AE`{c}}}Ah}{c{{ADj{c}}}ADl}{{ADbAEb}d}99999{c{{A`{e}}}{}{}}0000000000000{cAb{}}000000````{AEbAf}<<{AEbAEb}{{ce}d{}{}}{{AEbAEb}Kn}{{}AEb}{{AEbAEb}j}{{AEbl}n}{cc{}}{L`{{Lb{AEb}}}}{Af{{Lb{AEb}}}}{{AEbc}dLd}{ce{}{}}{L`j}{{AEbAEb}{{Lb{Kn}}}}2?{L`{{A`{AEbLh}}}}{c{{A`{e}}}{}{}}{cAb{}}``````````````````````55555555555555555555555555555555{AEdd}{AEfd}{AEhd}{AEjd}{AEld}{AEnd}{AF`d}{AFbd}{AFdd}{AFfd}{AFhd}{AFjd}{AFld}{AEdAEd}{AEfAEf}{AEhAEh}{AEjAEj}{AElAEl}{AEnAEn}{AF`AF`}{AFbAFb}{AFdAFd}{AFfAFf}{AFhAFh}{AFjAFj}{AFlAFl}{{{AFn{c}}}{{AFn{c}}}ABd}{{ce}d{}{}}0000000000000{{}AEd}{{}AEf}{{}AEh}{{}AEj}{{}AEl}{{}AEn}{{}AF`}{{}AFb}{{}AFd}{{}AFf}{{}AFh}{{}AFj}{{}AFl}`{AEdh}{AEfh}{AEhh}{AEjh}{AElh}{AEnh}{AF`h}{AFbh}{AFdh}{AFfh}{AFhh}{AFjh}{AFlh}{{AEdAEd}j}{{AEfAEf}j}{{AEhAEh}j}{{AEjAEj}j}{{AElAEl}j}{{AEnAEn}j}{{AF`AF`}j}{{AFbAFb}j}{{AFdAFd}j}{{AFfAFf}j}{{AFhAFh}j}{{AFjAFj}j}{{AFlAFl}j}{{AEdl}n}{{AEfl}n}{{AEhl}n}{{AEjl}n}{{AEll}n}{{AEnl}n}{{AF`l}n}{{AFbl}n}{{AFdl}n}{{AFfl}n}{{AFhl}n}{{AFjl}n}{{AFll}n}`{cc{}}000000000000000{ce{}{}}000000000000000{{{AFn{c}}{Oh{Of}}}{{A`{{ABf{Of}}ABh}}}AG`}``{{AG`AEl}{{A`{AEnA`}}}}{{{AGb{c}}AEl}{{A`{{A`{AEnA`}}}}}Ad}{{{AGd{c}}AEl}{{A`{{A`{AEnA`}}}}}Ah}{{AG`AF`}{{A`{AFbA`}}}}{{{AGb{c}}AF`}{{A`{{A`{AFbA`}}}}}Ad}{{{AGd{c}}AF`}{{A`{{A`{AFbA`}}}}}Ah}{{AG`AFd}{{A`{AFfA`}}}}{{{AGb{c}}AFd}{{A`{{A`{AFfA`}}}}}Ad}{{{AGd{c}}AFd}{{A`{{A`{AFfA`}}}}}Ah}`{c{{AGb{c}}}Ad}{c{{AGd{c}}}Ah}{c{{AFn{c}}}AG`}{{AG`AEd}{{A`{AEfA`}}}}{{{AGb{c}}AEd}{{A`{{A`{AEfA`}}}}}Ad}{{{AGd{c}}AEd}{{A`{{A`{AEfA`}}}}}Ah}{{AG`AFh}{{A`{AFjA`}}}}{{{AGb{c}}AFh}{{A`{{A`{AFjA`}}}}}Ad}{{{AGd{c}}AFh}{{A`{{A`{AFjA`}}}}}Ah}{ce{}{}}0000000000000{c{{A`{e}}}{}{}}0000000000000000000000000000000{cAb{}}000000000000000```{{AG`AEh}{{A`{AEjA`}}}}{{{AGb{c}}AEh}{{A`{{A`{AEjA`}}}}}Ad}{{{AGd{c}}AEh}{{A`{{A`{AEjA`}}}}}Ah}```````````````````55555555555555555555555555555555`{AGfd}{AGhd}{AGjd}{AGld}{AGnd}{AH`d}{AHbd}{AHdd}{AHfd}{AHhd}{AHjd}{AHld}{AHnd}{AI`d}{AIbd}{AIdd}{AGfAGf}{AGhAGh}{AGjAGj}{AGlAGl}{AGnAGn}{AH`AH`}{AHbAHb}{AHdAHd}{AHfAHf}{AHhAHh}{AHjAHj}{AHlAHl}{AHnAHn}{AI`AI`}{AIbAIb}{AIdAId}{{ce}d{}{}}000000000000000{{}AGf}{{}AGh}{{}AGj}{{}AGl}{{}AGn}{{}AH`}{{}AHb}{{}AHd}{{}AHf}{{}AHh}{{}AHj}{{}AHl}{{}AHn}{{}AI`}{{}AIb}{{}AId}{AGfh}{AGhh}{AGjh}{AGlh}{AGnh}{AH`h}{AHbh}{AHdh}{AHfh}{AHhh}{AHjh}{AHlh}{AHnh}{AI`h}{AIbh}{AIdh}````````{{AGfAGf}j}{{AGhAGh}j}{{AGjAGj}j}{{AGlAGl}j}{{AGnAGn}j}{{AH`AH`}j}{{AHbAHb}j}{{AHdAHd}j}{{AHfAHf}j}{{AHhAHh}j}{{AHjAHj}j}{{AHlAHl}j}{{AHnAHn}j}{{AI`AI`}j}{{AIbAIb}j}{{AIdAId}j}`{{AGfl}n}{{AGhl}n}{{AGjl}n}{{AGll}n}{{AGnl}n}{{AH`l}n}{{AHbl}n}{{AHdl}n}{{AHfl}n}{{AHhl}n}{{AHjl}n}{{AHll}n}{{AHnl}n}{{AI`l}n}{{AIbl}n}{{AIdl}n}{cc{}}000000000000000`````{ce{}{}}000000000000000```````````0000000000000000{c{{A`{e}}}{}{}}0000000000000000000000000000000{cAb{}}000000000000000``22{AIfAIf}{{ce}d{}{}}{{AIfc}dLn}{AIfh}{{AIfAIf}j}{{AIfl}n}98{{{Lb{AIf}}M`MbcMd}{{A`{dLh}}}Mf}9887``99{AIhAIh}6{{AIhc}dLn}{AIhh}{{AIhAIh}j}{{AIhl}n}?>{{{Lb{AIh}}M`MbcMd}{{A`{dLh}}}Mf}?>>=```??{AIjAIj}<{{AIjc}dLn}{AIjh}{{AIjAIj}j}{{AIjl}n}{cc{}}{ce{}{}}{{{Lb{AIj}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}```33{AIlAIl}{{ce}d{}{}}{{AIlc}dLn}{AIlh}{{AIlAIl}j}{{AIll}n}:9{{{Lb{AIl}}M`MbcMd}{{A`{dLh}}}Mf}:887````::{AInAIn}6{{AInc}dLn}{AInh}{{AInAIn}j}{{AInl}n}{cc{}}{ce{}{}}{{{Lb{AIn}}M`MbcMd}{{A`{dLh}}}Mf}1{c{{A`{e}}}{}{}}0{cAb{}}````33{AJ`AJ`}{{ce}d{}{}}{{AJ`c}dLn}{AJ`h}{{AJ`AJ`}j}{{AJ`l}n}:9{{{Lb{AJ`}}M`MbcMd}{{A`{dLh}}}Mf}:887","c":[782,1052,1159,1161,1162,1166,1167,1183,1230,1623,2328,2604],"p":[[5,"RawDigest",1],[1,"unit"],[5,"HexDigest",1],[1,"usize"],[1,"bool"],[5,"Formatter",3279],[8,"Result",3279],[6,"Result",3280],[5,"TypeId",3281],[6,"TeePlatform",56],[1,"str"],[5,"FirmwareAttachment",56],[5,"KernelAttachment",56],[5,"RootLayerEvidence",56],[5,"LayerEvidence",56],[5,"ApplicationKeys",56],[5,"Evidence",56],[5,"CertificateAuthority",56],[5,"DiceData",56],[5,"TcbVersion",56],[5,"SkipVerification",56],[5,"EndorsementReferenceValue",56],[5,"BinaryReferenceValue",56],[5,"KernelDigests",56],[5,"KernelBinaryReferenceValue",56],[5,"FileReferenceValue",56],[5,"StringReferenceValue",56],[5,"Regex",56],[5,"StringLiterals",56],[5,"RegexReferenceValue",56],[5,"TextReferenceValue",56],[5,"RootLayerReferenceValues",56],[5,"AmdSevReferenceValues",56],[5,"IntelTdxReferenceValues",56],[5,"InsecureReferenceValues",56],[5,"Digests",56],[5,"KernelLayerReferenceValues",56],[5,"SystemLayerReferenceValues",56],[5,"ApplicationLayerReferenceValues",56],[5,"ContainerLayerReferenceValues",56],[5,"EventReferenceValues",56],[5,"OakRestrictedKernelReferenceValues",56],[5,"OakContainersReferenceValues",56],[5,"CbReferenceValues",56],[5,"ReferenceValues",56],[5,"TransparentReleaseEndorsement",56],[5,"RootLayerEndorsements",56],[5,"KernelLayerEndorsements",56],[5,"SystemLayerEndorsements",56],[5,"ApplicationLayerEndorsements",56],[5,"ContainerLayerEndorsements",56],[5,"OakRestrictedKernelEndorsements",56],[5,"OakContainersEndorsements",56],[5,"CbEndorsements",56],[5,"OakStandaloneEndorsements",56],[5,"Endorsements",56],[5,"Stage0Measurements",56],[5,"Event",56],[5,"EventLog",56],[5,"VerificationSkipped",56],[5,"RawDigests",56],[5,"ExpectedDigests",56],[5,"KernelExpectedValues",56],[5,"AmdSevExpectedValues",56],[5,"IntelTdxExpectedValues",56],[5,"InsecureExpectedValues",56],[5,"ExpectedRegex",56],[5,"ExpectedStringLiterals",56],[5,"TextExpectedValue",56],[5,"RootLayerExpectedValues",56],[5,"KernelLayerExpectedValues",56],[5,"SystemLayerExpectedValues",56],[5,"ContainerLayerExpectedValues",56],[5,"ApplicationLayerExpectedValues",56],[5,"EventExpectedValues",56],[5,"OakRestrictedKernelExpectedValues",56],[5,"OakContainersExpectedValues",56],[5,"CbExpectedValues",56],[5,"ExpectedValues",56],[5,"AttestationResults",56],[5,"ExtractedEvidence",56],[5,"RootLayerData",56],[5,"AmdAttestationReport",56],[5,"IntelTdxAttestationReport",56],[5,"FakeAttestationReport",56],[5,"KernelLayerData",56],[5,"ApplicationLayerData",56],[5,"SystemLayerData",56],[5,"ContainerLayerData",56],[5,"EventData",56],[5,"OakRestrictedKernelData",56],[5,"OakContainersData",56],[5,"CbData",56],[5,"OakStandaloneData",56],[6,"Ordering",3282],[1,"i32"],[6,"Option",3283],[10,"Hasher",3284],[6,"Status",1609],[5,"DecodeError",3285],[5,"String",3286],[6,"Type",1634],[10,"BufMut",3287],[1,"u32"],[6,"WireType",3288],[5,"DecodeContext",3288],[10,"Buf",3289],[6,"Type",1653],[6,"Type",1673],[6,"Type",1691],[6,"EvidenceValues",1710],[6,"Type",1730],[6,"Type",1749],[6,"Type",1768],[6,"Report",1786],[6,"Type",1805],[6,"Type",1824],[5,"EncryptedRequest",1845],[5,"EncryptedResponse",1845],[5,"AeadEncryptedMessage",1845],[5,"SessionKeys",1845],[5,"Signature",1845],[1,"u8"],[1,"slice"],[10,"OakFunctions",1935],[5,"Empty",1935],[5,"AbortNextLookupDataResponse",1935],[5,"Status",3290],[5,"OakFunctionsClient",1935],[10,"Transport",3291],[5,"OakFunctionsAsyncClient",1935],[10,"AsyncTransport",3291],[5,"InitializeRequest",1935],[5,"InitializeResponse",1935],[5,"InvokeRequest",1935],[5,"InvokeResponse",1935],[5,"LookupDataEntry",1935],[5,"LookupDataChunk",1935],[5,"ExtendNextLookupDataRequest",1935],[5,"ExtendNextLookupDataResponse",1935],[5,"FinishNextLookupDataRequest",1935],[5,"FinishNextLookupDataResponse",1935],[5,"ReserveRequest",1935],[5,"ReserveResponse",1935],[5,"OakFunctionsServer",1935],[10,"Clone",3292],[5,"Vec",3293],[1,"never"],[5,"ConfigurationReport",2228],[5,"ServerPolicy",2228],[6,"HandlerType",2264],[5,"TcpCommunicationChannel",2264],[5,"VsockCommunicationChannel",2264],[5,"WasmtimeConfig",2264],[5,"ApplicationConfig",2264],[1,"u64"],[6,"CommunicationChannel",2373],[5,"PoolingAllocationConfig",2391],[6,"Data",2445],[5,"Entry",2463],[5,"LookupRequest",2481],[5,"LookupResponse",2481],[5,"EchoAndPanicRequest",2481],[5,"EchoAndPanicResponse",2481],[5,"TestModuleServer",2481],[10,"TestModule",2481],[5,"TestModuleClient",2481],[5,"TestModuleAsyncClient",2481],[6,"Mode",2591],[5,"ReadRequestRequest",2616],[5,"ReadRequestResponse",2616],[5,"WriteResponseRequest",2616],[5,"WriteResponseResponse",2616],[5,"LogRequest",2616],[5,"LogResponse",2616],[5,"LookupDataRequest",2616],[5,"LookupDataResponse",2616],[5,"LookupDataMultiRequest",2616],[5,"LookupDataMultiResponse",2616],[5,"TestRequest",2616],[5,"TestResponse",2616],[5,"BytesValue",2616],[5,"StdWasmApiServer",2616],[10,"StdWasmApi",2616],[5,"StdWasmApiClient",2616],[5,"StdWasmApiAsyncClient",2616],[5,"EndorsedEvidence",2887],[5,"GetEndorsedEvidenceRequest",2887],[5,"GetEndorsedEvidenceResponse",2887],[5,"InvokeRequest",2887],[5,"InvokeResponse",2887],[5,"RequestWrapper",2887],[5,"ResponseWrapper",2887],[5,"AttestRequest",2887],[5,"AttestResponse",2887],[5,"NoiseHandshakeMessage",2887],[5,"AttestationBindingMessage",2887],[5,"AttestationBinding",2887],[5,"HandshakeRequest",2887],[5,"HandshakeResponse",2887],[5,"SessionRequest",2887],[5,"SessionResponse",2887],[6,"HandshakeType",3171],[6,"HandshakeType",3188],[6,"Request",3205],[6,"Response",3223],[6,"Request",3241],[6,"Response",3260]],"b":[]}],\
["oak_restricted_kernel",{"doc":"Main ‘kernel’ for baremetal Oak Functions.","t":"JJJJJHCHH","n":["BASE_L4_PAGE_TABLE","FRAME_ALLOCATOR","GUEST_HOST_HEAP","PAGE_TABLES","VMA_ALLOCATOR","panic","shutdown","start_kernel","shutdown"],"q":[[0,"oak_restricted_kernel"],[8,"oak_restricted_kernel::shutdown"],[9,"core::panic::panic_info"],[10,"oak_linux_boot_params"]],"d":["Level 4 page table that is free in application space, but …","Allocator for physical memory frames in the system. We …","The allocator for allocating space in the memory area that …","Active page tables.","Allocator for long-lived pages in the kernel.","Common panic routine for the kernel. This needs to be …","","Main entry point for the kernel, to be called from …","Tries various ways to shut down the machine."],"i":[0,0,0,0,0,0,0,0,0],"f":"`````{bd}`{fd}{{}d}","c":[],"p":[[5,"PanicInfo",9],[1,"never"],[5,"BootParams",10]],"b":[]}],\
["oak_restricted_kernel_dice",{"doc":"This crate contains the logic used by …","t":"IIHHH","n":["AppDigestSha2_256","DerivedKey","generate_derived_key","generate_dice_data","measure_app_digest_sha2_256"],"q":[[0,"oak_restricted_kernel_dice"],[5,"oak_dice::evidence"],[6,"oak_dice::evidence"]],"d":["","A derived sealing key.","","Generates attestation evidence for the ‘measurement’ …",""],"i":[0,0,0,0,0],"f":"``{{bd}f}{{bd}h}{{{l{j}}}d}","c":[],"p":[[5,"Stage0DiceData",5],[8,"AppDigestSha2_256",0],[8,"DerivedKey",0],[5,"RestrictedKernelDiceData",5],[1,"u8"],[1,"slice"]],"b":[]}],\
["oak_restricted_kernel_interface",{"doc":"","t":"SSESECCQCPPPPPPGNNNNNNNNNNNNHHHHHHHHHHHHHHPPTTTPFFTTTPGSPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["DERIVED_KEY_FD","DICE_DATA_FD","Errno","OAK_CHANNEL_FD","Syscall","errno","syscall","syscall","syscalls","EBADF","EFAULT","EINVAL","EIO","ENOMEM","ENOSYS","Errno","borrow","borrow_mut","eq","fmt","fmt","from","from_repr","into","to_string","try_from","try_into","type_id","exit","fsync","mmap","read","sys_exit","sys_fsync","sys_mmap","sys_read","sys_unstable_create_proccess","sys_unstable_switch_proccess","sys_write","unstable_create_proccess","unstable_switch_proccess","write","Exit","Fsync","MAP_ANONYMOUS","MAP_FIXED","MAP_PRIVATE","Mmap","MmapFlags","MmapProtection","PROT_EXEC","PROT_READ","PROT_WRITE","Read","Syscall","UNSTABLE_SYSCALL_SPACE","UnstableCreateProcess","UnstableSwitchProcess","Write","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","not","not","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union"],"q":[[0,"oak_restricted_kernel_interface"],[9,"oak_restricted_kernel_interface::errno"],[28,"oak_restricted_kernel_interface::syscall"],[42,"oak_restricted_kernel_interface::syscalls"],[163,"core::fmt"],[164,"core::fmt"],[165,"core::fmt"],[166,"alloc::string"],[167,"core::any"],[168,"core::ffi"],[169,"core::ffi"],[170,"bitflags::iter"],[171,"bitflags::iter"]],"d":["Predefined file descriptor for reading a derived key.","Predefined file descriptor for reading the dice …","","Predefined file descriptor for the Oak communication …","","","","Invoke system calls based on the Linux calling convention …","","Bad file descriptor","Bad address","Invalid argument","Input/output error","Cannot allocate memory","Function not implemented","Possible error values returned by Oak Restricted Kernel …","","","","","","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Terminates he calling process. Arguments:","Flush a file descriptor. Arguments:","The mapping is not backed by any file; contents are …","Don’t interpret addr as a hint, but require mapping at …","Private copy-on-write mapping.","Creates a mapping for memory. Arguments:","","","Pages may be executed.","Pages may be read.","","Read from a file descriptor.","System calls implemented by Oak Restricted Kernel.","Syscalls above this are unsafe, their behavior and …","Create new process from ELF file and starts it.","Terminates the calling process and switches the active …","Write to a file descriptor.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values."],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,16,16,16,25,0,0,15,15,15,25,0,0,25,25,25,15,16,15,16,15,16,15,16,15,16,15,15,16,16,15,16,15,16,25,15,16,25,15,16,15,16,15,16,15,16,15,16,15,16,25,15,15,15,15,16,16,16,16,16,25,15,16,15,16,15,15,16,16,15,16,15,16,15,16,25,15,16,15,16,15,16,25,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,25,15,16,25,15,16,25,15,16,15,16],"f":"````````````````{ce{}{}}0{{bb}d}{{bf}{{l{hj}}}}{{bf}n}{cc{}}{A`{{Ab{b}}}}5{cAd{}}{c{{l{e}}}{}{}}0{cAf{}}{AhAj}{Ah{{l{hb}}}}{{{Ab{Al}}A`AnB`AhBb}{{l{{Bf{Bd}}b}}}}{{Ah{Bf{Bd}}}{{l{Bhb}}}}{Bbh}{BbBj}{{AlBlBbBbBbBb}A`}{{BbAlBl}Bj}{{AlBl}Bj}{BlBj}2{{{Bf{Bd}}}{{l{Bhb}}}}{Bh{{l{Bhb}}}}8`````````````````{{}An}{{}B`}{{AnAn}An}{{B`B`}B`}{{AnAn}h}{{B`B`}h}3210{AnAh}0{B`Ah}05432{ce{}{}}00000{AnAn}{B`B`}{{AnAn}d}{{B`B`}d}:9<;{{Anc}h{{C`{}{{Bn{An}}}}}}{{B`c}h{{C`{}{{Bn{B`}}}}}}{{Cbf}n}{{Anf}n}000{{B`f}n}0000{cc{}}00{Ah{{Ab{An}}}}{Ah{{Ab{B`}}}}{AhAn}0{AhB`}010{cAn{{C`{}{{Bn{An}}}}}}{cB`{{C`{}{{Bn{B`}}}}}}{Cd{{Ab{An}}}}{Cd{{Ab{B`}}}}{Bh{{Ab{Cb}}}}{{AnAn}h}{{B`B`}h}{{AnAn}An}{{B`B`}B`}{{AnAn}d}{{B`B`}d}{ce{}{}}00{Anc{}}{B`c{}}{And}{B`d}10{An{{Cf{An}}}}{B`{{Cf{B`}}}}{An{{Ch{An}}}}{B`{{Ch{B`}}}}{AnAn}{B`B`}{{AnAn}h}{{B`B`}h}{{AnAnd}h}{{B`B`d}h}{{AnAn}An}{{B`B`}B`}541054{c{{l{e}}}{}{}}00000{cAf{}}0032","c":[],"p":[[6,"Errno",9],[1,"bool"],[5,"Formatter",163],[1,"unit"],[5,"Error",163],[6,"Result",164],[8,"Result",163],[1,"isize"],[6,"Option",165],[5,"String",166],[5,"TypeId",167],[1,"i32"],[1,"never"],[6,"c_void",168],[5,"MmapProtection",42],[5,"MmapFlags",42],[8,"c_int",168],[1,"u8"],[1,"slice"],[1,"usize"],[8,"c_ssize_t",168],[8,"c_size_t",168],[17,"Item"],[10,"IntoIterator",169],[6,"Syscall",42],[1,"str"],[5,"Iter",170],[5,"IterNames",170]],"b":[[19,"impl-Display-for-Errno"],[20,"impl-Debug-for-Errno"],[69,"impl-Flags-for-MmapProtection"],[70,"impl-MmapProtection"],[71,"impl-MmapFlags"],[72,"impl-Flags-for-MmapFlags"],[94,"impl-Octal-for-MmapProtection"],[95,"impl-UpperHex-for-MmapProtection"],[96,"impl-Binary-for-MmapProtection"],[97,"impl-LowerHex-for-MmapProtection"],[98,"impl-LowerHex-for-MmapFlags"],[99,"impl-UpperHex-for-MmapFlags"],[100,"impl-Octal-for-MmapFlags"],[101,"impl-Debug-for-MmapFlags"],[102,"impl-Binary-for-MmapFlags"],[108,"impl-MmapProtection"],[109,"impl-Flags-for-MmapProtection"],[110,"impl-Flags-for-MmapFlags"],[111,"impl-MmapFlags"]]}],\
["oak_restricted_kernel_launcher",{"doc":"","t":"H","n":["create"],"q":[[0,"oak_restricted_kernel_launcher"],[1,"oak_launcher_utils::launcher"],[2,"oak_launcher_utils::launcher"],[3,"oak_launcher_utils::channel"],[4,"core::error"],[5,"core::result"]],"d":[""],"i":[0],"f":"{b{{n{{j{{f{d}}h}}{f{l}}}}}}","c":[],"p":[[5,"Params",1],[10,"GuestInstance",1],[5,"Box",2],[5,"ConnectorHandle",3],[1,"tuple"],[10,"Error",4],[6,"Result",5]],"b":[]}],\
["oak_restricted_kernel_orchestrator",{"doc":"","t":"FNNOOONNNNNNN","n":["AttestedApp","borrow","borrow_mut","derived_key","dice_data","elf_binary","from","into","load_and_attest","try_from","try_into","type_id","vzip"],"q":[[0,"oak_restricted_kernel_orchestrator"],[13,"oak_dice::evidence"],[14,"oak_channel"],[15,"core::result"],[16,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2],"f":"`{ce{}{}}0```{cc{}}1{{cb}df}{c{{h{e}}}{}{}}0{cj{}}4","c":[],"p":[[5,"Stage0DiceData",13],[5,"AttestedApp",0],[10,"Channel",14],[6,"Result",15],[5,"TypeId",16]],"b":[]}],\
["oak_restricted_kernel_sdk",{"doc":"","t":"KCCCXMCCKFNNNNMNNNNNNFKKNNNMNNNNMNHNNNNMNFFKNNNNNNNNNNNNNNNMNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFHNNNNNNNNNCNNENHCCCNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNMNMNNNNNFNNNNNNNNNNNNFNNNNNNNNHNNNNN","n":["EncryptionKeyHandle","attestation","channel","crypto","entrypoint","generate_recipient_context","testing","utils","EvidenceProvider","InstanceEvidenceProvider","borrow","borrow_mut","create","from","get_evidence","get_evidence","into","try_from","try_into","type_id","vzip","FileDescriptorChannel","Read","Write","borrow","borrow_mut","default","flush","flush","from","into","new","read_exact","read_exact","start_blocking_server","try_from","try_into","type_id","vzip","write_all","write_all","InstanceEncryptionKeyHandle","InstanceSigner","Signer","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","create","from","from","generate_recipient_context","into","into","sign","sign","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MockEncryptionKeyHandle","MockEvidenceProvider","MockSigner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","create","create","from","from","from","generate_recipient_context","get_evidence","into","into","into","sign","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Stderr","StderrLogger","alloc_error_handler","borrow","borrow","borrow_mut","borrow_mut","enabled","flush","flush","from","from","heap","into","into","log","log","panic_handler","samplestore","sync","timer","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_str","GrowableHeap","LockedGrowableHeap","alloc","allocate","borrow","borrow","borrow_mut","borrow_mut","dealloc","deallocate","deref","empty","empty","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SampleStore","StaticSampleStore","borrow","borrow_mut","eq","fmt","from","into","new","percentile","percentile","record","record","try_from","try_into","type_id","vzip","OnceCell","borrow","borrow_mut","default","from","get","into","new","set","try_from","try_into","type_id","vzip","Timer","borrow","borrow_mut","elapsed","fmt","from","into","new","new_rdtsc","rdtsc","timed","try_from","try_into","type_id","vzip"],"q":[[0,"oak_restricted_kernel_sdk"],[8,"oak_restricted_kernel_sdk::attestation"],[21,"oak_restricted_kernel_sdk::channel"],[41,"oak_restricted_kernel_sdk::crypto"],[71,"oak_restricted_kernel_sdk::testing"],[110,"oak_restricted_kernel_sdk::utils"],[140,"oak_restricted_kernel_sdk::utils::heap"],[165,"oak_restricted_kernel_sdk::utils::samplestore"],[182,"oak_restricted_kernel_sdk::utils::sync"],[195,"oak_restricted_kernel_sdk::utils::timer"],[210,"oak_crypto::hpke"],[211,"anyhow"],[212,"core::result"],[213,"anyhow"],[214,"core::any"],[215,"oak_channel"],[216,"alloc::boxed"],[217,"micro_rpc"],[218,"oak_proto_rust::oak::crypto::v1"],[219,"core::alloc::layout"],[220,"log"],[221,"log"],[222,"core::fmt"],[223,"core::ptr::non_null"],[224,"spinning_top::spinlock"],[225,"lock_api::mutex"],[226,"core::fmt"],[227,"core::ops::function"]],"d":["Exposes the ability to derive a session key from the …","Structs for providing attestation related logic such as …","Provides functionality to communicate with host …","Structs for signing and encryption using keys attested in …","Marks a function as the entrypoint to an enclave app and …","","Mock attestation evidence and crypto logic. Useful for …","Various utilities like loggers, allocators, timers, etc.","Exposes the ability to read the Attestation Evidence. …","<code>EvidenceProvider</code> implementation that exposes the instance…","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Channel that communicates over a file descriptor.","Simple no_std compatible equivalent of <code>std::io::Read</code>.","Simple no_std compatible equivalent of <code>std::io::Write</code>.","","","Constructs a new FileDescriptorChannel that assumes we’…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Starts a blocking server that listens for requests on the …","","","","","","","<code>EncryptionKeyHandle</code> implementation that using the instance…","<code>Signer</code> implementation that using the instance’s evidence …","Exposes the ability to sign bytestrings using a private …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Attempt to sign the provided message bytestring using a …","","","","","","","","","","","","<code>EncryptionKeyHandle</code> implementation that using mock …","<code>EvidenceProvider</code> implementation that exposes mock evidence.","<code>Signer</code> implementation that using mock evidence and …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","<code>log::Log</code> implementation that outputs logs on standard …","Provides a default implementation for <code>alloc_error_handler</code> …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","no_std compatible allocators.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Provides a default implementation for <code>panic_handler</code> …","Probabilistic sample store to compute percentiles over …","Synchronization utils.","Utils to read the CPUs timestamp counter.","","","","","","","","","","Heap implementation that asks Restricted Kernel for more …","Thread-safe version of GrowableHeap, above, usable as a …","","","","","","","","Safety","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Basic Probabilistic sample store to compute percentiles …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Gets the n-th percentile. n needs to be between 0 and 100, …","","Records a new data point value.","","","","","","A synchronised implementation of a cell that can be …","","","","Returns the argument unchanged.","Gets a reference to the inner value if the cell has been …","Calls <code>U::from(self)</code>.","","Sets the inner value of the cell if it has not been …","","","","","Measures the number of clock cycles between <code>new()</code> and …","","","Returns the approximate number of clock cycles elapsed …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new timer, recording the current tick counter …","Read the timestamp counter register from the CPU.","Returns the approximate number of clock cycles it took to …","","","",""],"i":[0,0,0,0,0,1,0,0,0,0,7,7,7,7,9,7,7,7,7,7,7,0,0,0,12,12,12,13,12,12,12,12,16,12,0,12,12,12,12,13,12,0,0,0,23,24,23,24,23,24,23,24,23,24,23,24,23,23,24,25,24,23,24,23,24,23,24,23,24,23,24,0,0,0,29,27,28,29,27,28,27,28,27,28,29,27,28,29,27,28,28,29,29,27,28,27,27,28,29,27,28,29,27,28,29,27,28,29,27,28,0,0,0,36,31,36,31,31,36,31,36,31,0,36,31,0,31,0,0,0,0,36,31,36,31,36,31,36,31,36,0,0,39,40,40,39,40,39,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,0,0,45,45,45,45,45,45,45,19,45,19,45,45,45,45,45,0,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,0,51,51,51,51,51],"f":"`````{{b{f{d}}}{{l{hj}}}}````{ce{}{}}0{{}{{A`{n}}}}{cc{}}{AbAd}{nAd}4{c{{l{e}}}{}{}}0{cAf{}}6```66{{}Ah}{Aj{{l{Alj}}}}{Ah{{A`{Al}}}}79{AnAh}{{B`{f{d}}}{{l{Alj}}}}{{Ah{f{d}}}{{A`{Al}}}}{{{Bd{Bb}}cBf}{{A`{Bh}}}{{Bl{}{{Bj{Bh}}}}}}887={{Aj{f{d}}}{{l{Alj}}}}2```>>>>{BnBn}{C`C`}{{ce}Al{}{}}0{{}{{A`{Bn}}}}{{}{{A`{C`}}}}{cc{}}0{{Bn{f{d}}}{{A`{h}}}}{ce{}{}}0{{Cb{f{d}}}{{A`{Cd}}}}{{C`{f{d}}}{{A`{Cd}}}}22{c{{l{e}}}{}{}}000{cAf{}}044```444444{CfCf}{ChCh};;{{}{{A`{Cj}}}}{{}{{A`{Cf}}}}{{}{{A`{Ch}}}};;;{{Ch{f{d}}}{{A`{h}}}}{CjAd};;;{{Cf{f{d}}}{{A`{Cd}}}}<<999999888<<<``{ClBh}===={{CnD`}Db}{{}Al}{CnAl}{cc{}}0`{ce{}{}}0`{{CnDd}Al}{DfBh}```{c{{l{e}}}{}{}}000{cAf{}}044{{DhDj}{{l{AlDl}}}}``{{DnCl}d}{{E`Cl}{{l{{Eb{d}}Al}}}}7777{{DndCl}Al}{{E`{Eb{d}}Ed}Al}{Dn{{Eh{EfE`}}}}{{}E`}{{}Dn}==<<999988<<``<<{{EjEj}Db}{{EjEl}{{l{AlDl}}}}?>{{}{{En{Ej}}}}{{BfF`}{{En{Fb}}}}{{EjF`}{{En{Fb}}}}{{BfFb}Al}{{EjFb}Al}{c{{l{e}}}{}{}}0{cAf{}}{ce{}{}}`00{{}{{Fd{c}}}{}}{cc{}}{{{Fd{c}}}{{En{c}}}{}}32{{{Fd{c}}c}{{l{Alc}}}{}}6654`44{FfFb}{{FfEl}{{l{AlDl}}}}46{FbFf}{{}Ff}{{}Fb}{cFbFh}<<;:","c":[],"p":[[10,"EncryptionKeyHandle",0],[1,"u8"],[1,"slice"],[5,"RecipientContext",210],[5,"Error",211],[6,"Result",212],[5,"InstanceEvidenceProvider",8],[8,"Result",211],[10,"EvidenceProvider",8],[5,"Evidence",213],[5,"TypeId",214],[5,"FileDescriptorChannel",21],[10,"Write",21],[1,"unit"],[1,"i32"],[10,"Read",21],[10,"Channel",215],[5,"Box",216],[10,"SampleStore",165],[1,"never"],[17,"Error"],[10,"Transport",217],[5,"InstanceEncryptionKeyHandle",41],[5,"InstanceSigner",41],[10,"Signer",41],[5,"Signature",218],[5,"MockSigner",71],[5,"MockEncryptionKeyHandle",71],[5,"MockEvidenceProvider",71],[5,"Layout",219],[5,"StderrLogger",110],[5,"Metadata",220],[1,"bool"],[5,"Record",220],[5,"PanicInfo",221],[5,"Stderr",110],[1,"str"],[5,"Error",222],[5,"LockedGrowableHeap",140],[5,"GrowableHeap",140],[5,"NonNull",223],[1,"usize"],[5,"RawSpinlock",224],[5,"Mutex",225],[5,"StaticSampleStore",165],[5,"Formatter",222],[6,"Option",226],[1,"f64"],[1,"u64"],[5,"OnceCell",182],[5,"Timer",195],[10,"FnOnce",227]],"b":[]}],\
["oak_session",{"doc":"","t":"FKFKCNNNNCNNMNNCNNMNNNNMNNMNNNNNNNNNNMNNKGKKPFPPFNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNMNNNFFFFNNONNNNNNNNNNNNNNONNNNOOOOONNNNNNNNNNNNNNNNNNFKGKPPPPFNNNNNNNNNMNNNNNNNMNNNNNNNNNNNNNNNNNNN","n":["ClientSession","ProtocolEngine","ServerSession","Session","attestation","borrow","borrow","borrow_mut","borrow_mut","config","from","from","get_outgoing_message","get_outgoing_message","get_outgoing_message","handshake","into","into","is_open","is_open","is_open","new","new","put_incoming_message","put_incoming_message","put_incoming_message","read","read","read","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write","write","AttestationProvider","AttestationType","AttestationVerifier","Attester","Bidirectional","ClientAttestationProvider","PeerUnidirectional","SelfUnidirectional","ServerAttestationProvider","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_attestation_results","get_attestation_results","get_attestation_results","get_endorsed_evidence","get_outgoing_message","get_outgoing_message","into","into","into","new","new","put_incoming_message","put_incoming_message","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","AttestationProviderConfig","HandshakerConfig","SessionConfig","SessionConfigBuilder","add_peer_verifier","add_self_attester","attestation_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","from","from","from","from","handshake_type","into","into","into","into","peer_attestation_binding_public_key","peer_static_public_key","peer_verifiers","self_attesters","self_static_private_key","set_peer_static_public_key","set_self_private_key","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ClientHandshaker","EncryptionKeyHandle","HandshakeType","Handshaker","NoiseKK","NoiseKN","NoiseNK","NoiseNN","ServerHandshaker","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","derive_session_keys","derive_session_keys","derive_session_keys","from","from","from","get_outgoing_message","get_outgoing_message","get_public_key","into","into","into","new","put_incoming_message","put_incoming_message","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"oak_session"],[40,"oak_session::attestation"],[84,"oak_session::config"],[133,"oak_session::handshake"],[179,"core::option"],[180,"anyhow"],[181,"oak_proto_rust::oak::session::v1"],[182,"oak_proto_rust::oak::session::v1"],[183,"core::result"],[184,"core::any"],[185,"oak_proto_rust::oak::attestation::v1"],[186,"oak_proto_rust::oak::session::v1"],[187,"oak_proto_rust::oak::session::v1"]],"d":["","Trait that represents a state-machine for protocol message …","","Trait that represents an end-to-end encrypted …","This module provides an implementation of the Attestation …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a next message that needs to be sent to the peer.","","","This module provides an implementation of the Handshaker, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether session is ready to send and receive …","","","","","Puts a message received from the peer into the …","","","Reads an encrypted message from the peer and decrypt it.","","","","","","","","","","","Encrypts <code>plaintext</code> and send it to the peer.","","","","Configuration of the attestation behavior that the …","","","Both parties attest each other.","Client-side Attestation Provider that initiates remote …","“Peer” attests itself to the “Self”.","“Self” attests itself to the “Peer”.","Server-side Attestation Provider that responds to the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Client-side Handshaker that initiates the crypto handshake …","","","","","","","","Server-side Handshaker that responds to the crypto …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,9,4,9,0,4,9,1,4,4,0,4,9,7,4,9,4,9,1,4,4,7,4,9,4,9,4,9,4,9,4,9,7,4,9,0,0,0,0,30,0,30,30,0,30,19,20,30,19,20,30,19,20,17,19,20,21,19,20,30,19,20,19,20,19,20,30,19,20,30,19,20,30,19,20,26,30,19,20,0,0,0,0,29,29,25,10,29,25,33,10,29,25,33,29,10,10,29,25,33,33,10,29,25,33,33,33,25,25,33,29,29,10,29,25,33,10,29,25,33,10,29,25,33,10,29,25,33,0,0,0,0,32,32,32,32,0,34,37,32,34,37,32,32,32,34,35,34,37,34,37,32,34,37,31,34,37,32,37,34,37,32,34,37,32,34,37,32,34,37,32,34,37,32],"f":"`````{ce{}{}}000`{cc{}}0{b{{f{{d{c}}}}}{}}{h{{f{{d{j}}}}}}{h{{f{{d{l}}}}}}`44{nA`}{hA`}{AbA`}{Adh}{AdAb}{{bc}{{f{{d{Af}}}}}{}}{{hj}{{f{{d{Af}}}}}}{{hl}{{f{{d{Af}}}}}}{n{{f{{d{{Aj{Ah}}}}}}}}{h{{f{{d{{Aj{Ah}}}}}}}}{Ab{{f{{d{{Aj{Ah}}}}}}}}{c{{Al{e}}}{}{}}000{cAn{}}0{ce{}{}}0{{n{B`{Ah}}}{{f{Af}}}}{{h{B`{Ah}}}{{f{Af}}}}{{Ab{B`{Ah}}}{{f{Af}}}}`````````333333{cc{}}00{Bb{{d{Bd}}}}{Bf{{d{Bd}}}}{Bh{{d{Bd}}}}{Bj{{f{Bl}}}}{Bf{{f{{d{Bn}}}}}}{Bh{{f{{d{C`}}}}}}:::{CbBf}{CbBh}{{BfC`}{{f{{d{Af}}}}}}{{BhBn}{{f{{d{Af}}}}}}{c{{Al{e}}}{}{}}00000{cAn{}}00{{CdCfCh}{{f{Bd}}}}{ce{}{}}00````{{CjCd}Cj}{{CjBj}Cj}`22222222{CjAd}{ClCj}{cc{}}000`5555`````{{Cj{B`{Ah}}}Cj}{{CjCn}Cj}::::::::99997777`````````777777{D`D`}{{ce}Af{}{}}{Db{{f{Dd}}}}{Df{{d{Dh}}}}{Dd{{d{Dh}}}}{Dj{{d{Dh}}}}888{Dd{{f{{d{Dl}}}}}}{Dj{{f{{d{Dn}}}}}}{Cn{{f{{Aj{Ah}}}}}}{ce{}{}}00{DbDj}{{DdDn}{{f{{d{Af}}}}}}{{DjDl}{{f{{d{Af}}}}}}3{c{{Al{e}}}{}{}}00000{cAn{}}00555","c":[],"p":[[10,"ProtocolEngine",0],[6,"Option",179],[8,"Result",180],[5,"ClientSession",0],[5,"SessionRequest",181],[5,"SessionResponse",181],[10,"Session",0],[1,"bool"],[5,"ServerSession",0],[5,"SessionConfig",84],[1,"unit"],[1,"u8"],[5,"Vec",182],[6,"Result",183],[5,"TypeId",184],[1,"slice"],[10,"AttestationProvider",40],[5,"AttestationResults",185],[5,"ClientAttestationProvider",40],[5,"ServerAttestationProvider",40],[10,"Attester",40],[5,"EndorsedEvidence",181],[5,"AttestRequest",181],[5,"AttestResponse",181],[5,"AttestationProviderConfig",84],[10,"AttestationVerifier",40],[5,"Evidence",185],[5,"Endorsements",185],[5,"SessionConfigBuilder",84],[6,"AttestationType",40],[10,"EncryptionKeyHandle",133],[6,"HandshakeType",133],[5,"HandshakerConfig",84],[5,"ClientHandshaker",133],[10,"Handshaker",133],[5,"SessionKeys",186],[5,"ServerHandshaker",133],[5,"HandshakeRequest",181],[5,"HandshakeResponse",181]],"b":[[13,"impl-ProtocolEngine%3CSessionResponse,+SessionRequest%3E-for-ClientSession%3C\'a%3E"],[14,"impl-ProtocolEngine%3CSessionRequest,+SessionResponse%3E-for-ClientSession%3C\'a%3E"],[24,"impl-ProtocolEngine%3CSessionRequest,+SessionResponse%3E-for-ClientSession%3C\'a%3E"],[25,"impl-ProtocolEngine%3CSessionResponse,+SessionRequest%3E-for-ClientSession%3C\'a%3E"]]}],\
["oak_sev_guest",{"doc":"Rust wrappers for instructions and structs for use by …","t":"KCCCCCCCCCQCCFFNNNNNNNNNNNNNNSSFFFFNNNNNNNNOOOOOOOONNNNNNNNNNONNNNONNNNNNNNNNNNNOOFNNNNNNNNNNNTTSSFFTTTTTTTTFTTNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNONNOOOONNNNNNNNNNNNOOOOPPPPGPFFFSSSPPPGFPPTSTTFFFTPPPPPPPPFPFPGFGSTKGPPPGPGFPPTPPPPPPPPONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNOONOOOOONNNNNOONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOTTPPPGPPPGFTFPPGPGTPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHNHHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNHOFNNONNNQOOOOOOOOOONNNPPFFKGKGKPPFINNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNMNNNNMNNNNNNNNNTTPFFGFFTPPPPPFPPPFFTPPSTGFFPTTTTGFFTTTTTTTSFFFGPPFFGFTTTTNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNOOOHNNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOPPFGSSSFONNNNNNONNNNNNNNOOOOONNNNNNNNNONNNNOOOOOOOOOOOOOOOFSSFFOONNNNNNOOOHOOOOOOOONNNOOOOOOOOOOOOOONNNOOONNNOOOOOOOOOOOOOOOOOOOOONNNOOOOOOOOOONNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNONNNOOOOOOOOOOOOOOO","n":["Translator","ap_jump_table","cpuid","crypto","ghcb","guest","instructions","interrupts","io","msr","mutable_interrupt_handler_with_error_code","secrets","vmsa","ApJumpTable","ApResetAddress","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","CPUID_COUNT_MAX","CPUID_PAGE_SIZE","CpuidFunction","CpuidInput","CpuidOutput","CpuidPage","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","cpuid_data","eax","eax","ebx","ecx","ecx","edx","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","input","into","into","into","into","output","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","xcr0","xss","GuestMessageEncryptor","borrow","borrow_mut","decrypt_message","encrypt_message","from","into","new","new_with_sequence_number","try_from","try_into","type_id","CPL","DR7","GHCB_PAGE_SIZE","GHCB_PROTOCOL_VERSION","Ghcb","GhcbProtocol","RAX","RBX","RCX","RDX","SW_EXIT_CODE","SW_EXIT_INFO_1","SW_EXIT_INFO_2","SW_SCRATCH","ValidBitmap","XCR0","XSS","all","as_mut","as_mut","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","contains","cpl","default","default","difference","do_guest_message_request","dr7","empty","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_ap_jump_table","get_cpuid","get_gpa","ghcb_usage","insert","intersection","intersects","into","into","into","into_iter","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","is_all","is_empty","iter","iter_names","mmio_read_u32","mmio_write_u32","msr_read","msr_write","new","new","not","page_state_change","protocol_version","rax","rbx","rcx","rdx","register_with_hypervisor","remove","reset","reset","set","set_ap_jump_table","shared_buffer","sub","sub_assign","sw_exit_code","sw_exit_info_1","sw_exit_info_2","sw_scratch","symmetric_difference","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","valid_bitmap","x87_state_gpa","xcr0","xss","AbsorbNomaRequest","AbsorbNomaResponse","AbsorbRequest","AbsorbResponse","AeadAlgorithm","Aes256Gcm","AttestationRequest","AttestationResponse","AuthenticatedHeader","CURRENT_ATTESTATION_VERSION","CURRENT_HEADER_VERSION","CURRENT_MESSAGE_VERSION","CpuidRequest","CpuidResponse","Default","EccCurve","EcdsaPublicKey","ExportRequest","ExportResponse","FAMILY_ID","GUEST_MESSAGE_SIZE","GUEST_POLICY","GUEST_SVN","GuestFieldFlags","GuestMessage","GuestMessageHeader","IMAGE_ID","ImportRequest","ImportResponse","Invalid","Invalid","Invalid","InvalidKeySelection","InvalidParams","InvalidParams","KeyRequest","KeyRequest","KeyResponse","KeyResponse","KeySelect","KeySelectIter","KeyStatus","MAX_PAYLOAD_SIZE","MEASUREMENT","Message","MessageType","P384","ReportRequest","ReportResponse","ReportStatus","Reserved","RootKeySelect","RootKeySelectIter","Success","Success","TCB_VERSION","TccInfoReqsponse","TscInfoRequest","VCEK","VCEK","VLEK","VMRK","VmrkRequest","VmrkResponse","algorithm","all","auth_header","auth_tag","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","complement","contains","curve","default","default","default","default","default","derived_key","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","get_algorithm","get_guest_field_select_flags","get_key_select","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_root_key_select","get_status","get_status","guest_field_select","guest_svn","header","header_size","header_version","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_empty","iter","iter","iter","iter_names","len","len","message_size","message_type","message_version","message_vmpck","new","new","new","new","next","next","next_back","next_back","not","nth","nth","payload","r","remove","report","report_data","report_size","s","sequence_number","set","set_key_select","set_root_key_select","size_hint","size_hint","status","status","sub","sub_assign","symmetric_difference","tcb_version","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","validate","validate","validate","validate","vmpl","vmpl","EXECUTE_SUPERVISOR","EXECUTE_USER","FailInput","FailPermission","FailSizeMismatch","InstructionError","No","Page2MiB","Page4KiB","PageSize","PermissionMask","READ","RmpPermission","Unvalidated","Validated","Validation","ValidationStatusNotUpdated","Vmsa","WRITE","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","complement","contains","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","from_repr","from_repr","insert","intersection","intersects","into","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","not","perm_mask","pvalidate","remove","rmpadjust","rmpquery","set","sub","sub_assign","symmetric_difference","target_vmpl","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","vmgexit","vmsa","MutableInterruptStackFrame","borrow","borrow_mut","cs","fmt","from","into","mutable_interrupt_handler_with_error_code","rax","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","ss","try_from","try_into","type_id","Ghcb","Ghcb","GhcbIoFactory","GhcbIoPort","IoPortFactory","PortFactoryWrapper","PortReader","PortWrapper","PortWriter","Raw","Raw","RawIoPortFactory","StaticGhcbIoPort","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","new","new_ghcb","new_raw","new_reader","new_reader","new_reader","new_reader","new_writer","new_writer","new_writer","new_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read","try_read","try_read","try_write","try_write","try_write","try_write","try_write","type_id","type_id","type_id","type_id","type_id","ALTERNATE_INJECTION_ENABLED","AP_CREATION","AddressNotAligned","ApResetHoldRequest","ApResetHoldResponse","CpuidRegister","CpuidRequest","CpuidResponse","DEBUG_SWAP_ENABLED","Eax","Ebx","Ecx","Edx","General","GhcbGpa","GhcbLocationNotAccepted","GhcbProtocolVersion","GhcbResponseLocationNotMatchingRequest","HypervisorFeatureSupportRequest","HypervisorFeatureSupportResponse","INSTRUCTION_BASED_SAMPLING_ENABLED","InvalidResponse","InvalidValue","NO_PREFERRED_GHCB_LOCATION","PREVENT_HOST_IBS_ENABLED","PageAssignment","PreferredGhcbGpaRequest","PreferredGhcbGpaResponse","Private","REFLECT_VC_ENABLED","RESTRICTED_INJECTION","RESTRICTED_INJECTION_ENABLED","RESTRICTED_INJECTION_TIMER","RegisterGhcbGpaError","RegisterGhcbGpaRequest","RegisterGhcbGpaResponse","SECURE_TSC_ENABLED","SEV_ENABLED","SEV_ES_ENABLED","SEV_SNP","SMT_PROTECTION_ENABLED","SNP_ACTIVE","SNP_BTB_ISOLATION_ENABLED","SUPPORTED_PROTOCOL_VERSION","SevInfoRequest","SevInfoResponse","SevStatus","SevStatusError","Shared","SnpFeatureNotSupported","SnpPageStateChangeRequest","SnpPageStateChangeResponse","TerminationReason","TerminationRequest","VMGEXIT_PARAMETER_ENABLED","VMPL_SSS_ENABLED","VMSA_REG_PROT_ENABLED","VTOM_ENABLED","all","all","ap_reset_hold","as_error_source","as_error_source","backtrace","backtrace","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","change_snp_page_state","change_snp_state_for_frame","clone","clone","clone","clone_into","clone_into","clone_into","complement","complement","contains","contains","default","default","description","description","difference","difference","empty","empty","encryption_bit","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","get_cpuid","get_cpuid_for_vc_exception","get_hypervisor_feature_support","get_preferred_ghcb_location","get_sev_info","get_sev_status","ghcb_gpa","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","leaf","max_protocol_version","min_protocol_version","new","new","new","not","not","reason","register","register","register_ghcb_location","remove","remove","request_termination","set","set","set_ghcb_address_and_exit","source","source","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","value","response_ghcb_gpa","Disabled","Enabled","GuestReservedArea","Imi","SECRETS_PAGE_MAX_VERSION","SECRETS_PAGE_MIN_VERSION","SECRETS_PAGE_SIZE","SecretsPage","ap_jump_table_pa","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fms","fmt","fmt","fmt","from","from","from","from_repr","get_imi_en","gosv","guest_area_0","guest_area_1","guest_usage","imi_en","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","tsc_factor","type_id","type_id","type_id","validate","version","version","vmpck_0","vmpck_1","vmpck_2","vmpck_3","vmpl0_guest_seq_high","vmpl0_guest_seq_low","vmpl1_guest_seq_high","vmpl1_guest_seq_low","vmpl2_guest_seq_high","vmpl2_guest_seq_low","vmpl3_guest_seq_high","vmpl3_guest_seq_low","vmsa_tweak_bitmap","SegmentRegister","VMSA_PAGE_SIZE","VMSA_SIZE","Vmsa","VmsaPage","attributes","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bp_ibs_tgt_rip","br_from","br_to","calculate_rdx_from_fms","cpl","cr0","cr2","cr3","cr4","cs","cstar","dbgctl","default","default","default","dr0","dr0_addr_mask","dr1","dr1_addr_mask","dr2","dr2_addr_mask","dr3","dr3_addr_mask","dr6","dr7","ds","efer","es","event_inj","fmt","fmt","fmt","fpreg_x87","fpreg_xmm","fpreg_ymm","from","from","from","fs","g_pat","gdtr","gs","guest_exit_code","guest_exit_info_1","guest_exit_info_2","guest_exit_int_info","guest_nrip","guest_tsc_offset","guest_tsc_scale","ibs_dc_lin_addr","ibs_fetch_ctl","ibs_fetch_lin_addr","ibs_op_ctl","ibs_op_data","ibs_op_data2","ibs_op_data3","ibs_op_rop","ic_ibs_extd_ctl","idtr","into","into","into","isst_addr","kernel_gs_base","last_excp_from","last_excp_to","lbr_select","lbr_stack_state","ldtr","limit","lstar","mxcsr","new","new_vcpu_boot","pcpu_id","pkru","pl0_ssp","pl1_ssp","pl2_ssp","pl3_ssp","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","reg_prot_nonce","rflags","rip","rsi","rsp","s_cet","selector","sev_features","sfmask","ss","ssp","star","sysenter_cs","sysenter_eip","sysenter_esp","tlb_id","tr","try_from","try_from","try_from","try_into","try_into","try_into","tsc_aux","type_id","type_id","type_id","u_cet","vintr_ctrl","virtual_tom","vmpl","vmsa","x87_cs","x87_dp","x87_ds","x87_fcw","x87_fop","x87_fsw","x87_ftw","x87_rip","xcr0","xss"],"q":[[0,"oak_sev_guest"],[13,"oak_sev_guest::ap_jump_table"],[29,"oak_sev_guest::cpuid"],[82,"oak_sev_guest::crypto"],[94,"oak_sev_guest::ghcb"],[218,"oak_sev_guest::guest"],[555,"oak_sev_guest::instructions"],[693,"oak_sev_guest::interrupts"],[714,"oak_sev_guest::io"],[783,"oak_sev_guest::msr"],[1143,"oak_sev_guest::msr::RegisterGhcbGpaError"],[1144,"oak_sev_guest::secrets"],[1202,"oak_sev_guest::vmsa"],[1351,"core::result"],[1352,"core::any"],[1353,"core::fmt"],[1354,"core::fmt"],[1355,"zerocopy"],[1356,"core::convert"],[1357,"x86_64::addr"],[1358,"core::iter::traits::collect"],[1359,"core::option"],[1360,"bitflags::iter"],[1361,"bitflags::iter"],[1362,"x86_64::structures::paging::page"],[1363,"lock_api::mutex"],[1364,"lock_api::mutex"],[1365,"x86_64::instructions::port"],[1366,"snafu::no_std_error"],[1367,"snafu::backtrace_impl"],[1368,"x86_64::structures::paging::page"]],"d":["Memory address translation functions.","","This module contains structs that can be used to interpret …","This module provides an optional implementation for …","This module contains an implementation of the …","Utilities for creating and processing SNP Guest Request …","Rust instruction wrappers for managing page state and …","Utilities for building interrupt handlers that need to …","","Rust implementations of the AMD SEV-SNP GHCB MSR protocol.","","This module contains structs that can be used to interpret …","This module provides an implementation of the State Save …","AP Jump Table.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The maximum number of CPUID functions that can be included …","The size of the CPUID page.","The CPUID function result of an invocation for a specific …","The required input valus for invoking CPUID.","The resulting register values after invoking CPUID.","Representation of the CPUID page.","","","","","","","","","The number of CPUID function results included in the page. …","The CPUID function results.","The input value of the EAX register, which represents the …","The EAX register output from calling CPUID.","The EBX register output from calling CPUID.","The input value of the ECX register, which represents the …","The ECX register output from calling CPUID.","The EDX register output from calling CPUID.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The input values when CPUID was invoked.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The resulting register values when CPUID was invoked.","","","","","","","","","","","","","Checks that the count is less than the maximum allowed …","The input value of the XCR0 extended control register.","The value of the IA32_XSS model-specific register.","Wrapper for encrypting and decrypting guest messages.","","","Extracts a decrypted message from an encrypted <code>GuestMessage</code>…","Creates an encrypted payload from the provided message and …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance.","Creates a new instance with a specific sequence number.","","","","","","The size of the GHCB page.","The version of the GHCB protocol and page layout that we …","The guest-host communications block.","Implementation of the GHCB protocol using the wrapped GHCB …","","","","","","","","","Flags indicating which fields in a specific GHCB instance …","","","Get a flags value with all known bits set.","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The current privilege level of the executing code.","","","The intersection of a source flags value with the …","Sends a guest request message to the Platform Secure …","The value of the DR7 debug register.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","Calls a CPUID function for the given input using the GHCB …","Gets the guest-physical address for the guest-hypervisor …","The usage of the GHCB page. A value of 0 indicates the …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Read a 16 bit number from an IO port via the IOIO protocol.","Read a 32 bit number from an IO port via the IOIO protocol.","Read an 8 bit number from an IO port via the IOIO protocol.","Writes a 16 bit number to an IO port via the IOIO protocol.","Writes a 32 bit number to an IO port via the IOIO protocol.","Writes an 8 bit number to an IO port via the IOIO protocol.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Read a 32-bit value from a MMIO memory address via the …","Write a 32-bit value to a MMIO memory address via the MMIO …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Performs a Page State Change operation on the given …","The version of the GHCB protocol and page layout in use.","The value of the RAX register.","The value of the RBX register.","The value of the RCX register.","The value of the RDX register.","Registers the address of the GHCB with the hypervisor.","The intersection of a source flags value with the …","Resets all of the inner GHCB information to its original …","Zeroes the entire GHCB.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","Area that can be used as a shared buffer for communicating …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Guest-controlled exit code.","Guest-controlled exit information 1.","Guest-controlled exit information 2.","Guest-controlled additional information.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Bitmap indicating which quadwords of the save state area …","The guest-physical address of the page that contains the …","Value of the XCR0 extended control register.","The value of the IA32_XSS model-specific reqister.","","","VM absorb request by a migration agent.","VM absorb response.","The AEAD algorithm used for encryption.","256-bit AES-GCM.","Request for an attestation report.","Response containing the attestation report.","The authenticated subsection of the header used for an …","The currently supported attestation report version number.","The currently supported header version number.","The currently supported message version number.","CPUID request.","CPUID response.","Use VLEK if installed, otherwise use the VCEK.","The elliptic curve used.","An ECDSA public key.","VM export request. Used for VM migration.","VM export response. Used for VM migration.","The family ID provided in the ID block will be mixed into …","The size of a guest message, including the header and …","The guest policy will be mixed into the key.","The guest-provided SVN will be mixed into the key.","Flags indicating allowed policy options.","An encrypted guest message.","The header for an encrypted guest request message.","The image ID provided in the ID block will be mixed into …","VM import request. Used during VM migration, typically by …","VM import response. Used during VM migration.","Invalid encryption algorithm.","Invalid message type.","Invalid.","The key selection field was invalid.","The supplied parameters in the request was invalid.","The supplied parameters in the request was invalid.","Request for a derived key.","Request for a derived key.","Response containing the derived key.","Derived key response.","The selected key to use for key derivation.","An iterator over the variants of KeySelect","The status of the report response.","The maximum payload size.","The launch measurement of the VM will be mixed into the …","","The type of message represented by the payload.","Curve P-384.","Attestation report request.","Attestation report response.","The status of the report response.","Reserved.","The selected root key to use for key derivation.","An iterator over the variants of RootKeySelect","Report was successfully generated.","Report was successfully generated.","The guest-provided TCB version will be mixed into the key.","Timestamp counter information response.","","Use the Versioned Chip Endorsement Key (VCEK).","Use the Versioned Chip Endorsement Key (VCEK).","Use the Loaded Chip Endorsement Key (VLEK).","Use the Virtual Machine Root Key (VMRK) provided by the …","VMRK request. Provides the VM root key to use after …","VMRK response. Status of using the VM root key after …","The algorithm used to encrypt the payload.","Get a flags value with all known bits set.","The the sub-section of the header that is treated as …","The authentication tag for the payload and additional data.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The curve for this public key.","","","","","","The derived key if status is <code>KeyStatus::Success</code>.","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the algorithm field as an <code>AeadAlgorithm</code> enum if …","Gets the <code>guest_field_select</code> field as a <code>GuestFieldFlags</code> …","Gets bits 1 and 2 of the <code>key_select</code> field as a <code>KeySelect</code> …","","Gets the message type field as a <code>MessageType</code> enum if …","","","","","Gets bit 0 of the <code>key_select</code> field as a <code>RootKeySelect</code> enum.","Gets the status field as a <code>KeyStatus</code> enum if possible.","Gets the status field as a <code>ReportStatus</code> enum if possible.","Mask indicating which guest data will be mixed into the …","The guest security version number (SVN) to mix into the …","The message header.","The size of the header in bytes.","The header version. Currently only version 1 is supported.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","The size of the encrypted message payload in bytes.","The type of message that the payload represents.","The version of the message. Currently only version 1 is …","The ID of the VM communication key that was used to …","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The encrypted payload.","The R component of this public. The value is zero-extended …","The intersection of a source flags value with the …","The attestation report.","The custom data to be included in the attestation report.","The size of the report.","The S component of this public key. The value is …","The message sequence number. This is used as the IV for …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets bits 1 and 2 of the <code>key_select</code> field.","Sets bit 0 of the <code>key_select</code> field.","","","The status of the operation.","The status of the operation.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The TCB version to mix into the key.","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Checks that header is valid.","Checks that the authenticated header subsection is valid.","Checks that all reserved bytes are zero and that the …","Checks that all reserved bytes are zero and that the …","The VM Protection Level (VMPL) to mix into the derived key.","The VM Protection Level (VMPL) to be used in the …","Code in the page can be executed in rings 0..2.","Code in the page can be executed in ring 3.","The input parameters were invalid.","Insufficient permissions.","The page size does not match the page size entry in the …","The potential errors when calling the PVALIDATE or …","The page cannot be used as a VM save area.","The page is a 2MiB page.","The page is a 4KiB page.","The size of a memory page.","Permission mask used by the RMP.","The target VMPL can read the page.","Representation of the RMP permission used by the RMPADJUST …","The page is not validated.","The page is validated.","Whether a page is in the validated state or not.","The page validation status was not updated. This value is …","Whether the page can be used as a VM save area.","The target VMPL can write to the page.","The page can be used as a VM save area.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bit mask specifying the permission.","Marks a page as validated or unvalidated in the RMP.","The intersection of a source flags value with the …","Adjusts the permissions of a page in the RMP.","Reads an RMP permission mask for a guest page.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The target VMPL to which the permission applies.","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Unconditionally exits from the guest to the hypervisor.","Whether this page can be used as a VM save area.","A reference to the interrupt stack frame will be passed as …","","","The backed-up value of the code segment selector.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","The backed-up value of the RAX register.","The backed-up value of the RBX register.","The backed-up value of the RCX register.","The backed-up value of the RDI register.","The backed-up value of the RDX register.","The backed-up value CPU’s flags register.","The backed-up value of the instruction pointer when the …","The backed-up value of the RSI register.","The backed-up value of the stack pointer.","The backed-up value of the stack segment.","","","","","","A factory for creating port readers and writers that use …","GHCB-based wrapper for a single IO port.","Factory for instantiating IO port readers and writers.","Wrapper implementation that can either create IO ports …","Reader that can be used to read values from a port.","","Writer that can be used to write values to a port.","","","Factory for creating port reader and writers that perform …","An IO port reader and writer implementation that uses the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new IO port reader instance.","","","","Creates a new IO port writer instance.","","","","","","","","","","","","","","Tries to read from the port.","","","","","Tries to write a value to the port.","","","","","","","","","","Alternate injection is enabled for this guest.","The new AMD SEV-SNP feature for starting new Application …","GHCB must be 4KiB-aligned.","","","The register of interest from the result of executing …","A request to execute CPUID for a specific leaf and return …","A response from executing CPUID for a specific leaf. Only …","Debug Register Swapping is enabled for this guest.","","","","","Non-specific termination request.","Contains the guest-physical address of the GHCB page. The …","","The supported range for the GHCB protocol version does not …","","A request for the hypervisor’s supported features.","Flags indicating which features are supported by the …","The gust was run with Instruction-Based Virtualization …","","","Value indicating that the hypervisor does not have a …","The Prevent Host IBS feature is enabled for this guest.","Whether a memory page is private to the guest, or shared …","A request for the hypervisor’s preferred location for …","The response containing the preferred location of the GHCB.","","Reflect-VC is enabled for this guest.","Restricted interrrupt injection is supported.","Restricted Injection is enabled for this guest.","Timer support is available if restricted interrupt …","","Request to register a guest-physical address for the GHCB …","The response containing the result of the GHCB …","Secure Timestamp Counter is enabled for this guest.","SEV is enabled for this guest.","SEV-ES is enabled for this guest.","AMD SEV-SNP is supported.","SMT Protection is enabled for this guest.","SEV-SNP is active for this guest.","SNP Branch Target Buffer Isolation is enabled for this …","The version of the GHCB MSR protocol supported by this …","A request for information about the supported GHCB MSR …","Response from the hypervisor about the encryption bit and …","Flags indicating which SEV features are active.","","","The SEV-SNP features supported by the hypervisor is not …","Request to change a memory page from shared to private or …","The response containing the result of the SNP Page State …","The reason for requesting termination from the hypervisor.","Request for the hypervisor to terminate the guest.","VMGEXIT Parameter is enabled for this guest.aes_gcm","VMPL SSS (Supervisor Shadow Stack) is enabled for this …","VMSA Register Protection is enabled for this guest.","Virtual Top-of-Memory is enabled for this guest.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Requests a change of state for a page to be either private …","Changes the SNP page state assignments in the RMP for a …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The page table bit used for inidicating that a page is …","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the value of the specified register that was returned …","Gets the CPUID values for EAX, EBX, ECX and EDX and …","Requests a bitmap specifying the features supported by the …","Requests the hypervisor’s preferred location for the …","Gets information about the supported GHCB MSR protocol …","Gets the status of SEV features for the current guest.","The preferred guest-physical address for the GHCB.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The CPUID leaf to request. Sub-leafs are not supported by …","The maximum version of the GHCB MSR protocol supported by …","The minimum version of the GHCB MSR protocol supported by …","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The register to return from the result. This protocol only …","The register that the value represents.","Registers the location of the GHCB page for the current …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Requests termination from the hypervisor.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the address of the GHCB page before exiting to the …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The value of the requested register after executing CPUID.","","The initial migration image is not enabled.","The initial migration image is enabled.","Representation of the Secrets Page Guest Reserved Area.","Whether an initial migration image is enabled.","The mmaximum version of the secrets pages that we expect …","The minimum version of the secrets pages that we expect to …","The size of the secrets page.","Representation of the secrets page.","AP Jump Table Physical Address","","","","","","","The family, model and stepping of the CPU as reported in …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the IMI enabled field as and <code>Imi</code> enum if possible.","Guest-OS-visible workarounds provided by the hypervisor …","Area reserved for guest OS use.","Area reserved for guest OS use.","Guest Usage","The least significant bit indicates whether an initial …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Scaling factor that can be used for calculating the real …","","","","Checks that version is the expected value, …","(Rev 2.01+) Version (1 = 2.01) Otherwise: Reserved, MBZ","The version of the secrets page.","VM-platform communication key 0. AES key used for …","VM-platform communication key 1. AES key used for …","VM-platform communication key 2. AES key used for …","VM-platform communication key 3. AES key used for …","(Rev 2.01+) VMPL0 Current Guest Message Sequence Number …","VMPL0 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL1 Current Guest Message Sequence Number …","VMPL1 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL2 Current Guest Message Sequence Number …","VMPL2 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL3 Current Guest Message Sequence Number …","VMPL3 Current Guest Message Sequence Number [31:0]","Bitmap indicating which quadwords of the VM Save Area have …","Representation of a segment register in 64-bit mode.","","","The State Save Area used for SEV-ES and SEV-SNP.","The page containing the Save State Area used for SEV-ES …","The segment attributes. The meaning of the attribute bits …","The base address of the segment.","","","","","","","The value of the guest’s IbsBrTarget MSR.","The value of the guest’s LastBranchFromIP MSR.","The value of the guest’s LastBranchToIP MSR.","When the CPU is reset, the value of RDX is set to the same …","The current protection level (ring).","Control Register 0.","The CR2 control register.","Control Register 3.","Control Register 4.","The code segment.","The target instruction pointer when making a syscall in …","The value of the guest’s DebugCTL MSR.","","","","Debug register 0.","Debug register 0 address mask.","Debug register 1.","Debug register 1 address mask.","Debug register 2.","Debug register 2 address mask.","Debug register 3.","Debug register 3 address mask.","Debug register 6.","Debug register 7.","The data segment.","The extended feature enable register.","The extra segment.","Field used for injecting events into the guest.","","","","The X87 register state.","The XMM register state.","The YMM register state.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","General purpose segment.","The page attribute table for the guest.","Pointer to the global descriptor table.","General purpose segment.","The exit code for automatic exits.","The info 1 value for automatic exits.","The info 2 value for automatic exits.","The interrupt info value for automatic exits.","The next instruction pointer for automatic exits.","The guests time stamp counter offset.","The guest’s time stamp counter scaling factor.","The value of the guest’s IbsDcLinAd MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsOfCtl MSR.","The value of the guest’s IbsOpData1 MSR.","The value of the guest’s IbsOpData2 MSR.","The value of the guest’s IbsOpData3 MSR.","The value of the guest’s IbsOpRip MSR.","The value of the guest’s IbsFetchExtdCtl MSR.","Pointer to the interrupt descriptor table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The address of the interrupt shadow stack.","Register used by the SWAPGS instruction to swap the base …","The value of the guest’s LastIntFromIP MSR.","The value of the guest’s LastIntToIP MSR.","The value of the guest’s LastBranchStackSelect MSR.","The last branch record stack state.","Pointer to the local descriptor table.","The segment limit.","The target instruction pointer when making a syscall in …","The Media eXtensions Control and Status Register.","","Creates a new instance of the VMSA that represents the …","Used to control flushing of the guest TLB. Writing 0 to …","The protect keys rights register.","Shadow stack pointer for ring 0.","Shadow stack pointer for ring 1.","Shadow stack pointer for ring 2.","Shadow stack pointer for ring 3.","The R10 register.","The R11 register.","The R12 register.","The R13 register.","The R14 register.","The R14 register.","The R8 register.","The R9 register.","The RAX register.","The RBP register.","The RBX register.","The RCX register.","The RDI register.","The RDX register.","Nonce used when VMSA register protection is enabled.","The 64-bit flags register.","The instruction pointer.","The RSI register.","The stack pointer.","Shadow stack MSR for supervisor mode settings.","The segment selector.","The guest-controlled SEV features that are selected.","The syscall flag mask.","The stack segment.","The shadow stack pointer.","The target address, code segment and stack segment when …","The code segment when using SYSENTER or SYSEXIT in legacy …","The instruction pointer when using SYSENTER or SYSEXIT in …","The stack pointer when using SYSENTER or SYSEXIT in legacy …","Used by the hardware to track TLB information for the …","Pointer to a valid task state secgement in the global …","","","","","","","Additional information read by the RDTSC instruction.","","","","Shadow stack MSR for user mode settings.","The guest-controlled interrupt injection control settings.","The virtual top-of-memory setting for the guest.","The current VM protection level.","","The X87 floating point code segment.","The X87 floating point data pointer.","The X87 floating point data segment.","The X87 floating point control word.","The X87 floating point opcode.","The X87 floating point status word.","The X87 floating point tag word.","The X87 instruction pointer.","The XCR0 extended control register.","The IA32_XSS machine-specific register."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,106,105,106,105,106,105,106,105,106,105,106,105,106,0,0,0,0,0,0,5,3,8,9,5,3,8,9,9,9,3,8,8,3,8,8,3,5,3,8,9,5,3,3,8,9,5,5,3,8,9,5,5,3,8,9,5,3,8,9,5,3,8,9,9,3,3,0,13,13,13,13,13,13,13,13,13,13,13,21,21,0,0,0,0,21,21,21,21,21,21,21,21,0,21,21,21,22,23,22,23,21,21,21,21,21,21,21,21,22,23,21,22,23,21,21,21,23,23,21,21,22,23,21,21,23,21,21,21,21,21,22,23,21,21,21,21,21,21,21,22,22,22,23,21,21,21,22,23,21,21,22,22,22,22,22,22,21,21,21,21,22,22,22,22,22,23,21,22,23,23,23,23,23,22,21,22,23,21,22,23,21,21,23,23,23,23,21,21,22,23,21,22,23,21,22,23,21,21,23,23,23,23,53,53,53,53,0,52,0,0,0,0,0,0,53,53,42,0,0,53,53,41,0,41,41,0,0,0,41,53,53,52,53,57,49,49,50,0,53,0,53,0,0,0,0,41,0,0,57,53,53,0,42,0,0,49,50,41,53,53,42,44,42,44,53,53,51,41,46,46,41,41,41,41,41,41,41,41,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,42,43,44,45,42,43,44,45,41,41,56,14,46,47,41,48,54,41,41,42,44,49,50,41,14,51,46,52,53,47,54,42,43,44,45,49,41,41,41,41,48,55,50,56,57,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,41,41,41,41,41,41,52,53,42,44,49,50,57,46,47,47,17,46,47,54,48,55,47,54,55,47,47,14,51,51,41,41,41,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,43,45,41,41,41,42,44,41,41,43,45,51,51,51,51,14,46,47,48,43,45,43,45,41,43,45,14,56,41,55,48,55,56,46,41,47,47,43,45,54,55,41,41,41,47,42,43,44,45,41,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,14,51,46,52,53,47,54,42,43,44,45,49,41,48,55,50,56,57,41,14,46,54,55,47,48,60,60,65,65,65,0,63,62,62,0,0,60,0,61,61,0,65,0,60,63,60,60,60,60,60,60,60,60,60,61,62,65,60,63,64,61,62,65,60,63,64,61,62,60,63,64,61,62,60,63,64,60,60,60,60,65,60,63,64,60,61,62,65,60,60,60,60,60,63,64,61,62,65,60,63,64,60,60,60,60,60,60,61,62,65,63,60,60,60,61,62,65,60,63,64,60,60,60,60,60,60,64,0,60,0,0,60,60,60,60,64,61,62,60,63,64,60,61,62,65,60,63,64,61,62,65,60,63,64,61,62,65,60,63,64,60,0,64,0,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,70,76,0,0,0,0,0,0,0,70,76,0,0,67,73,74,70,76,67,73,74,70,76,67,73,74,70,76,67,73,74,70,76,67,70,70,71,67,74,70,71,67,74,70,67,73,74,70,76,67,73,74,70,76,72,73,73,73,76,77,73,73,73,76,67,73,74,70,76,79,78,40,0,0,0,0,0,79,85,85,85,85,86,0,40,86,40,0,0,79,40,82,0,79,0,0,0,38,79,78,79,78,0,0,0,79,79,79,78,79,79,79,0,0,0,0,0,38,86,0,0,0,0,79,79,79,79,78,79,0,40,82,40,82,78,79,78,79,78,79,78,79,78,78,79,79,78,79,78,79,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,40,82,0,0,85,38,79,85,38,79,78,79,78,79,78,79,40,82,78,79,78,79,90,85,38,78,78,79,85,40,40,38,78,78,78,78,78,86,79,79,79,79,79,82,82,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,78,79,78,78,79,79,78,79,78,79,78,79,85,38,0,0,0,0,0,0,89,78,79,78,79,78,79,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,78,79,78,79,78,79,78,79,78,79,87,90,90,91,92,83,78,79,93,87,88,0,78,79,0,78,79,0,40,82,78,79,78,79,78,79,85,38,79,40,82,78,79,91,90,90,107,87,88,88,108,89,89,92,96,96,83,97,97,109,110,98,98,93,85,40,38,78,78,86,79,82,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,91,90,107,87,88,108,89,92,96,83,97,109,110,98,93,85,40,38,78,86,79,82,78,79,88,111,101,101,0,0,0,0,0,0,99,99,100,101,99,100,101,100,99,100,101,99,100,101,101,100,100,100,100,99,100,99,100,101,99,100,101,99,100,101,100,99,100,101,100,99,100,100,100,100,100,99,99,99,99,99,99,99,99,100,0,0,0,0,0,104,104,102,103,104,102,103,104,103,103,103,0,103,103,103,103,103,103,103,103,102,103,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,102,103,104,103,103,103,102,103,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,102,103,104,103,103,103,103,103,103,103,104,103,103,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,103,103,103,103,103,103,103,103,103,103,102,103,104,102,103,104,103,102,103,104,103,103,103,103,102,103,103,103,103,103,103,103,103,103,103],"f":"```````````````{ce{}{}}000{cc{}}011{c{{b{e}}}{}{}}000{cd{}}0``````33333333````````{{ff}h}{{jl}n}{{fl}n}{{A`l}n}{{Abl}n}7{Adf}888`9999`777777776666{Ab{{b{AfAh}}}}```::{{AjAl}{{b{cAh}}}{AnB`Bb}}{{AjcAl}{{b{AfAh}}}{AnB`Bb}};<{{{Bf{Bd}}}{{b{AjAh}}}}{{{Bf{Bd}}Bh}{{b{AjAh}}}}<<;`````````````````{{}Bj}{{{Bl{c}}}{{Bl{c}}}{{C`{Bn}}{Cb{Bn}}Cd}}{BnBn}10{{BjBj}Bj}{{BjBj}Af}10{BjCf}021{ce{}{}}00000{BjBj}{{BjBj}h}`{{}Bn}96{{{Bl{c}}ChCh}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}`:{{Bjc}Af{{Cl{}{{Cj{Bj}}}}}}{{Bnl}n}{{Bjl}n}0000{cc{}}00{Cf{{Cn{Bj}}}}{CfBj}00{cBj{{Cl{}{{Cj{Bj}}}}}}{Ah{{Cn{Bj}}}}{{{Bl{c}}}{{b{ChAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}f}{{b{A`Ah}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}}Ch{{C`{Bn}}{Cb{Bn}}Cd}}`{{BjBj}Af}{{BjBj}Bj}?{ce{}{}}00{Bjc{}}{{{Bl{c}}D`}{{b{D`Ah}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}D`}{{b{DbAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}D`}{{b{BdAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}D`D`}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}D`Db}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}D`Bd}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{Bjh}0{Bj{{Dd{Bj}}}}{Bj{{Df{Bj}}}}{{{Bl{c}}Ch}{{b{DbAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}ChDb}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}Db}{{b{BhAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{{Bl{c}}DbBh}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{ce}{{Bl{c}}}{{C`{Bn}}{Cb{Bn}}Cd}Dh}{{}Bn}{BjBj}{{{Bl{c}}{Dj{e}}Dl}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}Dn}`````{{{Bl{c}}}{{b{AfE`}}}{{C`{Bn}}{Cb{Bn}}Cd}}{{BjBj}Af}{{{Bl{c}}}Af{{C`{Bn}}{Cb{Bn}}Cd}}{BnAf}{{BjBjh}Af}{{{Bl{c}}Ch}{{b{AfAh}}}{{C`{Bn}}{Cb{Bn}}Cd}}`{{BjBj}Bj}5````05{c{{b{e}}}{}{}}00000{cd{}}002`````````````````````````````````````````````````````````````````````{{}Eb}``{{EbEb}Eb}{{EbEb}Af}10{EbBh}021{ce{}{}}00000000000000000000000000000000000{EdEd}{EfEf}{EhEh}{EjEj}{{ce}Af{}{}}000{EbEb}{{EbEb}h}`{{}Al}{{}El}{{}En}>{{}F`}`>?{{EdEd}h}{{EhEh}h}{{FbFb}h}{{FdFd}h}{{Ebc}Af{{Cl{}{{Cj{Eb}}}}}}{{All}n}{{Ffl}n}{{Ell}n}{{Fhl}n}{{Fjl}n}{{Enl}n}{{Fll}n}{{Edl}n}{{Efl}n}{{Ehl}n}{{Ejl}n}{{Fbl}n}{{Ebl}n}000{{F`l}n}{{Fnl}n}{{Fdl}n}{{G`l}n}{{Gbl}n}{cc{}}00000000000000000{Bh{{Cn{Eb}}}}{BhEb}00{cEb{{Cl{}{{Cj{Eb}}}}}}{Ah{{Cn{Eb}}}}{Bd{{Cn{Fh}}}}{Bd{{Cn{Fj}}}}{Db{{Cn{Ed}}}}{Db{{Cn{Eh}}}}{Db{{Cn{Fb}}}}{Db{{Cn{Fd}}}}{Db{{Cn{Gb}}}}{El{{Cn{Fh}}}}{En{{Cn{Eb}}}}{EnEd}{{}Fj}{El{{Cn{Fj}}}}1111{EnEh}{Fl{{Cn{Fb}}}}{Fn{{Cn{Fd}}}}`````{{EbEb}Af}{{EbEb}Eb}{{EbEb}h}{ce{}{}}0000000000000000000{Ebc{}}{Ebh}0{{}Ef}{{}Ej}{Eb{{Dd{Eb}}}}{Eb{{Df{Eb}}}}{EfGd}{EjGd}````{{}Al}{{}El}{{}En}{{}F`}{Ef{{Cn{c}}}{}}{Ej{{Cn{c}}}{}}10{EbEb}{{EfGd}{{Cn{c}}}{}}{{EjGd}{{Cn{c}}}{}}``{{EbEb}Af}`````{{EbEbh}Af}{{EnEd}Af}{{EnEh}Af}{Ef{{Gf{Gd{Cn{Gd}}}}}}{Ej{{Gf{Gd{Cn{Gd}}}}}}``{{EbEb}Eb}60`{ce{}{}}0007{c{{b{e}}}{}{}}00000000000000000000000000000000000{cd{}}000000000000000003{Al{{b{AfAh}}}}{El{{b{AfAh}}}}{Fl{{b{AfAh}}}}{Fn{{b{AfAh}}}}``````````````````````{{}Gh}{{GhGh}Gh}{{GhGh}Af}10{GhBd}021::::::::::::{GjGj}{GlGl}{GhGh}{GnGn}{H`H`}{{ce}Af{}{}}00003{{GhGh}h}9:{{HbHb}h}1{{GnGn}h}{{H`H`}h}{{Ghc}Af{{Cl{}{{Cj{Gh}}}}}}{{Gjl}n}{{Gll}n}{{Hbl}n}{{Ghl}n}0000{{Gnl}n}{{H`l}n}{cc{}}00000{Bd{{Cn{Gh}}}}{BdGh}00{cGh{{Cl{}{{Cj{Gh}}}}}}{Ah{{Cn{Gh}}}}{Db{{Cn{Gj}}}}{Db{{Cn{Gl}}}}{Db{{Cn{Hb}}}}{Bd{{Cn{Gn}}}}{{GhGh}Af}{{GhGh}Gh}{{GhGh}h}{ce{}{}}00000{Ghc{}}{Ghh}0{Gh{{Dd{Gh}}}}{Gh{{Df{Gh}}}}{GhGh}`{{GdGlGj}{{b{AfHb}}}}9{{GdGlH`}{{b{AfHb}}}}{Gd{{b{{Gf{H`Gl}}Hb}}}}{{GhGhh}Af};<;`99999<{c{{b{e}}}{}{}}00000000000{cd{}}00000={{}Af}``<<`{{Adl}n}{cc{}}>```````````443`````````````>>>>>>>>>>00000>>>>>{{{Hd{cg}}}{{Hf{cge}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Hj{{Bl{Bn}}}}}Hl}{{}Hl}{{HnD`}e{}{{I`{c}}}}{{{Hf{cge}}D`}{{Ib{cge}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{IdD`}{{If{c}}}{}}{{HlD`}{{Ih{c}}}{}}{{HnD`}e{}{{Ij{c}}}}321<<<<<<<<<<{I`{{b{cAh}}}{}}{{{Ib{cge}}}{{b{D`Ah}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ib{cge}}}{{b{BdAh}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ib{cge}}}{{b{DbAh}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ih{c}}}{{b{cAh}}}{}}{{Ijc}{{b{AfAh}}}{}}{{{Ib{cge}}Bd}{{b{AfAh}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ib{cge}}Db}{{b{AfAh}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ib{cge}}D`}{{b{AfAh}}}Hh{{C`{Bn}}{Cb{Bn}}Cd}{{C`{{Bl{e}}}}Cd}}{{{Ih{c}}c}{{b{AfAh}}}{}}{cd{}}0000``````````````````````````````````````````````````````````{{}Il}{{}In}{{}{{b{hAh}}}}{cJ`{}}0{E`{{Cn{Jb}}}}{Jd{{Cn{Jb}}}}{{IlIl}Il}{{InIn}In}{{IlIl}Af}{{InIn}Af}3210{IlBh}0{InBh}05432{ce{}{}}0000000000000000000000000000000000000000000{E`{{Cn{J`}}}}{Jd{{Cn{J`}}}}{Jf{{b{AfAh}}}}{{{Dj{Jh}}Dl}{{b{AfAh}}}}{JjJj}{DlDl}{InIn}{{ce}Af{}{}}00{IlIl}2{{IlIl}h}{{InIn}h}{{}Il}{{}In}{E`Ah}{JdAh}{{IlIl}Il}{{InIn}In}54`{{JjJj}h}{{DlDl}h}9{{Ilc}Af{{Cl{}{{Cj{Il}}}}}}{{Inc}Af{{Cl{}{{Cj{In}}}}}}{{Jjl}n}{{E`l}n}0{{Dll}n}{{Ill}n}0000{{Jll}n}{{Inl}n}0000{{Jdl}n}0{cc{}}000000000000000000000{Bh{{Cn{Il}}}}{Bh{{Cn{In}}}}{BhIl}0{BhIn}010{cIl{{Cl{}{{Cj{Il}}}}}}{cIn{{Cl{}{{Cj{In}}}}}}{Ah{{Cn{Il}}}}{Ah{{Cn{In}}}}{Bd{{Cn{Jj}}}}{Bd{{Cn{Dl}}}}{Jn{{b{K`Ah}}}}{{DbAd}{{b{AfAh}}}}{{}{{b{IlAh}}}}{{}{{b{KbAh}}}}{{}{{b{KdAh}}}}{{}{{b{InJd}}}}`{{IlIl}Af}{{InIn}Af}{{IlIl}Il}{{InIn}In}{{IlIl}h}{{InIn}h}{ce{}{}}000000000000000000000{Ilc{}}{Inc{}}{Ilh}{Inh}10{Il{{Dd{Il}}}}{In{{Dd{In}}}}{Il{{Df{Il}}}}{In{{Df{In}}}}```{Gd{{b{KfAh}}}}{Gd{{b{KhE`}}}}{{GdDl}{{b{JfAh}}}}{IlIl}{InIn}```{Kh{{b{AfE`}}}}{{IlIl}Af}{{InIn}Af}{KjKl}{{IlIlh}Af}{{InInh}Af}{KfAf}{E`{{Cn{J`}}}}{Jd{{Cn{J`}}}}{{IlIl}Il}{{InIn}In}9810{ce{}{}}00{cKn{}}0;:{c{{b{e}}}{}{}}{Bh{{b{KdAh}}}}111{Bh{{b{K`Ah}}}}22{Bh{{b{KbAh}}}}33{Bh{{b{L`c}}}{}}44{Bh{{b{LbAh}}}}5555{Bh{{b{LdAh}}}}6666{Bh{{b{IlAh}}}}77777777777777777777777777{cd{}}000000000000000000000<;```````````::::::`{{Lfl}n}{{Lhl}n}{{Ljl}n}{cc{}}00{Db{{Cn{Lj}}}}{Lh{{Cn{Lj}}}}`````{ce{}{}}00??????`777{Lh{{b{AfAh}}}}``````````````````````111111```{{BdBdBd}Bh}````````{{}Ll}{{}Ln}{{}M`}``````````````{{Lll}n}{{Lnl}n}{{M`l}n}```;;;`````````````````````888``````````{LnLl}{BhLn}`````````````````````````````````````{c{{b{e}}}{}{}}00000`{cd{}}00```````````````","c":[],"p":[[6,"Result",1351],[5,"TypeId",1352],[5,"CpuidInput",29],[1,"bool"],[5,"CpuidFunction",29],[5,"Formatter",1353],[8,"Result",1353],[5,"CpuidOutput",29],[5,"CpuidPage",29],[5,"MutableInterruptStackFrame",693],[1,"unit"],[1,"str"],[5,"GuestMessageEncryptor",82],[5,"GuestMessage",218],[10,"AsBytes",1354],[10,"FromBytes",1354],[10,"Message",218],[1,"u8"],[1,"slice"],[1,"u64"],[5,"ValidBitmap",94],[5,"GhcbProtocol",94],[5,"Ghcb",94],[10,"AsMut",1355],[10,"AsRef",1355],[10,"Sized",1356],[1,"u128"],[5,"PhysAddr",1357],[17,"Item"],[10,"IntoIterator",1358],[6,"Option",1359],[1,"u16"],[1,"u32"],[5,"Iter",1360],[5,"IterNames",1360],[10,"Translator",0],[5,"PhysFrame",1361],[6,"PageAssignment",783],[10,"NotGiantPageSize",1362],[6,"RegisterGhcbGpaError",783],[5,"GuestFieldFlags",218],[6,"KeySelect",218],[5,"KeySelectIter",218],[6,"RootKeySelect",218],[5,"RootKeySelectIter",218],[5,"GuestMessageHeader",218],[5,"KeyRequest",218],[5,"AttestationRequest",218],[6,"KeyStatus",218],[6,"ReportStatus",218],[5,"AuthenticatedHeader",218],[6,"AeadAlgorithm",218],[6,"MessageType",218],[5,"KeyResponse",218],[5,"AttestationResponse",218],[5,"EcdsaPublicKey",218],[6,"EccCurve",218],[1,"usize"],[1,"tuple"],[5,"PermissionMask",555],[6,"Validation",555],[6,"PageSize",555],[6,"Vmsa",555],[5,"RmpPermission",555],[6,"InstructionError",555],[5,"Mutex",1363],[5,"GhcbIoFactory",714],[10,"RawMutex",1363],[8,"Spinlock",1364],[6,"PortFactoryWrapper",714],[10,"IoPortFactory",714],[10,"PortReader",714],[5,"GhcbIoPort",714],[5,"RawIoPortFactory",714],[8,"Port",1365],[6,"PortWrapper",714],[10,"PortWriter",714],[5,"HypervisorFeatureSupportResponse",783],[5,"SevStatus",783],[10,"Error",1366],[5,"Backtrace",1367],[6,"SevStatusError",783],[5,"SnpPageStateChangeRequest",783],[6,"Size2MiB",1362],[6,"CpuidRegister",783],[6,"TerminationReason",783],[5,"CpuidRequest",783],[5,"CpuidResponse",783],[5,"PreferredGhcbGpaResponse",783],[5,"SevInfoResponse",783],[5,"GhcbGpa",783],[5,"RegisterGhcbGpaRequest",783],[5,"TerminationRequest",783],[1,"never"],[5,"String",1368],[5,"RegisterGhcbGpaResponse",783],[5,"SnpPageStateChangeResponse",783],[5,"ApResetHoldResponse",783],[5,"GuestReservedArea",1144],[5,"SecretsPage",1144],[6,"Imi",1144],[5,"VmsaPage",1202],[5,"Vmsa",1202],[5,"SegmentRegister",1202],[5,"ApResetAddress",13],[5,"ApJumpTable",13],[5,"SevInfoRequest",783],[5,"PreferredGhcbGpaRequest",783],[5,"HypervisorFeatureSupportRequest",783],[5,"ApResetHoldRequest",783],[15,"GhcbResponseLocationNotMatchingRequest",1143]],"b":[[120,"impl-Flags-for-ValidBitmap"],[121,"impl-ValidBitmap"],[141,"impl-Binary-for-ValidBitmap"],[142,"impl-LowerHex-for-ValidBitmap"],[143,"impl-Octal-for-ValidBitmap"],[144,"impl-UpperHex-for-ValidBitmap"],[145,"impl-Debug-for-ValidBitmap"],[150,"impl-Flags-for-ValidBitmap"],[151,"impl-ValidBitmap"],[290,"impl-GuestFieldFlags"],[291,"impl-Flags-for-GuestFieldFlags"],[366,"impl-Octal-for-GuestFieldFlags"],[367,"impl-UpperHex-for-GuestFieldFlags"],[368,"impl-LowerHex-for-GuestFieldFlags"],[369,"impl-Binary-for-GuestFieldFlags"],[394,"impl-GuestFieldFlags"],[395,"impl-Flags-for-GuestFieldFlags"],[580,"impl-PermissionMask"],[581,"impl-Flags-for-PermissionMask"],[618,"impl-Debug-for-PermissionMask"],[619,"impl-LowerHex-for-PermissionMask"],[620,"impl-Octal-for-PermissionMask"],[621,"impl-UpperHex-for-PermissionMask"],[622,"impl-Binary-for-PermissionMask"],[632,"impl-Flags-for-PermissionMask"],[633,"impl-PermissionMask"],[769,"impl-PortReader%3Cu16%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[770,"impl-PortReader%3Cu8%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[771,"impl-PortReader%3Cu32%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[774,"impl-PortWriter%3Cu8%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[775,"impl-PortWriter%3Cu32%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[776,"impl-PortWriter%3Cu16%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[856,"impl-Flags-for-HypervisorFeatureSupportResponse"],[857,"impl-HypervisorFeatureSupportResponse"],[858,"impl-SevStatus"],[859,"impl-Flags-for-SevStatus"],[937,"impl-Debug-for-RegisterGhcbGpaError"],[938,"impl-Display-for-RegisterGhcbGpaError"],[940,"impl-UpperHex-for-HypervisorFeatureSupportResponse"],[941,"impl-Octal-for-HypervisorFeatureSupportResponse"],[942,"impl-Binary-for-HypervisorFeatureSupportResponse"],[943,"impl-Debug-for-HypervisorFeatureSupportResponse"],[944,"impl-LowerHex-for-HypervisorFeatureSupportResponse"],[946,"impl-UpperHex-for-SevStatus"],[947,"impl-Debug-for-SevStatus"],[948,"impl-Binary-for-SevStatus"],[949,"impl-LowerHex-for-SevStatus"],[950,"impl-Octal-for-SevStatus"],[951,"impl-Display-for-SevStatusError"],[952,"impl-Debug-for-SevStatusError"],[977,"impl-HypervisorFeatureSupportResponse"],[978,"impl-Flags-for-HypervisorFeatureSupportResponse"],[979,"impl-Flags-for-SevStatus"],[980,"impl-SevStatus"]]}],\
["oak_sev_snp_attestation_report",{"doc":"AMD SEV-SNP data structures for attestation reports.","t":"FFGTPFFPTPFFSTTTTGTFPOONNOONNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNOOOOONNNNOOOOONNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOOONNNNNNNNNNNNNNNNNNNNNNNNNOOONNOOONNOOOOONNOOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOO","n":["AttestationReport","AttestationReportData","AuthorKey","DEBUG","EcdsaP384Sha384","EcdsaSignature","GuestPolicy","Invalid","MIGRATE_MA","No","PlatformInfo","PolicyFlags","REPORT_DATA_SIZE","RESERVED","SINGLE_SOCKET","SMT","SMT_EN","SigningAlgorithm","TSME_EN","TcbVersion","Yes","abi_major","abi_minor","all","all","author_key_digest","author_key_en","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","boot_loader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip_id","committed_build","committed_major","committed_minor","committed_tcb","complement","complement","contains","contains","current_build","current_major","current_minor","current_tcb","data","default","default","difference","difference","empty","empty","eq","extend","extend","family_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_report_data","from_repr","from_repr","get_author_key_en","get_flags","get_platform_info","get_signature_algo","guest_svn","has_debug_flag","host_data","id_key_digest","image_id","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","launch_tcb","measurement","microcode","not","not","platform_info","policy","r","remove","remove","report_data","report_id","report_id_ma","reported_tcb","s","set","set","signature","signature_algo","snp","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","tee","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","validate","validate","validate","validate","validate_format","version","vmpl"],"q":[[0,"oak_sev_snp_attestation_report"],[225,"core::iter::traits::collect"],[226,"core::fmt"],[227,"core::fmt"],[228,"core::result"],[229,"bitflags::iter"],[230,"bitflags::iter"]],"d":["A signed attestation report.","The data contained in an attestation report.","Whether the author key digest is included in the report.","Debugging the guest is allowed.","ECDSA using curve P-384 with SHA-384.","An ECDSA signature.","The required policy for a guest to run.","Invalid.","The guest can be associated with a migration agent.","The author key digest is not present.","Information on the platform configuration.","Flags indicating allowed policy options.","The number of bytes of custom data that can be included in …","Reserved, must always be 1.","The guest can only be activated on a single socket.","Simulatneous multi-threading (SMT) is allowed.","Indicates that simulatneous multi-threading (SMT) is …","The signing algorithm used for the report signature.","Indicates that transparent secure memory encryption (TSME) …","The version of all the components in the Trusted Computing …","The author key digest is present.","The minimum ABI major version required to launch the guest.","The minimum ABI minor version required to launch the guest.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The SHA-384 digest of the author public key used to …","The least significant bit indicates Whether the digest of …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The current security version number (SVN) of the secure …","","","","","","","","","","","","","","","","","","","Identifier unique to the chip, unless the ID has been …","The build number of the committed secure firmware ABI …","The major number of the committed secure firmware ABI …","The minor number of the committed secure firmware ABI …","The committed TCB version.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The build number of the current secure firmware ABI …","The major number of the current secure firmware ABI …","The minor number of the current secure firmware ABI …","The current version of each of the components in the …","The data contained in the report.","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The family ID provided at launch.","The allowed settings for the guest.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Creates a new AttestationReport with all zeros and the …","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the author key enabled field as an <code>AuthorKey</code> enum if …","Gets the flags field as a <code>PolicyFlags</code> representation if …","Gets the platform info field as a <code>PlatformInfo</code> …","Gets the signing algorithm field as a <code>SigningAlgorithm</code> …","The guest security version number.","","Custom data provided by the hypervisor at launch.","The SHA-384 digest of the ID public key used to sign the …","The image ID provided at launch.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The value of the current TCB version when the guest was …","The measurement of the VM memory calculated at launch.","The lowest current patch level of all the CPU cores.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Information about the platform.","The policy required by the guest VM to be launched.","The R component of this signature. The value is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Guest-provided data. The custom data provided in the …","The report ID of this guest.","The report ID of this guest’s migration agent.","The reported TCB version that was used to generate the …","The S component of this signature. The value is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The signature over the data.","The algorithm used to sign the report.","The current SVN of the SNP firmware.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The current SVN of the PSP operating system.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Checks that the report data is valid and the signature has …","Checks that fields with specific expected values or ranges …","Checks that the flags are valid and the reserved bytes are …","Checks that the reserved bytes are all zero.","Checks that the reserved bytes are all zero.","The version of the attestation report format.","The VMPL value that was passed in the request."],"i":[0,0,0,2,7,0,0,7,2,16,0,0,0,2,2,2,1,0,1,0,16,14,14,1,2,13,13,1,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,15,10,13,1,7,14,15,2,16,17,10,13,1,7,14,15,2,16,17,13,13,13,13,13,1,2,1,2,13,13,13,13,10,1,2,1,2,1,2,7,1,2,13,14,10,13,1,1,1,1,7,14,15,2,2,2,2,16,17,10,13,1,7,14,15,2,16,17,1,2,1,1,2,2,1,2,1,2,1,2,10,7,16,13,14,13,13,13,10,13,13,13,1,2,1,2,1,2,10,13,1,7,14,15,2,16,17,1,2,1,2,1,2,1,2,1,2,13,13,15,1,2,13,13,17,1,2,13,13,13,13,17,1,2,10,13,15,1,2,1,2,1,2,15,1,2,10,13,1,7,14,15,2,16,17,10,13,1,7,14,15,2,16,17,10,13,1,7,14,15,2,16,17,1,2,10,13,14,15,17,13,13],"f":"```````````````````````{{}b}{{}d}``{{bb}b}{{dd}d}{{bb}f}{{dd}f}3210{bh}0{dj}05432`{ce{}{}}00000000000000000`````{bb}{dd}{{bb}l}{{dd}l}`````<;:9<;{{nn}l}{{bc}f{{Ab{}{{A`{b}}}}}}{{dc}f{{Ab{}{{A`{d}}}}}}``{{AdAf}Ah}{{AjAf}Ah}{{bAf}Ah}000{{nAf}Ah}{{AlAf}Ah}{{AnAf}Ah}{{dAf}Ah}000{{B`Af}Ah}{{BbAf}Ah}{cc{}}00000000{h{{Bd{b}}}}{j{{Bd{d}}}}{hb}0{jd}010{cb{{Ab{}{{A`{b}}}}}}{cd{{Ab{}{{A`{d}}}}}}{Bf{{Bd{b}}}}{Bf{{Bd{d}}}}{{{Bj{Bh}}}Ad}{Bl{{Bd{n}}}}{h{{Bd{B`}}}}{Aj{{Bd{B`}}}}{Al{{Bd{d}}}}{Aj{{Bd{b}}}}{Aj{{Bd{n}}}}`{Ad{{Bn{lBf}}}}```{{bb}f}{{dd}f}{{bb}b}{{dd}d}{{bb}l}{{dd}l}{ce{}{}}00000000{bc{}}{dc{}}{bl}{dl}10{b{{C`{b}}}}{d{{C`{d}}}}{b{{Cb{b}}}}{d{{Cb{d}}}}```{bb}{dd}```{{bb}f}{{dd}f}`````{{bbl}f}{{ddl}f}```{{bb}b}{{dd}d}5410`54{c{{Bn{e}}}{}{}}00000000000000000{cCd{}}0000000032{Ad{{Bn{fBf}}}}{Aj{{Bn{fBf}}}}{Al{{Bn{fBf}}}}{An{{Bn{fBf}}}}{Bb{{Bn{fBf}}}}``","c":[],"p":[[5,"PlatformInfo",0],[5,"PolicyFlags",0],[1,"unit"],[1,"u64"],[1,"u16"],[1,"bool"],[6,"SigningAlgorithm",0],[17,"Item"],[10,"IntoIterator",225],[5,"AttestationReport",0],[5,"Formatter",226],[8,"Result",226],[5,"AttestationReportData",0],[5,"GuestPolicy",0],[5,"TcbVersion",0],[6,"AuthorKey",0],[5,"EcdsaSignature",0],[6,"Option",227],[1,"str"],[1,"u8"],[1,"array"],[1,"u32"],[6,"Result",228],[5,"Iter",229],[5,"IterNames",229],[5,"TypeId",230]],"b":[[35,"impl-PlatformInfo"],[36,"impl-Flags-for-PlatformInfo"],[37,"impl-Flags-for-PolicyFlags"],[38,"impl-PolicyFlags"],[89,"impl-UpperHex-for-PlatformInfo"],[90,"impl-Octal-for-PlatformInfo"],[91,"impl-Binary-for-PlatformInfo"],[92,"impl-LowerHex-for-PlatformInfo"],[96,"impl-Octal-for-PolicyFlags"],[97,"impl-Binary-for-PolicyFlags"],[98,"impl-LowerHex-for-PolicyFlags"],[99,"impl-UpperHex-for-PolicyFlags"],[113,"impl-Flags-for-PlatformInfo"],[114,"impl-PlatformInfo"],[115,"impl-Flags-for-PolicyFlags"],[116,"impl-PolicyFlags"]]}],\
["oak_simple_io",{"doc":"Simple I/O driver for communication between the guest and …","t":"FSSSSFKNNNNNNNNNNNNNNNNNN","n":["BufferDescriptor","DEFAULT_INPUT_BUFFER","DEFAULT_OUTPUT_BUFFER","INPUT_BUFFER_LENGTH","OUTPUT_BUFFER_LENGTH","SimpleIo","Translator","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new_with_defaults","read_bytes","try_from","try_from","try_into","try_into","type_id","type_id","write_bytes"],"q":[[0,"oak_simple_io"],[25,"oak_sev_guest::io"],[26,"core::result"],[27,"core::alloc"],[28,"alloc::collections::vec_deque"],[29,"core::option"],[30,"core::any"]],"d":["I/O port descriptor for a buffer.","Default I/O ports for the input buffer.","Default I/O ports for the output buffer.","The length of the buffer that will be used for input …","The length of the buffer that will be used for output …","The simple I/O channel driver implementation.","Memory address translation function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads the next available bytes from the input buffer, if …","","","","","","","Writes the data to the output buffer and notifies the host."],"i":[0,0,0,0,0,0,0,2,3,2,3,2,3,2,3,3,3,3,2,3,2,3,2,3,3],"f":"```````{ce{}{}}000{cc{}}011{{bcdde}{{j{{f{e}}h}}}ln}{{bce}{{j{{f{e}}h}}}ln}{{{f{c}}}{{Ad{{Ab{A`}}}}}n}{c{{j{e}}}{}{}}000{cAf{}}0{{{f{c}}{Ah{A`}}}{{j{Ajh}}}n}","c":[],"p":[[6,"PortFactoryWrapper",25],[5,"BufferDescriptor",0],[5,"SimpleIo",0],[1,"str"],[6,"Result",26],[10,"Translator",0],[10,"Allocator",27],[1,"u8"],[5,"VecDeque",28],[6,"Option",29],[5,"TypeId",30],[1,"slice"],[1,"usize"]],"b":[]}],\
["oak_stage0",{"doc":"","t":"HHHCHHHJJJJJFNNNHNHOOOOOHNNN","n":["create_gdt","create_idt","jump_to_kernel","paging","panic","rust64_start","sev_status","PAGE_TABLE_REFS","PDPT","PD_0","PD_3","PML4","PageTableRefs","borrow","borrow_mut","from","init_page_table_refs","into","map_additional_memory","pd_0","pd_3","pdpt","pml4","pt_0","remap_first_huge_page","try_from","try_into","type_id"],"q":[[0,"oak_stage0"],[7,"oak_stage0::paging"],[28,"x86_64::structures::gdt"],[29,"x86_64::registers::segmentation"],[30,"x86_64::structures::idt"],[31,"x86_64::addr"],[32,"alloc::boxed"],[33,"core::alloc"],[34,"core::panic::panic_info"],[35,"oak_sev_guest::msr"],[36,"core::result"],[37,"core::any"]],"d":["","","Passes control to the operating system kernel. No more …","","Common panic routine for the Stage0 binaries. This needs …","Entry point for the Rust code in the stage0 BIOS.","Returns the value of the SEV_STATUS MSR that’s safe to …","References to all the pages tables we care about.","","","","","Wrapper for the page table references so that we can …","","","Returns the argument unchanged.","Initialises the page table references.","Calls <code>U::from(self)</code>.","Maps the first 1GiB of memory using 2MiB hugepages, except …","The page directory covering virtual memory range 0..1GiB.","The page directory covering virtual memory range 3..4GiB.","The page-directory pointer table covering virtual memory …","The root page-map level 4 table coverting virtual memory …","The page table covering virtual memory range 0..2MiB where …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,15,0,15,15,15,15,15,0,15,15,15],"f":"{b{{f{dd}}}}{hj}{{l{n{`c}}}A`Ab}`{AdA`}{AfA`}{{}Ah}``````{ce{}{}}0{cc{}}{Afj}20`````0{c{{Aj{e}}}{}{}}0{cAl{}}","c":[],"p":[[5,"GlobalDescriptorTable",28],[5,"SegmentSelector",29],[1,"tuple"],[5,"InterruptDescriptorTable",30],[1,"unit"],[5,"VirtAddr",31],[5,"Box",32],[1,"never"],[10,"Allocator",33],[5,"PanicInfo",34],[1,"u64"],[5,"SevStatus",35],[6,"Result",36],[5,"TypeId",37],[5,"PageTableRefs",7]],"b":[]}],\
["oak_stage0_dice",{"doc":"This crate contains the logic used by stage0 to create …","t":"FONNOONONHNOOHHOONNN","n":["Measurements","acpi_sha2_256_digest","borrow","borrow_mut","cmdline","cmdline_sha2_256_digest","default","eventlog_sha2_256_digest","from","generate_dice_data","into","kernel_sha2_256_digest","memory_map_sha2_256_digest","mock_attestation_report","mock_derived_key","ram_disk_sha2_256_digest","setup_data_sha2_256_digest","try_from","try_into","type_id"],"q":[[0,"oak_stage0_dice"],[20,"oak_dice::evidence"],[21,"oak_dice::evidence"],[22,"core::result"],[23,"core::ops::function"],[24,"core::any"]],"d":["Measurements of various components in Stage1.","The concatenated measurement of the command used for …","","","The raw kernel command-line.","The measurement of the kernel command-line.","","Eventlog measurement containing the hashes of other …","Returns the argument unchanged.","Generates attestation evidence for the ‘measurements’ …","Calls <code>U::from(self)</code>.","The measurement of the kernel image.","The measurement of the physical memory map.","Returns an attestation report.","Returns a fixed key filled with zeros.","The measurement of the initial RAM disk.","The measurement of the kernel setup data.","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1],"f":"``{ce{}{}}0``{{}b}`{cc{}}{{bced}f{{Ad{{j{h}}}{{l{{Ab{nA`}}}}}}}{{Ad{}{{l{{Ab{{j{h}}A`}}}}}}}}3``{{{j{h}}}{{Ab{nA`}}}}{{}{{Ab{{j{h}}A`}}}}``{c{{Ab{e}}}{}{}}0{cAf{}}","c":[],"p":[[5,"Measurements",0],[6,"TeePlatform",20],[5,"Stage0DiceData",20],[1,"u8"],[1,"array"],[17,"Output"],[5,"AttestationReport",21],[1,"str"],[6,"Result",22],[10,"FnOnce",23],[5,"TypeId",24]],"b":[]}],\
["oak_tdx_guest",{"doc":"Rust implementation of features needed to implement guest …","t":"CCGPFTPPTTTTPPPFGKFHNONNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNHHOOONOONNNNNNNNNNNNONONNNNNMNNNNNNNNNNNNNNNNNNPGNNHNNNHHHHHHHHHNNN","n":["tdcall","vmcall","AcceptMemoryError","AlreadyAccepted","Attributes","DEBUG","InvalidOperand","InvalidSize","KL","PERFMON","PKS","SYSPROF","Size1GiB","Size2MiB","Size4KiB","TdInfo","TdxPageSize","TdxSize","VeInfo","accept_memory","all","attributes","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","default","difference","empty","exit_qualification","exit_reason","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","get_td_info","get_ve_info","gpa_width","guest_linear_address","guest_physical_address","insert","instruction_info","instruction_length","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","max_vcpus","not","num_vcpus","remove","set","sub","sub_assign","symmetric_difference","tdx_size","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","MapFailure","MapGpaError","borrow","borrow_mut","call_cpuid","fmt","from","into","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","map_gpa","msr_read","msr_write","try_from","try_into","type_id"],"q":[[0,"oak_tdx_guest"],[2,"oak_tdx_guest::tdcall"],[114,"oak_tdx_guest::vmcall"],[134,"x86_64::structures::paging::frame"],[135,"core::result"],[136,"x86_64::structures::paging::page"],[137,"core::iter::traits::collect"],[138,"core::fmt"],[139,"core::fmt"],[140,"bitflags::iter"],[141,"bitflags::iter"],[142,"core::any"],[143,"core::core_arch::x86::cpuid"],[144,"x86_64::structures::paging::page"]],"d":["Rust implementation of the TDX TDCALL instruction.","Rust implementation of the sub-functions of the TDX TDCALL[…","Error when accepting guest-physical memory.","The page is not pending and has already been accepted.","Attributes of a TD.","The guest TD runs in off-TD debug mode.","The supplied address is not valid.","The specified page size is invalid.","Whether the TD is allowed to use Key Locker.","Wehther the TD is allowed to use Perfmon and PERF_METRICS.","Whether the TD is allowed to use Supervisor Protection …","Whether system profiling is enabled on the TD.","","","","Information about the TD’s execution environment.","","Trait for getting the associated <code>TdxPageSize</code> enum for a …","Information about a virtualization exception (#VE).","Accepts a pending private memory page to make it usable in …","Get a flags value with all known bits set.","The TD attributes passed as part of TDINIT.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The exit qualification.","The exit reason.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Gets information about the TD’s execution environment by …","Gets information about the recent virtualization exception …","The effective GPA width. The “shared” bit is at …","The guest-linear address (virtual address).","The guest-physical address.","The bitwise or (<code>|</code>) of the bits in two flags values.","Additional context for the instruction that caused the #VE.","The length of the instruction that caused the #VE.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The maximum possible number of vCPUs for this TD.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The number of vCPUs enabled on this TD.","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","Error when mapping a guest-physical address (GPA) as …","","","Executes CPUID for the specified leaf and sub-leaf.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads two bytes from the specified IO port.","Reads four bytes from the specified IO port.","Reads a single byte from the specified IO port.","Writes two bytes to the specified IO port.","Writes four bytes to the specified IO port.","Writes a single byte to the specified IO port.","Maps a range of guest-physical addresses (GPAs) as shared …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","",""],"i":[0,0,0,3,0,7,3,3,7,7,7,7,15,15,15,0,0,0,0,0,7,18,7,7,7,7,7,7,7,7,18,19,7,3,15,18,19,7,3,15,7,7,7,7,7,19,19,7,7,7,7,7,3,3,15,18,19,7,3,15,7,7,7,7,7,7,3,0,0,18,19,19,7,19,19,7,7,18,19,7,3,15,7,7,7,7,7,18,7,18,7,7,7,7,7,6,3,7,18,19,7,3,15,18,19,7,3,15,18,19,7,3,15,7,26,0,26,26,0,26,26,26,0,0,0,0,0,0,0,0,0,26,26,26],"f":"```````````````````{{{b{c}}}{{h{df}}}{jl}}{{}n}`{{nn}n}{{nn}d}10{nA`}021{ce{}{}}000000000{nn}{{nn}Ab}656``{{nc}d{{Af{}{{Ad{n}}}}}}{{nAh}Aj}000{{fAh}{{h{dAl}}}}{{fAh}Aj}{{AnAh}Aj}{cc{}}0000{A`{{B`{n}}}}{A`n}00{cn{{Af{}{{Ad{n}}}}}}{Bb{{B`{n}}}}{A`{{B`{f}}}}{{}Bd}{{}{{B`{Bf}}}}```{{nn}d}``{{nn}n}?{ce{}{}}0000{nc{}}{nAb}0{n{{Bh{n}}}}{n{{Bj{n}}}}`{nn}`7{{nnAb}d}787{{}An}{cBl{}}:{c{{h{e}}}{}{}}000000000{cBn{}}0000;``::{{C`C`}{{h{CbBb}}}}{{CdAh}Aj}{cc{}}={C`{{h{CfBb}}}}{C`{{h{C`Bb}}}}{C`{{h{ChBb}}}}{{C`Cf}{{h{dBb}}}}{{C`C`}{{h{dBb}}}}{{C`Ch}{{h{dBb}}}}{{{Cl{Cj}}}{{h{dCd}}}}{C`{{h{A`Bb}}}}{{C`A`}{{h{dBb}}}}==<","c":[],"p":[[5,"PhysFrame",134],[1,"unit"],[6,"AcceptMemoryError",2],[6,"Result",135],[10,"PageSize",136],[10,"TdxSize",2],[5,"Attributes",2],[1,"u64"],[1,"bool"],[17,"Item"],[10,"IntoIterator",137],[5,"Formatter",138],[8,"Result",138],[5,"Error",138],[6,"TdxPageSize",2],[6,"Option",139],[1,"str"],[5,"TdInfo",2],[5,"VeInfo",2],[5,"Iter",140],[5,"IterNames",140],[5,"String",141],[5,"TypeId",142],[1,"u32"],[5,"CpuidResult",143],[6,"MapGpaError",114],[1,"u16"],[1,"u8"],[6,"Size4KiB",136],[5,"PhysFrameRange",134]],"b":[[26,"impl-Attributes"],[27,"impl-Flags-for-Attributes"],[48,"impl-Octal-for-Attributes"],[49,"impl-UpperHex-for-Attributes"],[50,"impl-Binary-for-Attributes"],[51,"impl-LowerHex-for-Attributes"],[52,"impl-Display-for-AcceptMemoryError"],[53,"impl-Debug-for-AcceptMemoryError"],[61,"impl-Flags-for-Attributes"],[62,"impl-Attributes"]]}],\
["oak_virtio",{"doc":"Simple virtio drivers implemented based on polling.","t":"KKKKCMCMCMFNNNNNNNNNNNNNNFFFNNNNNNNNNNNNOONNNNNNNNNNNNNNNNCNFFFTFFFTTTFONNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNOONONNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOFNNNNNNCNNCNNNNPPSTTFPPPPPPFGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["InverseTranslator","Read","Translator","Write","console","flush","queue","read_exact","vsock","write_all","Console","borrow","borrow_mut","find_and_configure_device","flush","from","get_status","into","read_bytes","read_exact","try_from","try_into","type_id","write_all","write_bytes","DeviceWriteOnlyQueue","DriverWriteOnlyQueue","Queue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_avail_addr","get_desc_addr","get_used_addr","inner","inner","into","into","into","must_notify_device","new","new","read_next_used_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virtq","write_buffer","AvailRing","Desc","DescFlags","NO_NOTIFY","RingFlags","UsedElem","UsedRing","VIRTQ_DESC_F_INDIRECT","VIRTQ_DESC_F_NEXT","VIRTQ_DESC_F_WRITE","VirtQueue","addr","all","all","avail","avail_event","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","complement","contains","contains","default","default","default","desc","difference","difference","empty","empty","extend","extend","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","id","idx","idx","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","len","length","new","next","not","not","remove","remove","ring","ring","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","used","used_event","VSock","borrow","borrow_mut","find_and_configure_device","from","get_status","into","packet","read_filtered_packet","read_packet","socket","try_from","try_into","type_id","write_packet","CreditRequest","CreditUpdate","HEADER_SIZE","NO_RECEIVE","NO_SEND","Packet","Request","Response","Rst","Rw","Shutdown","Stream","VSockFlags","VSockOp","VSockType","all","as_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","get_buf_alloc","get_dst_cid","get_dst_port","get_flags","get_fwd_cnt","get_len","get_op","get_payload","get_payload_len","get_src_cid","get_src_port","get_type","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","new","new_control","new_data","not","remove","set","set_buf_alloc","set_dst_cid","set_dst_port","set_flags","set_fwd_cnt","set_op","set_src_cid","set_src_port","sub","sub_assign","symmetric_difference","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","Socket","SocketConnector","SocketListener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","flush","from","from","from","into","into","into","new","new","read_exact","shutdown","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_all"],"q":[[0,"oak_virtio"],[10,"oak_virtio::console"],[25,"oak_virtio::queue"],[60,"oak_virtio::queue::virtq"],[232,"oak_virtio::vsock"],[247,"oak_virtio::vsock::packet"],[367,"oak_virtio::vsock::socket"],[399,"anyhow"],[400,"rust_hypervisor_firmware_virtio::pci"],[401,"core::alloc"],[402,"rust_hypervisor_firmware_virtio::virtio"],[403,"alloc::collections::vec_deque"],[404,"core::option"],[405,"core::result"],[406,"core::any"],[407,"x86_64::addr"],[408,"alloc::vec"],[409,"core::iter::traits::collect"],[410,"core::fmt"],[411,"core::fmt"],[412,"bitflags::iter"],[413,"core::fmt"]],"d":["","Read bytes from a source.","Memory address translation functions.","Write bytes to a source.","","Flush any output buffers, if they exist.","","Read bytes until <code>data</code> has been filled.","","Write all bytes in <code>data</code>.","Simple driver implementation for a virtio serial/console …","","","Finds the virtio console PCI device, initialises the …","","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Reads the next available bytes from the receive queue, if …","","","","","","Writes the data to the transmit queue.","A queue where the descriptor buffers are only writable by …","A queue where the descriptor buffers are only writable by …","A container for a boxed virtqueue and its associated …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the available ring.","Gets the address of the descriptor table.","Gets the address of the used ring.","The inner queue.","The inner queue.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the device wants to be notified of queue …","","","Reads the contents of the next used buffer from the queue, …","","","","","","","","","","","Writes the data to a buffer and adds its descriptor to the …","The ring buffer that indicates which descriptors have been …","A descriptor for a byte buffer used in a virtio queue.","Flags about a descriptor.","This indicates that the owner of the ring does not require …","Flags about the available and used rings.","An element indicating a used descriptor chain.","The ring buffer that indicates which available descriptors …","This means the buffer contains a list of buffer …","This marks a buffer as continuing via the next field to …","This marks a buffer as device write-only (otherwise device …","A split virtqueue implementation.","The guest-physical address of the buffer.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The available ring, which is controlled by the driver.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","The descriptor table.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Driver-specific flags for the queue.","Flags providing more info about this descriptor.","Device-specific flags for the queue.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The index of the head of the used descriptor chain.","The next index that will be used in the ring (modulo …","The next index that will be used in the ring (modulo …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Total length of the bytes that was written to the used …","The lengths of the buffer.","","The index of the next descriptor in the chain if this is …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The ring-buffer containing indices of the heads of …","The ring-buffer containing the used elements.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The used ring, which is controlled by the device.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","Low-level driver interface to interact with a virtio …","","","Finds the virtio vsock PCI device, initialises the device, …","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Virtio vsock packet implementation.","Reads the next valid packet that matches the filter, if …","Reads the next valid packet from the receive queue, if one …","","","","","Writes the packet to the transmit queue.","Request for update on credit to calculate stream buffer …","Give update on credit to support flow control, either in …","The size of the packet header in bytes.","Indicates that no more payload data will be received.","Indicates that no more payload data will be senn.","","Connection request.","Connections accepted response.","Connection reset, either in reponse to a shutdown request …","Represents a data packet.","Connection shutdown request.","Only stream sockets are currently supported in the Virtio …","Flags about a socket connection.","Vsock Ops.","Socket Type.","Get a flags value with all known bits set.","Returns the entire buffer as a slice.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the size of the peer’s stream buffer.","Gets the destination CID.","Gets the destination port.","Gets the flags.","Gets the number of bytes that the peer has read out of the …","Gets the payload length.","Gets the op that the packet represents.","Gets the payload.","Gets the actual length of the payload in the current …","Gets the source CID.","Gets the source port.","Gets the type of socket the packet is intended for.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Creates a new <code>Packet</code> from an existing buffer.","Creates a new control <code>Packet</code> with only a header.","Creates a new data <code>Packet</code> with the given payload length.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the size of the stream buffer.","Sets the destination CID.","Sets the destination port.","Sets the flags.","Sets the number of bytes read from the stream buffer.","Sets the op that the packet represents.","Sets the source CID.","Sets the source port.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","A connection-oriented socket.","Connector to initiate a connection to a listener on the …","Listener that waits for a connection initiated from the …","Listens for a connection from the host on the specified …","","","","","","","Tries to connect to a listener on the host.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Shuts the connection down.","","","","","","","","","",""],"i":[0,0,0,0,0,1,0,4,0,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,22,23,19,22,23,19,22,23,19,19,19,19,22,23,22,23,19,19,22,23,23,22,23,19,22,23,19,22,23,19,0,22,0,0,0,26,0,0,0,25,25,25,0,35,25,26,53,30,25,26,25,26,25,26,25,26,25,25,26,26,25,26,25,26,29,53,25,35,26,30,28,29,53,25,35,26,30,28,25,28,25,28,25,26,25,26,29,30,28,53,25,26,25,26,25,26,29,35,30,25,25,25,25,25,35,26,26,26,26,26,30,28,29,53,25,35,26,30,28,25,26,25,25,26,26,25,26,25,26,25,26,28,29,30,25,26,25,26,25,26,29,53,25,35,26,30,28,25,26,25,26,25,26,25,26,25,26,28,35,35,35,25,26,25,26,29,30,25,26,25,26,25,26,25,26,25,28,25,26,29,53,25,35,26,30,28,29,53,25,35,26,30,28,29,53,25,35,26,30,28,25,26,53,29,0,40,40,40,40,40,40,0,40,40,0,40,40,40,40,45,45,0,44,44,0,45,45,45,45,45,46,0,0,0,44,41,44,44,44,44,44,44,44,44,41,45,44,46,41,45,44,46,44,44,44,44,45,44,46,44,41,45,45,44,44,44,44,44,46,46,41,45,44,46,44,44,44,44,44,44,45,46,41,41,41,41,41,41,41,41,41,41,41,41,44,44,44,41,45,44,46,44,44,44,44,44,41,41,41,44,44,44,41,41,41,41,41,41,41,41,44,44,44,45,46,44,41,45,44,46,41,45,44,46,41,45,44,46,44,0,0,0,50,52,50,51,52,50,51,52,51,52,50,51,52,50,51,52,50,51,51,52,50,51,52,50,51,52,50,51,51],"f":"`````{b{{f{d}}}}`{{h{l{j}}}{{f{d}}}}`{{b{l{j}}}{{f{d}}}}`{ce{}{}}0{{ceg}{{f{{A`{ng}}}}}AbAdAf}{{{A`{ce}}}{{f{d}}}AhAf}{cc{}}{{{A`{ce}}}AjAhAf}4{{{A`{ce}}}{{An{{Al{j}}}}}AhAf}{{{A`{ce}}{l{j}}}{{f{d}}}AhAf}{c{{B`{e}}}{}{}}0{cBb{}}2{{{A`{ce}}{l{j}}}{{An{Bd}}}AhAf}```999999666{{{Bf{c}}}BhAf}00``:::{{{Bf{c}}}BjAf}{{ce}{{Bl{e}}}AbAf}{{ce}{{Bn{e}}}AbAf}{{{Bn{c}}}{{An{{C`{j}}}}}Af}777777666`{{{Bl{c}}{l{j}}}{{An{Bd}}}Af}````````````{{}Cb}{{}Cd}``{{CbCb}Cb}{{CdCd}Cd}{{CbCb}d}{{CdCd}d}3210{CbCf}0{CdCf}05432{ce{}{}}0000000000000{CbCb}{ChCh}{{ce}d{}{}}02{CdCd}{{CbCb}Bj}{{CdCd}Bj}{{}Cj}{{}Cl}{{}Ch}`?>{{}Cb}{{}Cd}{{Cbc}d{{D`{}{{Cn{Cb}}}}}}{{Cdc}d{{D`{}{{Cn{Cd}}}}}}```{{CbDb}Dd}0000{{DfDb}Dd}{{CdDb}Dd}0000{{ClDb}Dd}{{ChDb}Dd}{cc{}}000000{Cf{{An{Cb}}}}{Cf{{An{Cd}}}}{CfCb}0{CfCd}010{cCb{{D`{}{{Cn{Cb}}}}}}{cCd{{D`{}{{Cn{Cd}}}}}}{Dh{{An{Cb}}}}{Dh{{An{Cd}}}}```{{CbCb}d}{{CdCd}d}{{CbCb}Cb}{{CdCd}Cd}{{CbCb}Bj}{{CdCd}Bj}{ce{}{}}000000{Cbc{}}{Cdc{}}{CbBj}{CdBj}10{Cb{{Dj{Cb}}}}{Cd{{Dj{Cd}}}}{Cb{{Dl{Cb}}}}{Cd{{Dl{Cd}}}}``{{CbDnAj}Df}`{CbCb}{CdCd}{{CbCb}d}{{CdCd}d}``{{CbCbBj}d}{{CdCdBj}d}{{CbCb}Cb}{{CdCd}Cd}5410{ce{}{}}065{c{{B`{e}}}{}{}}0000000000000{cBb{}}00000043```22{{ceg}{{f{{E`{ng}}}}}AbAdAf}{cc{}}{{{E`{ce}}}AjAhAf}5`{{{E`{ce}}gBj}{{An{Eb}}}AhAf{{Ef{Eb}{{Ed{Bj}}}}}}{{{E`{ce}}}{{An{Eb}}}AhAf}`665{{{E`{ce}}Eb}dAhAf}```````````````{{}Eh}{Eb{{l{j}}}}{{EhEh}Eh}{{EhEh}d}10{EhAj}021========{EhEh}{{EhEh}Bj}46{{EjEj}Bj}1{{ElEl}Bj}{{Ehc}d{{D`{}{{Cn{Eh}}}}}}{{EbDb}Dd}{{EjDb}{{B`{dEn}}}}{{EjDb}Dd}{{EhDb}Dd}0000{{ElDb}{{B`{dEn}}}}{{ElDb}Dd}{cc{}}000{Aj{{An{Eh}}}}{AjEh}00{cEh{{D`{}{{Cn{Eh}}}}}}{Dh{{An{Eh}}}}{Cf{{An{Ej}}}}{Cf{{An{El}}}}{EbAj}{EbF`}1{EbEh}22{Eb{{f{Ej}}}}{Eb{{l{j}}}}{EbBd}45{Eb{{f{El}}}}{{EhEh}d}{{EhEh}Eh}{{EhEh}Bj}{ce{}{}}000{Ehc{}}{EhBj}0{Eh{{Dj{Eh}}}}{Eh{{Dl{Eh}}}}{{{C`{j}}}{{f{Eb}}}}{{AjAjEj}{{f{Eb}}}}{{{l{j}}AjAj}{{f{Eb}}}}{EhEh};{{EhEhBj}d}{{EbAj}d}{{EbF`}d}1{{EbEh}d}2{{EbEj}{{f{d}}}}23?{{EhEh}d}{{EhEh}Eh}{cFb{}}02{c{{B`{e}}}{}{}}0000000{cBb{}}0003```{{{Fd{ce}}}{{f{{Ff{ce}}}}}AhAf}{ce{}{}}00000{{{Fh{ce}}}{{f{{Ff{ce}}}}}AhAf}{{{Ff{ce}}}{{f{d}}}AhAf}{cc{}}00333{{{E`{ce}}AjAj}{{Fh{ce}}}AhAf}{{{E`{ce}}Aj}{{Fd{ce}}}AhAf}{{{Ff{ce}}{l{j}}}{{f{d}}}AhAf}{{{Ff{ce}}}dAhAf}::::::9991","c":[],"p":[[10,"Write",0],[1,"unit"],[8,"Result",399],[10,"Read",0],[1,"u8"],[1,"slice"],[5,"VirtioPciTransport",400],[5,"Console",10],[10,"Translator",0],[10,"InverseTranslator",0],[10,"Allocator",401],[10,"VirtioTransport",402],[1,"u32"],[5,"VecDeque",403],[6,"Option",404],[6,"Result",405],[5,"TypeId",406],[1,"usize"],[5,"Queue",25],[5,"VirtAddr",407],[1,"bool"],[5,"DriverWriteOnlyQueue",25],[5,"DeviceWriteOnlyQueue",25],[5,"Vec",408],[5,"DescFlags",60],[5,"RingFlags",60],[1,"u16"],[5,"UsedElem",60],[5,"AvailRing",60],[5,"UsedRing",60],[17,"Item"],[10,"IntoIterator",409],[5,"Formatter",410],[8,"Result",410],[5,"Desc",60],[1,"str"],[5,"Iter",411],[5,"IterNames",411],[5,"PhysAddr",407],[5,"VSock",232],[5,"Packet",247],[17,"Output"],[10,"Fn",412],[5,"VSockFlags",247],[6,"VSockOp",247],[6,"VSockType",247],[5,"Error",410],[1,"u64"],[5,"String",413],[5,"SocketListener",367],[5,"Socket",367],[5,"SocketConnector",367],[5,"VirtQueue",60]],"b":[[84,"impl-Flags-for-DescFlags"],[85,"impl-DescFlags"],[86,"impl-Flags-for-RingFlags"],[87,"impl-RingFlags"],[127,"impl-Octal-for-DescFlags"],[128,"impl-Debug-for-DescFlags"],[129,"impl-Binary-for-DescFlags"],[130,"impl-UpperHex-for-DescFlags"],[131,"impl-LowerHex-for-DescFlags"],[133,"impl-UpperHex-for-RingFlags"],[134,"impl-Debug-for-RingFlags"],[135,"impl-Binary-for-RingFlags"],[136,"impl-Octal-for-RingFlags"],[137,"impl-LowerHex-for-RingFlags"],[149,"impl-Flags-for-DescFlags"],[150,"impl-DescFlags"],[151,"impl-RingFlags"],[152,"impl-Flags-for-RingFlags"],[268,"impl-Flags-for-VSockFlags"],[269,"impl-VSockFlags"],[289,"impl-Display-for-VSockOp"],[290,"impl-Debug-for-VSockOp"],[291,"impl-UpperHex-for-VSockFlags"],[292,"impl-Debug-for-VSockFlags"],[293,"impl-Octal-for-VSockFlags"],[294,"impl-Binary-for-VSockFlags"],[295,"impl-LowerHex-for-VSockFlags"],[296,"impl-Display-for-VSockType"],[297,"impl-Debug-for-VSockType"],[303,"impl-VSockFlags"],[304,"impl-Flags-for-VSockFlags"]]}],\
["sev_serial",{"doc":"","t":"FNNNNNNNNNNNN","n":["SerialPort","borrow","borrow_mut","from","init","into","new","send","try_from","try_into","type_id","wait_for_empty_output","write_str"],"q":[[0,"sev_serial"],[13,"core::result"],[14,"oak_sev_guest::io"],[15,"core::any"],[16,"core::fmt"]],"d":["Basic implementation that allows for writing to a serial …","","","Returns the argument unchanged.","Initializes the serial port for writing.","Calls <code>U::from(self)</code>.","Creates a new instance of a serial port with the given …","Sends a byte of data via the serial port.","","","","Wait until the output buffer is empty.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{cc{}}{b{{h{df}}}}2{{jl}b}{{bn}{{h{df}}}}{c{{h{e}}}{}{}}0{cA`{}}4{{bf}Ab}","c":[],"p":[[5,"SerialPort",0],[1,"unit"],[1,"str"],[6,"Result",13],[1,"u16"],[6,"PortFactoryWrapper",14],[1,"u8"],[5,"TypeId",15],[8,"Result",16]],"b":[]}],\
["snp_measurement",{"doc":"","t":"FONNNNNNNNNNNNNOHCCNONNNNNNOCPGPPPSFGPPPPOOOOOONNNNNNNNNNNNONONNNNNNNNNONNNNONNNNNNNNNNNNNNNNNPSSSSFPSSSSSSSSPFFFGFPNNNNNNNNNNNNOONNNNNNNNNNNNONNNNNNONOOHNOONNNNONOOOONNNNNNNNNNNNNNNNNNSSSSHH","n":["Cli","attestation_measurements_output_dir","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","from","from_arg_matches","from_arg_matches_mut","group_id","into","legacy_boot","main","page","stage0","stage0_path","stage0_rom","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vcpu_count","vmsa","Cpuid","ImiPage","Invalid","No","Normal","PAGE_INFO_SIZE","PageInfo","PageType","Secrets","Unmeasured","Vmsa","Zero","_imi_page","_length","_reserved","_vmpl1_perms","_vmpl2_perms","_vmpl3_perms","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contents","default","digest_cur","fmt","fmt","fmt","from","from","from","from","from_repr","from_repr","gpa","into","into","into","new","page_type","set_contents_from_page_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_current_digest","update_from_data","update_from_snp_page","update_from_vmsa","Cpuid","FIRMWARE_TOP","GUID_TABLE_END_OFFSET","GUID_TABLE_ENTRY_HEADER_SIZE","GUID_TABLE_FOOTER_GUID","GuidTableEntryHeader","Invalid","LEGACY_MAX_SIZE","LEGACY_TOP","SEV_ES_RESET_GUID","SEV_MEATADATA_GUID","SEV_METADATA_ENTRY_SIZE","SEV_METADATA_HEADER_SIZE","SEV_METADATA_VERSION","SEV_SECTION_SIGNATURE","Secrets","SevEsResetBlock","SevMetadataHeader","SevMetadataPageInfo","SevMetadataPageType","Stage0Info","Unmeasured","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","count","fmt","from","from","from","from","from","from","from","from_repr","get_guid_table_content","get_sev_es_reset_block","get_snp_pages","guid","into","into","into","into","into","into","legacy_offset","legacy_shadow_bytes","legacy_start_address","length","load_stage0","new","page_count","page_type","parse","parse","parse","parse_firmware_guid_table","rip","rom_bytes","segment_base","size","start_address","start_address","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CPU_FAMILY","CPU_MODEL","CPU_STEPPING","VMSA_ADDRESS","get_ap_vmsa","get_boot_vmsa"],"q":[[0,"snp_measurement"],[29,"snp_measurement::page"],[94,"snp_measurement::stage0"],[185,"snp_measurement::vmsa"],[191,"clap_builder::builder::command"],[192,"clap_builder::parser::matches::arg_matches"],[193,"clap_builder"],[194,"core::result"],[195,"clap_builder::util::id"],[196,"core::option"],[197,"anyhow"],[198,"std::path"],[199,"core::any"],[200,"core::fmt"],[201,"core::fmt"],[202,"oak_sev_guest::vmsa"],[203,"alloc::vec"],[204,"std::collections::hash::map"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The SEV-SNP CPUID page.","Whether the page is part of an initial migration image …","Reserved value.","The page is not an IMI page.","The page is a normal page.","The size of the PageInfo struct.","Implementation of the Page Info structure used for …","The type of page being measured.","The SEV-SNP secrets page.","A page that is encrypted but not measured.","The page contains a VM state save area (VMSA) for a vCPU.","A page filled with zeros.","Whether the page is part of an initial migration image. …","The length of this struct in bytes.","Reserved. Must be 0.","The permissions for VMPL1. For now we treat this as …","The permissions for VMPL2. For now we treat this as …","The permissions for VMPL3. For now we treat this as …","","","","","","","","","","","","","The SHA-384 digest of the contents to be measured for …","","The current measurement up to this point.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Try to create Self from the raw representation","Try to create Self from the raw representation","The guest-physical address of the page being measured.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The type of page being measured.","Sets the <code>contents</code> field based to the SHA-384 digest of the …","","","","","","","","","","","","","Calculates the SHA-384 digest of the struct’s memory and …","Updates the current measurement digest from a byte slice …","Updates the current measurement digest for a …","Updates the current measurement digest from a VMSA page.","","The address of the first byte after the end of the …","The reverse offset from the end of the firmware blob to …","The size of the header of an entry in the GUID table.","The footer GUID identifying the end of the GUID table.","The header of a guid table entry.","","The maximum size of the shadow firmware for legacy boot.","The address of the first byte after the end of the legacy …","The GUID identifying the SEV ES reset block GUID table …","The GUID identifying the SEV metadata GUID table entry.","The size of the SEV metadata section entry.","The size of the SEV metadata section header.","The version of SEV metadata sections we expect to …","The expected first 4 bytes of the SEV metadata section …","","The instruction pointer and code segment base that will be …","The header of the SEV metadata section.","Information about the pages specified in the firmware SEV …","The page types used in the firmware SEV metadata section …","The contents of the Stage 0 firmware ROM image and its …","","","","","","","","","","","","","","The bytes of the State 0 firmware ROM image.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the main contents of the GUID table, excluding the …","Gets the SEV-ES reset block from the firmware image.","Gets the SEV-SNP specific pages defined in the firmware …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The offset into the firmware ROM image from where the …","Gets the bytes of the legacy boot shadow of the ROM image.","The start address of the legacy boot shadow of the …","","Loads the Stage 0 firmware ROM image from the supplied …","","","","","","","Parses the GUID table from the firmware image as a map.","","Gets the bytes of the entire ROM image.","","","The start address of the firmware ROM in guest memory.","","","","","","","","","","","","","","","","","","","","The CPU family of the vCPU we expect to be running on.","The CPU model of the vCPU we expect to be running on.","The stepping of the vCPU we expect to be running on.","The guest-physical address of the VMSA page.","Gets the initial VMSA for additional vCPUs that are not …","Gets the initial VMSA for the vCPU that is used to boot …"],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,14,0,14,13,14,0,0,0,14,14,14,14,12,12,12,12,12,12,12,13,14,12,13,14,12,13,14,12,13,14,12,12,12,12,13,14,12,13,14,14,13,14,12,12,13,14,12,12,12,12,13,14,12,13,14,12,13,14,12,13,14,12,12,12,12,17,0,0,0,0,0,17,0,0,0,0,0,0,0,0,17,0,0,0,0,0,17,24,25,23,27,28,17,24,25,23,27,28,17,24,28,17,24,25,23,23,27,28,17,17,24,24,24,27,24,25,23,27,28,17,24,24,24,28,0,24,25,25,25,27,28,24,23,24,23,27,24,25,24,25,23,27,28,17,24,25,23,27,28,17,24,25,23,27,28,17,0,0,0,0,0,0],"f":"``{bb}0{ce{}{}}0{dd}{{ce}f{}{}}{{}b}0{cc{}}{h{{l{dj}}}}0{{}{{A`{n}}}}6`{{}{{Ab{f}}}}``{dAd}`8{c{{l{e}}}{}{}}0{cAf{}}{{dh}{{l{fj}}}}0````````````````````;;;;;;{AhAh}{AjAj}{AlAl}<<<`{{}Ah}`{{AhAn}B`}{{AjAn}B`}{{AlAn}B`}>>{BbAl}?{Bd{{A`{Aj}}}}{Bd{{A`{Al}}}}`{ce{}{}}007`{{Ah{Bf{Bd}}}f}111>>>>>>==={Ahf}{{Ah{Bf{Bd}}Bh}f}{{AhAlBh}f}{{AhBjBh}f}``````````````````````555555555555``{{BbAn}B`}{cc{}}00{BlBn}111{Bl{{A`{Bb}}}}{C`{{Bf{Bd}}}}{C`Bn}{C`{{Cd{Cb}}}}`<<<<<<`2``{Ad{{Ab{C`}}}}{{{Cd{Bd}}}C`}``{{{Bf{Bd}}}Cb}{{{Bf{Bd}}}Cf}{{{Bf{Bd}}}Ch}{C`{{Cl{Cj{Bf{Bd}}}}}}`8````{c{{l{e}}}{}{}}00000000000{cAf{}}00000````{BnBj}{{}Bj}","c":[],"p":[[5,"Command",191],[5,"Cli",0],[1,"unit"],[5,"ArgMatches",192],[8,"Error",193],[6,"Result",194],[5,"Id",195],[6,"Option",196],[8,"Result",197],[5,"PathBuf",198],[5,"TypeId",199],[5,"PageInfo",29],[6,"ImiPage",29],[6,"PageType",29],[5,"Formatter",200],[8,"Result",200],[6,"SevMetadataPageType",94],[1,"u8"],[1,"slice"],[5,"PhysAddr",201],[5,"VmsaPage",202],[1,"u32"],[5,"SevEsResetBlock",94],[5,"Stage0Info",94],[5,"SevMetadataPageInfo",94],[5,"Vec",203],[5,"GuidTableEntryHeader",94],[5,"SevMetadataHeader",94],[1,"u128"],[5,"HashMap",204]],"b":[]}],\
["xtask",{"doc":"","t":"JCCQHHHHHHHHFFFGFPFGFPPPPFPPPPFKKPFPFGGFPNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNONNNNNNNOMNNNNNOONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONHNOOONNNNNOHHMNNMNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOO","n":["PROCESSES","files","internal","spread","workspace_path","crate_manifest_files","file_contains","is_source_code_file","read_file","source_files","to_string","workspace_manifest_files","CargoBinary","CargoManifest","Cmd","Command","Completion","Completion","Context","Dependency","DependencySpec","Error","Json","Multiple","Ok","Opt","RunCargoClippy","RunCargoDeny","RunCargoUdeps","RunTests","RunTestsOpt","Runnable","Running","Single","SingleStatusResult","Skipped","Status","StatusResultValue","Step","StepResult","Text","all_dependencies_with_toml_path","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_dependencies","cleanup","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","command","command","command","command_for_update","command_for_update","command_for_update","default","dependencies","description","description","deserialize","deserialize","deserialize","deserialize","dev_dependencies","dry_run","eq","eq","eq","failed_steps_prefixes","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","keep_going","kill","kill_process","len","logs","logs","name","new","new","new_in_dir","partial_cmp","partial_cmp","path","process_gone","read_to_end","result","result","root","run","run","run_step","stderr","stdout","success","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value","values","command","name","name","steps"],"q":[[0,"xtask"],[5,"xtask::files"],[12,"xtask::internal"],[262,"xtask::internal::Step"],[266,"std::path"],[267,"core::iter::traits::iterator"],[268,"std::path"],[269,"alloc::vec"],[270,"clap_builder::builder::command"],[271,"core::result"],[272,"serde::de"],[273,"core::fmt"],[274,"core::fmt"],[275,"clap_builder"],[276,"clap_builder::util::id"],[277,"core::option"],[278,"core::hash"],[279,"alloc::boxed"],[280,"core::convert"],[281,"core::iter::traits::collect"],[282,"core::cmp"],[283,"tokio::io::async_read"],[284,"core::marker"],[285,"core::future::future"],[286,"core::pin"],[287,"core::any"]],"d":["","","","Similar to the <code>vec!</code> macro, but also allows a “spread” …","","Return an iterator of all known Cargo Manifest files that …","","Return whether the provided path refers to a source file …","","Return an iterator of all the first-party and non-ignored …","","Return an iterator of all known Cargo Manifest files that …","Partial information about a Cargo binary, as included in a …","Partial representation of Cargo manifest files.","A single command.","","","","Encapsulates all the local state relative to a step, and …","Partial representation of a dependency in a <code>Cargo.toml</code> …","Partial representation of a Json specification of a …","","Json specification of a dependency.","","","","","","","","","A task that can be run asynchronously.","A task that is currently running asynchronously.","","","","A construct to keep track of the status of the execution. …","The outcome of an individual step of execution.","An execution step, which may be a single <code>Runnable</code>, or a …","","Plaintext specification of a dependency with only the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a description of the task, e.g. the command line …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Attempts to kill the running task.","","Returns the number of top-level steps or commands. The …","","","","","","","","","","","Reads the entire content of the provided future into a …","Returns the final result of the task, upon spontaneous …","","","Starts the task and returns a <code>Running</code> implementation.","Run the provided command, printing a status message with …","Run the provided step, printing out information about the …","Returns an <code>AsyncRead</code> object to stream stderr logs from the …","Returns an <code>AsyncRead</code> object to stream stdout logs from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,17,26,36,17,0,13,13,13,13,0,0,0,36,0,17,0,0,0,0,26,9,12,14,15,12,14,15,13,13,9,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,9,15,12,13,14,15,16,17,18,12,13,14,15,16,17,18,12,12,14,15,12,14,15,20,9,21,22,9,25,26,27,9,12,26,27,17,20,14,28,13,14,15,9,25,26,27,16,17,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,12,13,14,15,12,13,14,15,12,14,15,13,17,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,36,12,37,0,36,12,18,25,22,16,22,26,27,27,0,0,37,18,28,21,22,0,37,37,20,12,13,14,15,16,17,18,28,16,17,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,28,36,22,12,13,14,15,9,25,26,27,16,17,18,20,12,13,14,15,12,13,14,15,18,20,50,50,51,51],"f":"````{{{d{b}}}f}{{}{{`{{j{}{{h{f}}}}}}}}{{lb}n}{ln}{lA`}3{fA`}4`````````````````````````````{Ab{{Ad{A`}}}}{AfAf}0000000`{ce{}{}}00000000000000000000000000000``{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{{ce}Bf{}{}}000000`{{}Af}00000{{}Bh}`{BjA`}{BlA`}{c{{Bn{Ab}}}C`}{c{{Bn{Cb}}}C`}{c{{Bn{Cd}}}C`}{c{{Bn{Cf}}}C`}``{{CdCd}n}{{CfCf}n}{{BbBb}n}``{{ChCj}Cl}{{AjCj}Cl}{{AlCj}Cl}{{AnCj}Cl}{{AbCj}Cl}{{CbCj}Cl}{{CdCj}Cl}{{CfCj}Cl}{{B`Cj}Cl}{{BbCj}Cl}{cc{}}00000000000000{Cn{{Bn{AhD`}}}}{Cn{{Bn{AjD`}}}}{Cn{{Bn{AlD`}}}}{Cn{{Bn{AnD`}}}}3210{{}{{Dd{Db}}}}00{bn}{{Bbc}BfDf}{ce{}{}}00000000000000{Dhn}`{DjBf}{DlBf}{DhDn}```{{be}{{E`{Bl}}}{{Eb{b}}}{{Ed{}{{h{c}}}}}}{DnB`}{{bel}{{E`{Bl}}}{{Eb{b}}}{{Ed{}{{h{c}}}}}}{{CdCd}{{Dd{Ef}}}}{{CfCf}{{Dd{Ef}}}}`{Dln}{c{{Ad{Eh}}}{EjEl}}{{{E`{Dj}}}{{F`{{E`{En}}}}}}{{{E`{Bd}}}{{F`{{E`{En}}}}}}{AhCh}{{{E`{Bj}}Ah}{{E`{Dj}}}}{{{E`{Bl}}Ah}{{E`{Dj}}}}{{ChDhB`}{{F`{{E`{En}}}}}}{Dj{{E`{Ej}}}}0{Bhn}{ce{}{}}000000{cA`{}}00{c{{Bn{e}}}{}{}}00000000000000000000000000000{cFb{}}00000000000000{{AhCn}{{Bn{BfD`}}}}{{AjCn}{{Bn{BfD`}}}}{{AlCn}{{Bn{BfD`}}}}{{AnCn}{{Bn{BfD`}}}}3210``````","c":[],"p":[[1,"str"],[1,"slice"],[5,"PathBuf",266],[17,"Item"],[10,"Iterator",267],[5,"Path",266],[1,"bool"],[5,"String",268],[5,"CargoManifest",12],[5,"Vec",269],[5,"Command",270],[5,"Opt",12],[6,"Command",12],[5,"Completion",12],[5,"RunTestsOpt",12],[5,"Status",12],[6,"StatusResultValue",12],[5,"SingleStatusResult",12],[1,"unit"],[5,"StepResult",12],[10,"Runnable",12],[5,"Cmd",12],[6,"Result",271],[10,"Deserializer",272],[5,"CargoBinary",12],[6,"Dependency",12],[5,"DependencySpec",12],[5,"Context",12],[5,"Formatter",273],[8,"Result",273],[5,"ArgMatches",274],[8,"Error",275],[5,"Id",276],[6,"Option",277],[10,"Hasher",278],[6,"Step",12],[10,"Running",12],[1,"i32"],[1,"usize"],[5,"Box",279],[10,"AsRef",280],[10,"IntoIterator",281],[6,"Ordering",282],[1,"u8"],[10,"AsyncRead",283],[10,"Unpin",284],[10,"Future",285],[5,"Pin",286],[5,"TypeId",287],[15,"Single",262],[15,"Multiple",262]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
