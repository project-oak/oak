[workspace]
resolver = "2"
members = [
  "linux_boot_params",
  "micro_rpc",
  "micro_rpc_build",
  "micro_rpc_tests",
  "oak_channel",
  "oak_client",
  "oak_containers_stage1",
  "oak_core",
  "oak_containers_hello_world_trusted_app",
  "oak_containers_hello_world_untrusted_app",
  "oak_containers_orchestrator",
  "oak_containers_orchestrator_client",
  "oak_containers_launcher",
  "oak_crypto",
  "oak_docker_linux_init",
  "oak_echo_linux_init",
  "oak_enclave_runtime_support",
  "oak_functions/examples/benchmark/module",
  "oak_functions/examples/echo/module",
  "oak_functions/examples/invalid_module/module",
  "oak_functions/examples/key_value_lookup/module",
  "oak_functions/examples/weather_lookup/module",
  "oak_functions/load_test",
  "oak_functions/location_utils",
  "oak_functions/lookup_data_checker",
  "oak_functions/lookup_data_generator",
  "oak_functions_abi",
  "oak_functions_client",
  "oak_functions_launcher",
  "oak_functions_sdk",
  "oak_functions_sdk/tests/lookup_module",
  "oak_functions_sdk/tests/testing_module",
  "oak_functions_service",
  "oak_functions_test_utils",
  "oak_hello_world_linux_init",
  "oak_iree_service",
  "oak_launcher_utils",
  "oak_remote_attestation",
  "oak_remote_attestation_verification",
  "oak_restricted_kernel",
  "oak_restricted_kernel_api",
  "oak_restricted_kernel_interface",
  "oak_sev_guest",
  "oak_simple_io",
  "oak_tdx_guest",
  "oak_tensorflow_service",
  "oak_transparency_claims",
  "oak_virtio",
  "sev_serial",
  "snp_measurement",
  "stage0",
  "testing/oak_echo_service",
  "quirk_echo_launcher",
  "quirk_echo_service",
  "xtask",
]
exclude = [
  "fuzz",
  "oak_enclave_binary",
  "oak_functions/loader/fuzz",
  "oak_functions_app",
  "oak_tensorflow_app",
  "stage0_bin",
  "testing/oak_echo_app",
  "testing/oak_echo_raw_app",
  "testing/sev_snp_hello_world_kernel",
  "third_party/curve25519-dalek",
  "third_party/rust-hypervisor-firmware-virtio",
  "third_party/x25519-dalek"
]

[workspace.dependencies]
# Declare workspace-wide dependencies so that they don't need to use relative paths to refer to each other, and they are always kept in sync.
# Local crates.
benchmark = { path = "./oak_functions/examples/benchmark/module" }
location_utils = { path = "./oak_functions/location_utils" }
micro_rpc = { path = "./micro_rpc" }
micro_rpc_build = { path = "./micro_rpc_build" }
oak_channel = { path = "./oak_channel" }
oak_client = { path = "./oak_client" }
oak_core = { path = "./oak_core" }
oak_crypto = { path = "./oak_crypto" }
oak_containers_orchestrator_client = { path = "./oak_containers_orchestrator_client" }
oak_containers_launcher = { path = "./oak_containers_launcher" }
oak_enclave_runtime_support = { path = "./oak_enclave_runtime_support" }
oak_functions_abi = { path = "./oak_functions_abi" }
oak_functions_client = { path = "./oak_functions_client" }
oak_functions_lookup = { path = "./oak_functions/lookup" }
oak_functions_sdk = { path = "./oak_functions_sdk" }
oak_functions_service = { path = "./oak_functions_service", default-features = false }
oak_functions_test_utils = { path = "./oak_functions_test_utils" }
oak_functions_wasm = { path = "./oak_functions/wasm" }
oak_grpc_utils = { path = "./oak_grpc_utils" }
oak_launcher_utils = { path = "./oak_launcher_utils" }
oak_linux_boot_params = { path = "./linux_boot_params" }
oak_logger = { path = "./oak_functions/logger" }
oak_remote_attestation = { path = "./oak_remote_attestation" }
oak_remote_attestation_verification = { path = "./oak_remote_attestation_verification" }
oak_restricted_kernel_api = { path = "./oak_restricted_kernel_api" }
oak_restricted_kernel_interface = { path = "./oak_restricted_kernel_interface" }
oak_sev_guest = { path = "./oak_sev_guest", default-features = false }
oak_simple_io = { path = "./oak_simple_io" }
oak_tdx_guest = { path = "./oak_tdx_guest" }
oak_transparency_claims = { path = "./oak_transparency_claims" }
oak_virtio = { path = "./oak_virtio" }
sev_serial = { path = "./sev_serial" }
xtask = { path = "./xtask" }
# Common external crates.
prost = { version = "*", default-features = false, features = ["prost-derive"] }
prost-build = "*"
prost-types = "*"
tokio = "*"
tonic = "*"
tonic-build = { version = "*", default-features = false }
