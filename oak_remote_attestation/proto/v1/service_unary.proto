//
// Copyright 2022 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.session.v1;

import "oak_remote_attestation/proto/v1/messages.proto";

option java_multiple_files = true;
option java_package = "com.google.oak.session.v1";

// Service definition for unary communication with Oak server.
service UnarySession {
  // Gets encryption key of sealed encironment.
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse);

  // Performs lookup for a list of encrypted keys. The keys should be encrypted
  // using the Public key provided by the enclave. The response is encrypted
  // using the response key (supplied by the client).
  rpc Invoke(InvokeRequest) returns (InvokeResponse);

  // Validates the client enclave's attestation evidence and returns the
  // leader enclave's public key, attestation evidence, and encrypted private
  // key. This method should only be called by a separate (dependent) enclave
  // instance. If the dependent enclave does not have the same attestation
  // information an error is returned.
  rpc GetEncryptionKey(GetEncryptionKeyRequest) returns (GetEncryptionKeyResponse);
}
