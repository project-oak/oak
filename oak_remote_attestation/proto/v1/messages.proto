//
// Copyright 2022 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.session.v1;

option java_multiple_files = true;
option java_package = "com.google.oak.session.v1";

// AttestationEvidence contains all the information that originates in the TEE and can serve as
// claims about the Target Environment. The name is chosen to match the RATS terminology
// (see https://www.rfc-editor.org/rfc/rfc9334.html#name-evidence).
message AttestationEvidence {
  // The serialized public key part of the enclave encryption key.
  // TODO(#3442): Specify key format.
  bytes encryption_public_key = 1;

  // The serialized public key part of the enclave signing key. This field is optional, and can be
  // left empty if the protocol does not require it, e.g., if no application data is present.
  // TODO(#3442): Specify key format.
  bytes signing_public_key = 2;

  // The serialized attestation report binding the public key.
  bytes attestation = 3;

  // The signature over the application_data, signed by the enclave using its signing key. This
  // field is optional, and must be left empty if application_data is not provided.
  // TODO(#3442): Specify the signing details, or link to a specification.
  bytes signed_application_data = 4;
}

// AttestationBundle contains the information that the untrusted launcher provides to the client
// in response to its request for the enclave's public key(s).
message AttestationBundle {
  // Attestation evidence from the enclave.
  AttestationEvidence attestation_evidence = 1;

  // Supporting evidence required for verifying the integrity of attestation evidence.
  AttestationEndorsement attestation_endorsement = 2;
}

// AttestationEndorsement contains statements that some entity (e.g., a hardware provider) vouches
// for the integrity of claims about the TEE or the software running on it.
// (see https://www.rfc-editor.org/rfc/rfc9334.html#name-endorsements).
message AttestationEndorsement {
  // The serialized TEE certificate(s). The details of the format and how the certificate(s) are
  // encoded into this byte array are implementation-specific. In case of AMD-SEV-SNP, as described
  // in https://www.amd.com/system/files/TechDocs/57230.pdf, there are three different certificates
  // packaged in two different files.
  bytes tee_certificates = 1;

  // The binary attestation.
  BinaryAttestation binary_attestation = 2;

  // The optional application-specific data.
  optional ApplicationData application_data = 3;
}

message BinaryAttestation {
  // The serialized binary endorsement statement from the transparent release process.
  bytes endorsement_statement = 1;
  // The serialized Rekor LogEntry as proof of the inclusion of the endorsement statement in Rekor.
  bytes rekor_log_entry = 2;
  // Public key of rekor at the time of uploading the endorsement statement. This is required for
  // verifying the log entry.
  string base64_pem_encoded_rekor_public_key = 3;
}

message ApplicationData {
  // The cryptographic digest of the application, of the form `<algorithm>:<value>`.
  bytes digest = 1;

  // The serialized application configuration. The format of the configuration is
  // application-specific. This field is optional and can be empty.
  bytes config = 2;
}

message GetPublicKeyRequest {}

message GetPublicKeyResponse {
  // The enclave's signing and encryption public keys and attestation evidence about them.
  AttestationBundle attestation_bundle = 1;
}

message InvokeRequest {
  // Body of the request, encrypted with the enclave public key.
  // TODO(#3442): Specify encryption format.
  // TODO(#3442): Also pass client public or symmetric key to use for response encryption. Note that
  // needs to be at least authenticated by the client, if not encrypted within this field.
  // TODO(#3843): Use explicit `oak_crypto` messages.
  bytes encrypted_body = 1;
}

message InvokeResponse {
  // Body of the request, encrypted with the client public or symmetric key.
  // TODO(#3442): Specify encryption format.
  // TODO(#3843): Use explicit `oak_crypto` messages.
  bytes encrypted_body = 1;
}
