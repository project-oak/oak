// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `oak_api.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OakStatus {
    OAK_STATUS_UNSPECIFIED = 0,
    OK = 1,
    ERR_BAD_HANDLE = 2,
    ERR_INVALID_ARGS = 3,
    ERR_CHANNEL_CLOSED = 4,
    ERR_BUFFER_TOO_SMALL = 5,
    ERR_OUT_OF_RANGE = 6,
}

impl ::protobuf::ProtobufEnum for OakStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OakStatus> {
        match value {
            0 => ::std::option::Option::Some(OakStatus::OAK_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(OakStatus::OK),
            2 => ::std::option::Option::Some(OakStatus::ERR_BAD_HANDLE),
            3 => ::std::option::Option::Some(OakStatus::ERR_INVALID_ARGS),
            4 => ::std::option::Option::Some(OakStatus::ERR_CHANNEL_CLOSED),
            5 => ::std::option::Option::Some(OakStatus::ERR_BUFFER_TOO_SMALL),
            6 => ::std::option::Option::Some(OakStatus::ERR_OUT_OF_RANGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OakStatus] = &[
            OakStatus::OAK_STATUS_UNSPECIFIED,
            OakStatus::OK,
            OakStatus::ERR_BAD_HANDLE,
            OakStatus::ERR_INVALID_ARGS,
            OakStatus::ERR_CHANNEL_CLOSED,
            OakStatus::ERR_BUFFER_TOO_SMALL,
            OakStatus::ERR_OUT_OF_RANGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("OakStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for OakStatus {
}

impl ::std::default::Default for OakStatus {
    fn default() -> Self {
        OakStatus::OAK_STATUS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for OakStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\roak_api.proto\x12\x03oak*\xa1\x01\n\tOakStatus\x12\x1a\n\x16OAK_STAT\
    US_UNSPECIFIED\x10\0\x12\x06\n\x02OK\x10\x01\x12\x12\n\x0eERR_BAD_HANDLE\
    \x10\x02\x12\x14\n\x10ERR_INVALID_ARGS\x10\x03\x12\x16\n\x12ERR_CHANNEL_\
    CLOSED\x10\x04\x12\x18\n\x14ERR_BUFFER_TOO_SMALL\x10\x05\x12\x14\n\x10ER\
    R_OUT_OF_RANGE\x10\x06b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
