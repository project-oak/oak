// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `storage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub name: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes name = 3;


    pub fn get_name(&self) -> &[u8] {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.name, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.name.is_empty() {
            os.write_bytes(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &ReadRequest| { &m.storage_id },
                    |m: &mut ReadRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &ReadRequest| { &m.transaction_id },
                    |m: &mut ReadRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "name",
                    |m: &ReadRequest| { &m.name },
                    |m: &mut ReadRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadRequest>(
                    "ReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadRequest,
        };
        unsafe {
            instance.get(ReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_bytes(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &ReadResponse| { &m.value },
                    |m: &mut ReadResponse| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadResponse>(
                    "ReadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadResponse,
        };
        unsafe {
            instance.get(ReadResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub name: ::std::vec::Vec<u8>,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes name = 3;


    pub fn get_name(&self) -> &[u8] {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.name, ::std::vec::Vec::new())
    }

    // bytes value = 4;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.name.is_empty() {
            os.write_bytes(3, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(4, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &WriteRequest| { &m.storage_id },
                    |m: &mut WriteRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &WriteRequest| { &m.transaction_id },
                    |m: &mut WriteRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "name",
                    |m: &WriteRequest| { &m.name },
                    |m: &mut WriteRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &WriteRequest| { &m.value },
                    |m: &mut WriteRequest| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteRequest>(
                    "WriteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteRequest,
        };
        unsafe {
            instance.get(WriteRequest::new)
        }
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteResponse {
    fn default() -> &'a WriteResponse {
        <WriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteResponse {
    pub fn new() -> WriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResponse {
        WriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<WriteResponse>(
                    "WriteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteResponse {
        static mut instance: ::protobuf::lazy::Lazy<WriteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteResponse,
        };
        unsafe {
            instance.get(WriteResponse::new)
        }
    }
}

impl ::protobuf::Clear for WriteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    pub name: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }

    // bytes name = 3;


    pub fn get_name(&self) -> &[u8] {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.name, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        if !self.name.is_empty() {
            os.write_bytes(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &DeleteRequest| { &m.storage_id },
                    |m: &mut DeleteRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &DeleteRequest| { &m.transaction_id },
                    |m: &mut DeleteRequest| { &mut m.transaction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "name",
                    |m: &DeleteRequest| { &m.name },
                    |m: &mut DeleteRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteRequest>(
                    "DeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteRequest,
        };
        unsafe {
            instance.get(DeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<DeleteResponse>(
                    "DeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteResponse,
        };
        unsafe {
            instance.get(DeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginRequest {
    fn default() -> &'a BeginRequest {
        <BeginRequest as ::protobuf::Message>::default_instance()
    }
}

impl BeginRequest {
    pub fn new() -> BeginRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BeginRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginRequest {
        BeginRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &BeginRequest| { &m.storage_id },
                    |m: &mut BeginRequest| { &mut m.storage_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeginRequest>(
                    "BeginRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeginRequest {
        static mut instance: ::protobuf::lazy::Lazy<BeginRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeginRequest,
        };
        unsafe {
            instance.get(BeginRequest::new)
        }
    }
}

impl ::protobuf::Clear for BeginRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginResponse {
    // message fields
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginResponse {
    fn default() -> &'a BeginResponse {
        <BeginResponse as ::protobuf::Message>::default_instance()
    }
}

impl BeginResponse {
    pub fn new() -> BeginResponse {
        ::std::default::Default::default()
    }

    // bytes transaction_id = 1;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BeginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction_id.is_empty() {
            os.write_bytes(1, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginResponse {
        BeginResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &BeginResponse| { &m.transaction_id },
                    |m: &mut BeginResponse| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeginResponse>(
                    "BeginResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeginResponse {
        static mut instance: ::protobuf::lazy::Lazy<BeginResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeginResponse,
        };
        unsafe {
            instance.get(BeginResponse::new)
        }
    }
}

impl ::protobuf::Clear for BeginResponse {
    fn clear(&mut self) {
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitRequest {
    fn default() -> &'a CommitRequest {
        <CommitRequest as ::protobuf::Message>::default_instance()
    }
}

impl CommitRequest {
    pub fn new() -> CommitRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CommitRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitRequest {
        CommitRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &CommitRequest| { &m.storage_id },
                    |m: &mut CommitRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &CommitRequest| { &m.transaction_id },
                    |m: &mut CommitRequest| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitRequest>(
                    "CommitRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommitRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitRequest,
        };
        unsafe {
            instance.get(CommitRequest::new)
        }
    }
}

impl ::protobuf::Clear for CommitRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitResponse {
    fn default() -> &'a CommitResponse {
        <CommitResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommitResponse {
    pub fn new() -> CommitResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CommitResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitResponse {
        CommitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CommitResponse>(
                    "CommitResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommitResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitResponse,
        };
        unsafe {
            instance.get(CommitResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommitResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackRequest {
    // message fields
    pub storage_id: ::std::vec::Vec<u8>,
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackRequest {
    fn default() -> &'a RollbackRequest {
        <RollbackRequest as ::protobuf::Message>::default_instance()
    }
}

impl RollbackRequest {
    pub fn new() -> RollbackRequest {
        ::std::default::Default::default()
    }

    // bytes storage_id = 1;


    pub fn get_storage_id(&self) -> &[u8] {
        &self.storage_id
    }
    pub fn clear_storage_id(&mut self) {
        self.storage_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_id
    }

    // Take field
    pub fn take_storage_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_id, ::std::vec::Vec::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RollbackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_id);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_id.is_empty() {
            os.write_bytes(1, &self.storage_id)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackRequest {
        RollbackRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_id",
                    |m: &RollbackRequest| { &m.storage_id },
                    |m: &mut RollbackRequest| { &mut m.storage_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &RollbackRequest| { &m.transaction_id },
                    |m: &mut RollbackRequest| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RollbackRequest>(
                    "RollbackRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RollbackRequest {
        static mut instance: ::protobuf::lazy::Lazy<RollbackRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackRequest,
        };
        unsafe {
            instance.get(RollbackRequest::new)
        }
    }
}

impl ::protobuf::Clear for RollbackRequest {
    fn clear(&mut self) {
        self.storage_id.clear();
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackResponse {
    fn default() -> &'a RollbackResponse {
        <RollbackResponse as ::protobuf::Message>::default_instance()
    }
}

impl RollbackResponse {
    pub fn new() -> RollbackResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RollbackResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackResponse {
        RollbackResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RollbackResponse>(
                    "RollbackResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RollbackResponse {
        static mut instance: ::protobuf::lazy::Lazy<RollbackResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackResponse,
        };
        unsafe {
            instance.get(RollbackResponse::new)
        }
    }
}

impl ::protobuf::Clear for RollbackResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageOperationRequest {
    // message fields
    pub storage_name: ::std::vec::Vec<u8>,
    // message oneof groups
    pub operation: ::std::option::Option<StorageOperationRequest_oneof_operation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageOperationRequest {
    fn default() -> &'a StorageOperationRequest {
        <StorageOperationRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StorageOperationRequest_oneof_operation {
    read_request(ReadRequest),
    write_request(WriteRequest),
    delete_request(DeleteRequest),
    begin_request(BeginRequest),
    commit_request(CommitRequest),
    rollback_request(RollbackRequest),
}

impl StorageOperationRequest {
    pub fn new() -> StorageOperationRequest {
        ::std::default::Default::default()
    }

    // bytes storage_name = 1;


    pub fn get_storage_name(&self) -> &[u8] {
        &self.storage_name
    }
    pub fn clear_storage_name(&mut self) {
        self.storage_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.storage_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storage_name
    }

    // Take field
    pub fn take_storage_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storage_name, ::std::vec::Vec::new())
    }

    // .oak.ReadRequest read_request = 2;


    pub fn get_read_request(&self) -> &ReadRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(ref v)) => v,
            _ => ReadRequest::default_instance(),
        }
    }
    pub fn clear_read_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_read_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_request(&mut self, v: ReadRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_request(&mut self) -> &mut ReadRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(ReadRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_request(&mut self) -> ReadRequest {
        if self.has_read_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadRequest::new()
        }
    }

    // .oak.WriteRequest write_request = 3;


    pub fn get_write_request(&self) -> &WriteRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(ref v)) => v,
            _ => WriteRequest::default_instance(),
        }
    }
    pub fn clear_write_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_write_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_request(&mut self, v: WriteRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_request(&mut self) -> &mut WriteRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(WriteRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_request(&mut self) -> WriteRequest {
        if self.has_write_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteRequest::new()
        }
    }

    // .oak.DeleteRequest delete_request = 4;


    pub fn get_delete_request(&self) -> &DeleteRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(ref v)) => v,
            _ => DeleteRequest::default_instance(),
        }
    }
    pub fn clear_delete_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_delete_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_request(&mut self, v: DeleteRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_request(&mut self) -> &mut DeleteRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(DeleteRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_request(&mut self) -> DeleteRequest {
        if self.has_delete_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteRequest::new()
        }
    }

    // .oak.BeginRequest begin_request = 5;


    pub fn get_begin_request(&self) -> &BeginRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(ref v)) => v,
            _ => BeginRequest::default_instance(),
        }
    }
    pub fn clear_begin_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_begin_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_begin_request(&mut self, v: BeginRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_begin_request(&mut self) -> &mut BeginRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(BeginRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_begin_request(&mut self) -> BeginRequest {
        if self.has_begin_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(v)) => v,
                _ => panic!(),
            }
        } else {
            BeginRequest::new()
        }
    }

    // .oak.CommitRequest commit_request = 6;


    pub fn get_commit_request(&self) -> &CommitRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(ref v)) => v,
            _ => CommitRequest::default_instance(),
        }
    }
    pub fn clear_commit_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_commit_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit_request(&mut self, v: CommitRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit_request(&mut self) -> &mut CommitRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(CommitRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit_request(&mut self) -> CommitRequest {
        if self.has_commit_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(v)) => v,
                _ => panic!(),
            }
        } else {
            CommitRequest::new()
        }
    }

    // .oak.RollbackRequest rollback_request = 7;


    pub fn get_rollback_request(&self) -> &RollbackRequest {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(ref v)) => v,
            _ => RollbackRequest::default_instance(),
        }
    }
    pub fn clear_rollback_request(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_rollback_request(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rollback_request(&mut self, v: RollbackRequest) {
        self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rollback_request(&mut self) -> &mut RollbackRequest {
        if let ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(RollbackRequest::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rollback_request(&mut self) -> RollbackRequest {
        if self.has_rollback_request() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(v)) => v,
                _ => panic!(),
            }
        } else {
            RollbackRequest::new()
        }
    }
}

impl ::protobuf::Message for StorageOperationRequest {
    fn is_initialized(&self) -> bool {
        if let Some(StorageOperationRequest_oneof_operation::read_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationRequest_oneof_operation::write_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationRequest_oneof_operation::delete_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationRequest_oneof_operation::begin_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationRequest_oneof_operation::commit_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationRequest_oneof_operation::rollback_request(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storage_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::read_request(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::write_request(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::delete_request(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::begin_request(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::commit_request(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationRequest_oneof_operation::rollback_request(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.storage_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.storage_name);
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &StorageOperationRequest_oneof_operation::read_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationRequest_oneof_operation::write_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationRequest_oneof_operation::delete_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationRequest_oneof_operation::begin_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationRequest_oneof_operation::commit_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationRequest_oneof_operation::rollback_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.storage_name.is_empty() {
            os.write_bytes(1, &self.storage_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &StorageOperationRequest_oneof_operation::read_request(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationRequest_oneof_operation::write_request(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationRequest_oneof_operation::delete_request(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationRequest_oneof_operation::begin_request(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationRequest_oneof_operation::commit_request(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationRequest_oneof_operation::rollback_request(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageOperationRequest {
        StorageOperationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "storage_name",
                    |m: &StorageOperationRequest| { &m.storage_name },
                    |m: &mut StorageOperationRequest| { &mut m.storage_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadRequest>(
                    "read_request",
                    StorageOperationRequest::has_read_request,
                    StorageOperationRequest::get_read_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteRequest>(
                    "write_request",
                    StorageOperationRequest::has_write_request,
                    StorageOperationRequest::get_write_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DeleteRequest>(
                    "delete_request",
                    StorageOperationRequest::has_delete_request,
                    StorageOperationRequest::get_delete_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BeginRequest>(
                    "begin_request",
                    StorageOperationRequest::has_begin_request,
                    StorageOperationRequest::get_begin_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CommitRequest>(
                    "commit_request",
                    StorageOperationRequest::has_commit_request,
                    StorageOperationRequest::get_commit_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RollbackRequest>(
                    "rollback_request",
                    StorageOperationRequest::has_rollback_request,
                    StorageOperationRequest::get_rollback_request,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageOperationRequest>(
                    "StorageOperationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageOperationRequest {
        static mut instance: ::protobuf::lazy::Lazy<StorageOperationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageOperationRequest,
        };
        unsafe {
            instance.get(StorageOperationRequest::new)
        }
    }
}

impl ::protobuf::Clear for StorageOperationRequest {
    fn clear(&mut self) {
        self.storage_name.clear();
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageOperationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageOperationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageOperationResponse {
    // message fields
    pub status: ::protobuf::SingularPtrField<super::status::Status>,
    // message oneof groups
    pub operation: ::std::option::Option<StorageOperationResponse_oneof_operation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageOperationResponse {
    fn default() -> &'a StorageOperationResponse {
        <StorageOperationResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StorageOperationResponse_oneof_operation {
    read_response(ReadResponse),
    write_response(WriteResponse),
    delete_response(DeleteResponse),
    begin_response(BeginResponse),
    commit_response(CommitResponse),
    rollback_response(RollbackResponse),
}

impl StorageOperationResponse {
    pub fn new() -> StorageOperationResponse {
        ::std::default::Default::default()
    }

    // .google.rpc.Status status = 1;


    pub fn get_status(&self) -> &super::status::Status {
        self.status.as_ref().unwrap_or_else(|| super::status::Status::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::status::Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::status::Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::status::Status {
        self.status.take().unwrap_or_else(|| super::status::Status::new())
    }

    // .oak.ReadResponse read_response = 2;


    pub fn get_read_response(&self) -> &ReadResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(ref v)) => v,
            _ => ReadResponse::default_instance(),
        }
    }
    pub fn clear_read_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_read_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_response(&mut self, v: ReadResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_response(&mut self) -> &mut ReadResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(ReadResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_response(&mut self) -> ReadResponse {
        if self.has_read_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadResponse::new()
        }
    }

    // .oak.WriteResponse write_response = 3;


    pub fn get_write_response(&self) -> &WriteResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(ref v)) => v,
            _ => WriteResponse::default_instance(),
        }
    }
    pub fn clear_write_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_write_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_response(&mut self, v: WriteResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_response(&mut self) -> &mut WriteResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(WriteResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_response(&mut self) -> WriteResponse {
        if self.has_write_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteResponse::new()
        }
    }

    // .oak.DeleteResponse delete_response = 4;


    pub fn get_delete_response(&self) -> &DeleteResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(ref v)) => v,
            _ => DeleteResponse::default_instance(),
        }
    }
    pub fn clear_delete_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_delete_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_response(&mut self, v: DeleteResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_response(&mut self) -> &mut DeleteResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(DeleteResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_response(&mut self) -> DeleteResponse {
        if self.has_delete_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteResponse::new()
        }
    }

    // .oak.BeginResponse begin_response = 5;


    pub fn get_begin_response(&self) -> &BeginResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(ref v)) => v,
            _ => BeginResponse::default_instance(),
        }
    }
    pub fn clear_begin_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_begin_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_begin_response(&mut self, v: BeginResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_begin_response(&mut self) -> &mut BeginResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(BeginResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_begin_response(&mut self) -> BeginResponse {
        if self.has_begin_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(v)) => v,
                _ => panic!(),
            }
        } else {
            BeginResponse::new()
        }
    }

    // .oak.CommitResponse commit_response = 6;


    pub fn get_commit_response(&self) -> &CommitResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(ref v)) => v,
            _ => CommitResponse::default_instance(),
        }
    }
    pub fn clear_commit_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_commit_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit_response(&mut self, v: CommitResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit_response(&mut self) -> &mut CommitResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(CommitResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit_response(&mut self) -> CommitResponse {
        if self.has_commit_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(v)) => v,
                _ => panic!(),
            }
        } else {
            CommitResponse::new()
        }
    }

    // .oak.RollbackResponse rollback_response = 7;


    pub fn get_rollback_response(&self) -> &RollbackResponse {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(ref v)) => v,
            _ => RollbackResponse::default_instance(),
        }
    }
    pub fn clear_rollback_response(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_rollback_response(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rollback_response(&mut self, v: RollbackResponse) {
        self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rollback_response(&mut self) -> &mut RollbackResponse {
        if let ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(RollbackResponse::new()));
        }
        match self.operation {
            ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rollback_response(&mut self) -> RollbackResponse {
        if self.has_rollback_response() {
            match self.operation.take() {
                ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(v)) => v,
                _ => panic!(),
            }
        } else {
            RollbackResponse::new()
        }
    }
}

impl ::protobuf::Message for StorageOperationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(StorageOperationResponse_oneof_operation::read_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationResponse_oneof_operation::write_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationResponse_oneof_operation::delete_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationResponse_oneof_operation::begin_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationResponse_oneof_operation::commit_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageOperationResponse_oneof_operation::rollback_response(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::read_response(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::write_response(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::delete_response(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::begin_response(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::commit_response(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(StorageOperationResponse_oneof_operation::rollback_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &StorageOperationResponse_oneof_operation::read_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationResponse_oneof_operation::write_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationResponse_oneof_operation::delete_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationResponse_oneof_operation::begin_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationResponse_oneof_operation::commit_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageOperationResponse_oneof_operation::rollback_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &StorageOperationResponse_oneof_operation::read_response(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationResponse_oneof_operation::write_response(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationResponse_oneof_operation::delete_response(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationResponse_oneof_operation::begin_response(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationResponse_oneof_operation::commit_response(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageOperationResponse_oneof_operation::rollback_response(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageOperationResponse {
        StorageOperationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                    "status",
                    |m: &StorageOperationResponse| { &m.status },
                    |m: &mut StorageOperationResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadResponse>(
                    "read_response",
                    StorageOperationResponse::has_read_response,
                    StorageOperationResponse::get_read_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteResponse>(
                    "write_response",
                    StorageOperationResponse::has_write_response,
                    StorageOperationResponse::get_write_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DeleteResponse>(
                    "delete_response",
                    StorageOperationResponse::has_delete_response,
                    StorageOperationResponse::get_delete_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BeginResponse>(
                    "begin_response",
                    StorageOperationResponse::has_begin_response,
                    StorageOperationResponse::get_begin_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CommitResponse>(
                    "commit_response",
                    StorageOperationResponse::has_commit_response,
                    StorageOperationResponse::get_commit_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RollbackResponse>(
                    "rollback_response",
                    StorageOperationResponse::has_rollback_response,
                    StorageOperationResponse::get_rollback_response,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageOperationResponse>(
                    "StorageOperationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageOperationResponse {
        static mut instance: ::protobuf::lazy::Lazy<StorageOperationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageOperationResponse,
        };
        unsafe {
            instance.get(StorageOperationResponse::new)
        }
    }
}

impl ::protobuf::Clear for StorageOperationResponse {
    fn clear(&mut self) {
        self.status.clear();
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageOperationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageOperationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rstorage.proto\x12\x03oak\x1a#third_party/google/rpc/status.proto\"g\
    \n\x0bReadRequest\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\
    \x12%\n\x0etransaction_id\x18\x02\x20\x01(\x0cR\rtransactionId\x12\x12\n\
    \x04name\x18\x03\x20\x01(\x0cR\x04name\"$\n\x0cReadResponse\x12\x14\n\
    \x05value\x18\x01\x20\x01(\x0cR\x05value\"~\n\x0cWriteRequest\x12\x1d\n\
    \nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etransaction_id\
    \x18\x02\x20\x01(\x0cR\rtransactionId\x12\x12\n\x04name\x18\x03\x20\x01(\
    \x0cR\x04name\x12\x14\n\x05value\x18\x04\x20\x01(\x0cR\x05value\"\x0f\n\
    \rWriteResponse\"i\n\rDeleteRequest\x12\x1d\n\nstorage_id\x18\x01\x20\
    \x01(\x0cR\tstorageId\x12%\n\x0etransaction_id\x18\x02\x20\x01(\x0cR\rtr\
    ansactionId\x12\x12\n\x04name\x18\x03\x20\x01(\x0cR\x04name\"\x10\n\x0eD\
    eleteResponse\"-\n\x0cBeginRequest\x12\x1d\n\nstorage_id\x18\x01\x20\x01\
    (\x0cR\tstorageId\"6\n\rBeginResponse\x12%\n\x0etransaction_id\x18\x01\
    \x20\x01(\x0cR\rtransactionId\"U\n\rCommitRequest\x12\x1d\n\nstorage_id\
    \x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etransaction_id\x18\x02\x20\
    \x01(\x0cR\rtransactionId\"\x10\n\x0eCommitResponse\"W\n\x0fRollbackRequ\
    est\x12\x1d\n\nstorage_id\x18\x01\x20\x01(\x0cR\tstorageId\x12%\n\x0etra\
    nsaction_id\x18\x02\x20\x01(\x0cR\rtransactionId\"\x12\n\x10RollbackResp\
    onse\"\xb1\x03\n\x17StorageOperationRequest\x12!\n\x0cstorage_name\x18\
    \x01\x20\x01(\x0cR\x0bstorageName\x125\n\x0cread_request\x18\x02\x20\x01\
    (\x0b2\x10.oak.ReadRequestH\0R\x0breadRequest\x128\n\rwrite_request\x18\
    \x03\x20\x01(\x0b2\x11.oak.WriteRequestH\0R\x0cwriteRequest\x12;\n\x0ede\
    lete_request\x18\x04\x20\x01(\x0b2\x12.oak.DeleteRequestH\0R\rdeleteRequ\
    est\x128\n\rbegin_request\x18\x05\x20\x01(\x0b2\x11.oak.BeginRequestH\0R\
    \x0cbeginRequest\x12;\n\x0ecommit_request\x18\x06\x20\x01(\x0b2\x12.oak.\
    CommitRequestH\0R\rcommitRequest\x12A\n\x10rollback_request\x18\x07\x20\
    \x01(\x0b2\x14.oak.RollbackRequestH\0R\x0frollbackRequestB\x0b\n\toperat\
    ion\"\xcd\x03\n\x18StorageOperationResponse\x12*\n\x06status\x18\x01\x20\
    \x01(\x0b2\x12.google.rpc.StatusR\x06status\x128\n\rread_response\x18\
    \x02\x20\x01(\x0b2\x11.oak.ReadResponseH\0R\x0creadResponse\x12;\n\x0ewr\
    ite_response\x18\x03\x20\x01(\x0b2\x12.oak.WriteResponseH\0R\rwriteRespo\
    nse\x12>\n\x0fdelete_response\x18\x04\x20\x01(\x0b2\x13.oak.DeleteRespon\
    seH\0R\x0edeleteResponse\x12;\n\x0ebegin_response\x18\x05\x20\x01(\x0b2\
    \x12.oak.BeginResponseH\0R\rbeginResponse\x12>\n\x0fcommit_response\x18\
    \x06\x20\x01(\x0b2\x13.oak.CommitResponseH\0R\x0ecommitResponse\x12D\n\
    \x11rollback_response\x18\x07\x20\x01(\x0b2\x15.oak.RollbackResponseH\0R\
    \x10rollbackResponseB\x0b\n\toperation2\xb5\x02\n\x07Storage\x12+\n\x04R\
    ead\x12\x10.oak.ReadRequest\x1a\x11.oak.ReadResponse\x12.\n\x05Write\x12\
    \x11.oak.WriteRequest\x1a\x12.oak.WriteResponse\x121\n\x06Delete\x12\x12\
    .oak.DeleteRequest\x1a\x13.oak.DeleteResponse\x12.\n\x05Begin\x12\x11.oa\
    k.BeginRequest\x1a\x12.oak.BeginResponse\x121\n\x06Commit\x12\x12.oak.Co\
    mmitRequest\x1a\x13.oak.CommitResponse\x127\n\x08Rollback\x12\x14.oak.Ro\
    llbackRequest\x1a\x15.oak.RollbackResponseb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
