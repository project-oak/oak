// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `manager.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct ApplicationConfiguration {
    // message fields
    pub nodes: ::protobuf::RepeatedField<Node>,
    pub channels: ::protobuf::RepeatedField<Channel>,
    pub wasm_contents: ::protobuf::RepeatedField<WasmContents>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApplicationConfiguration {
    fn default() -> &'a ApplicationConfiguration {
        <ApplicationConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationConfiguration {
    pub fn new() -> ApplicationConfiguration {
        ::std::default::Default::default()
    }

    // repeated .oak.Node nodes = 1;


    pub fn get_nodes(&self) -> &[Node] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    // repeated .oak.Channel channels = 2;


    pub fn get_channels(&self) -> &[Channel] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::protobuf::RepeatedField<Channel>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::protobuf::RepeatedField<Channel> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::protobuf::RepeatedField<Channel> {
        ::std::mem::replace(&mut self.channels, ::protobuf::RepeatedField::new())
    }

    // repeated .oak.WasmContents wasm_contents = 3;


    pub fn get_wasm_contents(&self) -> &[WasmContents] {
        &self.wasm_contents
    }
    pub fn clear_wasm_contents(&mut self) {
        self.wasm_contents.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_contents(&mut self, v: ::protobuf::RepeatedField<WasmContents>) {
        self.wasm_contents = v;
    }

    // Mutable pointer to the field.
    pub fn mut_wasm_contents(&mut self) -> &mut ::protobuf::RepeatedField<WasmContents> {
        &mut self.wasm_contents
    }

    // Take field
    pub fn take_wasm_contents(&mut self) -> ::protobuf::RepeatedField<WasmContents> {
        ::std::mem::replace(&mut self.wasm_contents, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApplicationConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.channels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.wasm_contents {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channels)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.wasm_contents)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.wasm_contents {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.channels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.wasm_contents {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApplicationConfiguration {
        ApplicationConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "nodes",
                    |m: &ApplicationConfiguration| { &m.nodes },
                    |m: &mut ApplicationConfiguration| { &mut m.nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Channel>>(
                    "channels",
                    |m: &ApplicationConfiguration| { &m.channels },
                    |m: &mut ApplicationConfiguration| { &mut m.channels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WasmContents>>(
                    "wasm_contents",
                    |m: &ApplicationConfiguration| { &m.wasm_contents },
                    |m: &mut ApplicationConfiguration| { &mut m.wasm_contents },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApplicationConfiguration>(
                    "ApplicationConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApplicationConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ApplicationConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApplicationConfiguration,
        };
        unsafe {
            instance.get(ApplicationConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ApplicationConfiguration {
    fn clear(&mut self) {
        self.nodes.clear();
        self.channels.clear();
        self.wasm_contents.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApplicationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicationConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    pub node_name: ::std::string::String,
    // message oneof groups
    pub node_type: ::std::option::Option<Node_oneof_node_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Node_oneof_node_type {
    log_node(LogNode),
    grpc_server_node(GrpcServerNode),
    web_assembly_node(WebAssemblyNode),
    storage_node(StorageProxyNode),
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // string node_name = 1;


    pub fn get_node_name(&self) -> &str {
        &self.node_name
    }
    pub fn clear_node_name(&mut self) {
        self.node_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        &mut self.node_name
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_name, ::std::string::String::new())
    }

    // .oak.LogNode log_node = 2;


    pub fn get_log_node(&self) -> &LogNode {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::log_node(ref v)) => v,
            _ => LogNode::default_instance(),
        }
    }
    pub fn clear_log_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_log_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::log_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_node(&mut self, v: LogNode) {
        self.node_type = ::std::option::Option::Some(Node_oneof_node_type::log_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_node(&mut self) -> &mut LogNode {
        if let ::std::option::Option::Some(Node_oneof_node_type::log_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(Node_oneof_node_type::log_node(LogNode::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::log_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_node(&mut self) -> LogNode {
        if self.has_log_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(Node_oneof_node_type::log_node(v)) => v,
                _ => panic!(),
            }
        } else {
            LogNode::new()
        }
    }

    // .oak.GrpcServerNode grpc_server_node = 3;


    pub fn get_grpc_server_node(&self) -> &GrpcServerNode {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(ref v)) => v,
            _ => GrpcServerNode::default_instance(),
        }
    }
    pub fn clear_grpc_server_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_grpc_server_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_grpc_server_node(&mut self, v: GrpcServerNode) {
        self.node_type = ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_server_node(&mut self) -> &mut GrpcServerNode {
        if let ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(GrpcServerNode::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_grpc_server_node(&mut self) -> GrpcServerNode {
        if self.has_grpc_server_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcServerNode::new()
        }
    }

    // .oak.WebAssemblyNode web_assembly_node = 4;


    pub fn get_web_assembly_node(&self) -> &WebAssemblyNode {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(ref v)) => v,
            _ => WebAssemblyNode::default_instance(),
        }
    }
    pub fn clear_web_assembly_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_web_assembly_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_web_assembly_node(&mut self, v: WebAssemblyNode) {
        self.node_type = ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_web_assembly_node(&mut self) -> &mut WebAssemblyNode {
        if let ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(WebAssemblyNode::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_web_assembly_node(&mut self) -> WebAssemblyNode {
        if self.has_web_assembly_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(v)) => v,
                _ => panic!(),
            }
        } else {
            WebAssemblyNode::new()
        }
    }

    // .oak.StorageProxyNode storage_node = 5;


    pub fn get_storage_node(&self) -> &StorageProxyNode {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::storage_node(ref v)) => v,
            _ => StorageProxyNode::default_instance(),
        }
    }
    pub fn clear_storage_node(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_storage_node(&self) -> bool {
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::storage_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_storage_node(&mut self, v: StorageProxyNode) {
        self.node_type = ::std::option::Option::Some(Node_oneof_node_type::storage_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_storage_node(&mut self) -> &mut StorageProxyNode {
        if let ::std::option::Option::Some(Node_oneof_node_type::storage_node(_)) = self.node_type {
        } else {
            self.node_type = ::std::option::Option::Some(Node_oneof_node_type::storage_node(StorageProxyNode::new()));
        }
        match self.node_type {
            ::std::option::Option::Some(Node_oneof_node_type::storage_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_storage_node(&mut self) -> StorageProxyNode {
        if self.has_storage_node() {
            match self.node_type.take() {
                ::std::option::Option::Some(Node_oneof_node_type::storage_node(v)) => v,
                _ => panic!(),
            }
        } else {
            StorageProxyNode::new()
        }
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        if let Some(Node_oneof_node_type::log_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Node_oneof_node_type::grpc_server_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Node_oneof_node_type::web_assembly_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Node_oneof_node_type::storage_node(ref v)) = self.node_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(Node_oneof_node_type::log_node(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(Node_oneof_node_type::grpc_server_node(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(Node_oneof_node_type::web_assembly_node(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.node_type = ::std::option::Option::Some(Node_oneof_node_type::storage_node(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if let ::std::option::Option::Some(ref v) = self.node_type {
            match v {
                &Node_oneof_node_type::log_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Node_oneof_node_type::grpc_server_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Node_oneof_node_type::web_assembly_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Node_oneof_node_type::storage_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.node_type {
            match v {
                &Node_oneof_node_type::log_node(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Node_oneof_node_type::grpc_server_node(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Node_oneof_node_type::web_assembly_node(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Node_oneof_node_type::storage_node(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_name",
                    |m: &Node| { &m.node_name },
                    |m: &mut Node| { &mut m.node_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogNode>(
                    "log_node",
                    Node::has_log_node,
                    Node::get_log_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcServerNode>(
                    "grpc_server_node",
                    Node::has_grpc_server_node,
                    Node::get_grpc_server_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WebAssemblyNode>(
                    "web_assembly_node",
                    Node::has_web_assembly_node,
                    Node::get_web_assembly_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StorageProxyNode>(
                    "storage_node",
                    Node::has_storage_node,
                    Node::get_storage_node,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Node>(
                    "Node",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Node {
        static mut instance: ::protobuf::lazy::Lazy<Node> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Node,
        };
        unsafe {
            instance.get(Node::new)
        }
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.node_name.clear();
        self.node_type = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcServerNode {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcServerNode {
    fn default() -> &'a GrpcServerNode {
        <GrpcServerNode as ::protobuf::Message>::default_instance()
    }
}

impl GrpcServerNode {
    pub fn new() -> GrpcServerNode {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GrpcServerNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcServerNode {
        GrpcServerNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GrpcServerNode>(
                    "GrpcServerNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrpcServerNode {
        static mut instance: ::protobuf::lazy::Lazy<GrpcServerNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrpcServerNode,
        };
        unsafe {
            instance.get(GrpcServerNode::new)
        }
    }
}

impl ::protobuf::Clear for GrpcServerNode {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcServerNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcServerNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogNode {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogNode {
    fn default() -> &'a LogNode {
        <LogNode as ::protobuf::Message>::default_instance()
    }
}

impl LogNode {
    pub fn new() -> LogNode {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogNode {
        LogNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<LogNode>(
                    "LogNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogNode {
        static mut instance: ::protobuf::lazy::Lazy<LogNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LogNode,
        };
        unsafe {
            instance.get(LogNode::new)
        }
    }
}

impl ::protobuf::Clear for LogNode {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAssemblyNode {
    // message fields
    pub wasm_contents_name: ::std::string::String,
    pub ports: ::protobuf::RepeatedField<Port>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAssemblyNode {
    fn default() -> &'a WebAssemblyNode {
        <WebAssemblyNode as ::protobuf::Message>::default_instance()
    }
}

impl WebAssemblyNode {
    pub fn new() -> WebAssemblyNode {
        ::std::default::Default::default()
    }

    // string wasm_contents_name = 1;


    pub fn get_wasm_contents_name(&self) -> &str {
        &self.wasm_contents_name
    }
    pub fn clear_wasm_contents_name(&mut self) {
        self.wasm_contents_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_contents_name(&mut self, v: ::std::string::String) {
        self.wasm_contents_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_contents_name(&mut self) -> &mut ::std::string::String {
        &mut self.wasm_contents_name
    }

    // Take field
    pub fn take_wasm_contents_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.wasm_contents_name, ::std::string::String::new())
    }

    // repeated .oak.Port ports = 2;


    pub fn get_ports(&self) -> &[Port] {
        &self.ports
    }
    pub fn clear_ports(&mut self) {
        self.ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: ::protobuf::RepeatedField<Port>) {
        self.ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ports(&mut self) -> &mut ::protobuf::RepeatedField<Port> {
        &mut self.ports
    }

    // Take field
    pub fn take_ports(&mut self) -> ::protobuf::RepeatedField<Port> {
        ::std::mem::replace(&mut self.ports, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WebAssemblyNode {
    fn is_initialized(&self) -> bool {
        for v in &self.ports {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.wasm_contents_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ports)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.wasm_contents_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.wasm_contents_name);
        }
        for value in &self.ports {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.wasm_contents_name.is_empty() {
            os.write_string(1, &self.wasm_contents_name)?;
        }
        for v in &self.ports {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAssemblyNode {
        WebAssemblyNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "wasm_contents_name",
                    |m: &WebAssemblyNode| { &m.wasm_contents_name },
                    |m: &mut WebAssemblyNode| { &mut m.wasm_contents_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                    "ports",
                    |m: &WebAssemblyNode| { &m.ports },
                    |m: &mut WebAssemblyNode| { &mut m.ports },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WebAssemblyNode>(
                    "WebAssemblyNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WebAssemblyNode {
        static mut instance: ::protobuf::lazy::Lazy<WebAssemblyNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WebAssemblyNode,
        };
        unsafe {
            instance.get(WebAssemblyNode::new)
        }
    }
}

impl ::protobuf::Clear for WebAssemblyNode {
    fn clear(&mut self) {
        self.wasm_contents_name.clear();
        self.ports.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAssemblyNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAssemblyNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WasmContents {
    // message fields
    pub name: ::std::string::String,
    pub module_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WasmContents {
    fn default() -> &'a WasmContents {
        <WasmContents as ::protobuf::Message>::default_instance()
    }
}

impl WasmContents {
    pub fn new() -> WasmContents {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes module_bytes = 2;


    pub fn get_module_bytes(&self) -> &[u8] {
        &self.module_bytes
    }
    pub fn clear_module_bytes(&mut self) {
        self.module_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.module_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.module_bytes
    }

    // Take field
    pub fn take_module_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.module_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WasmContents {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.module_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.module_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.module_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.module_bytes.is_empty() {
            os.write_bytes(2, &self.module_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WasmContents {
        WasmContents::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &WasmContents| { &m.name },
                    |m: &mut WasmContents| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "module_bytes",
                    |m: &WasmContents| { &m.module_bytes },
                    |m: &mut WasmContents| { &mut m.module_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WasmContents>(
                    "WasmContents",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WasmContents {
        static mut instance: ::protobuf::lazy::Lazy<WasmContents> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WasmContents,
        };
        unsafe {
            instance.get(WasmContents::new)
        }
    }
}

impl ::protobuf::Clear for WasmContents {
    fn clear(&mut self) {
        self.name.clear();
        self.module_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WasmContents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WasmContents {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageProxyNode {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageProxyNode {
    fn default() -> &'a StorageProxyNode {
        <StorageProxyNode as ::protobuf::Message>::default_instance()
    }
}

impl StorageProxyNode {
    pub fn new() -> StorageProxyNode {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StorageProxyNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageProxyNode {
        StorageProxyNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &StorageProxyNode| { &m.address },
                    |m: &mut StorageProxyNode| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageProxyNode>(
                    "StorageProxyNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageProxyNode {
        static mut instance: ::protobuf::lazy::Lazy<StorageProxyNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageProxyNode,
        };
        unsafe {
            instance.get(StorageProxyNode::new)
        }
    }
}

impl ::protobuf::Clear for StorageProxyNode {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageProxyNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageProxyNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Port {
    // message fields
    pub name: ::std::string::String,
    pub field_type: Port_Type,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Port {
    fn default() -> &'a Port {
        <Port as ::protobuf::Message>::default_instance()
    }
}

impl Port {
    pub fn new() -> Port {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .oak.Port.Type type = 2;


    pub fn get_field_type(&self) -> Port_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Port_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Port_Type) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Port {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != Port_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != Port_Type::TYPE_UNSPECIFIED {
            os.write_enum(2, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Port {
        Port::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Port| { &m.name },
                    |m: &mut Port| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Port_Type>>(
                    "type",
                    |m: &Port| { &m.field_type },
                    |m: &mut Port| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Port>(
                    "Port",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Port {
        static mut instance: ::protobuf::lazy::Lazy<Port> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Port,
        };
        unsafe {
            instance.get(Port::new)
        }
    }
}

impl ::protobuf::Clear for Port {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = Port_Type::TYPE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Port {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Port {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Port_Type {
    TYPE_UNSPECIFIED = 0,
    IN = 1,
    OUT = 2,
}

impl ::protobuf::ProtobufEnum for Port_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Port_Type> {
        match value {
            0 => ::std::option::Option::Some(Port_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Port_Type::IN),
            2 => ::std::option::Option::Some(Port_Type::OUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Port_Type] = &[
            Port_Type::TYPE_UNSPECIFIED,
            Port_Type::IN,
            Port_Type::OUT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Port_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Port_Type {
}

impl ::std::default::Default for Port_Type {
    fn default() -> Self {
        Port_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Port_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Channel {
    // message fields
    pub source_endpoint: ::protobuf::SingularPtrField<Channel_Endpoint>,
    pub destination_endpoint: ::protobuf::SingularPtrField<Channel_Endpoint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Channel {
    fn default() -> &'a Channel {
        <Channel as ::protobuf::Message>::default_instance()
    }
}

impl Channel {
    pub fn new() -> Channel {
        ::std::default::Default::default()
    }

    // .oak.Channel.Endpoint source_endpoint = 1;


    pub fn get_source_endpoint(&self) -> &Channel_Endpoint {
        self.source_endpoint.as_ref().unwrap_or_else(|| Channel_Endpoint::default_instance())
    }
    pub fn clear_source_endpoint(&mut self) {
        self.source_endpoint.clear();
    }

    pub fn has_source_endpoint(&self) -> bool {
        self.source_endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_endpoint(&mut self, v: Channel_Endpoint) {
        self.source_endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_endpoint(&mut self) -> &mut Channel_Endpoint {
        if self.source_endpoint.is_none() {
            self.source_endpoint.set_default();
        }
        self.source_endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_endpoint(&mut self) -> Channel_Endpoint {
        self.source_endpoint.take().unwrap_or_else(|| Channel_Endpoint::new())
    }

    // .oak.Channel.Endpoint destination_endpoint = 2;


    pub fn get_destination_endpoint(&self) -> &Channel_Endpoint {
        self.destination_endpoint.as_ref().unwrap_or_else(|| Channel_Endpoint::default_instance())
    }
    pub fn clear_destination_endpoint(&mut self) {
        self.destination_endpoint.clear();
    }

    pub fn has_destination_endpoint(&self) -> bool {
        self.destination_endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_endpoint(&mut self, v: Channel_Endpoint) {
        self.destination_endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_endpoint(&mut self) -> &mut Channel_Endpoint {
        if self.destination_endpoint.is_none() {
            self.destination_endpoint.set_default();
        }
        self.destination_endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_endpoint(&mut self) -> Channel_Endpoint {
        self.destination_endpoint.take().unwrap_or_else(|| Channel_Endpoint::new())
    }
}

impl ::protobuf::Message for Channel {
    fn is_initialized(&self) -> bool {
        for v in &self.source_endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destination_endpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.destination_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source_endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.destination_endpoint.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Channel {
        Channel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Channel_Endpoint>>(
                    "source_endpoint",
                    |m: &Channel| { &m.source_endpoint },
                    |m: &mut Channel| { &mut m.source_endpoint },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Channel_Endpoint>>(
                    "destination_endpoint",
                    |m: &Channel| { &m.destination_endpoint },
                    |m: &mut Channel| { &mut m.destination_endpoint },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Channel>(
                    "Channel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Channel {
        static mut instance: ::protobuf::lazy::Lazy<Channel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Channel,
        };
        unsafe {
            instance.get(Channel::new)
        }
    }
}

impl ::protobuf::Clear for Channel {
    fn clear(&mut self) {
        self.source_endpoint.clear();
        self.destination_endpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Channel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Channel_Endpoint {
    // message fields
    pub node_name: ::std::string::String,
    pub port_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Channel_Endpoint {
    fn default() -> &'a Channel_Endpoint {
        <Channel_Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl Channel_Endpoint {
    pub fn new() -> Channel_Endpoint {
        ::std::default::Default::default()
    }

    // string node_name = 1;


    pub fn get_node_name(&self) -> &str {
        &self.node_name
    }
    pub fn clear_node_name(&mut self) {
        self.node_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        &mut self.node_name
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_name, ::std::string::String::new())
    }

    // string port_name = 2;


    pub fn get_port_name(&self) -> &str {
        &self.port_name
    }
    pub fn clear_port_name(&mut self) {
        self.port_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_name(&mut self, v: ::std::string::String) {
        self.port_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_name(&mut self) -> &mut ::std::string::String {
        &mut self.port_name
    }

    // Take field
    pub fn take_port_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Channel_Endpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if !self.port_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.port_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if !self.port_name.is_empty() {
            os.write_string(2, &self.port_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Channel_Endpoint {
        Channel_Endpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_name",
                    |m: &Channel_Endpoint| { &m.node_name },
                    |m: &mut Channel_Endpoint| { &mut m.node_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "port_name",
                    |m: &Channel_Endpoint| { &m.port_name },
                    |m: &mut Channel_Endpoint| { &mut m.port_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Channel_Endpoint>(
                    "Channel_Endpoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Channel_Endpoint {
        static mut instance: ::protobuf::lazy::Lazy<Channel_Endpoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Channel_Endpoint,
        };
        unsafe {
            instance.get(Channel_Endpoint::new)
        }
    }
}

impl ::protobuf::Clear for Channel_Endpoint {
    fn clear(&mut self) {
        self.node_name.clear();
        self.port_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Channel_Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel_Endpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateApplicationRequest {
    // message fields
    pub application_configuration: ::protobuf::SingularPtrField<ApplicationConfiguration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateApplicationRequest {
    fn default() -> &'a CreateApplicationRequest {
        <CreateApplicationRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateApplicationRequest {
    pub fn new() -> CreateApplicationRequest {
        ::std::default::Default::default()
    }

    // .oak.ApplicationConfiguration application_configuration = 1;


    pub fn get_application_configuration(&self) -> &ApplicationConfiguration {
        self.application_configuration.as_ref().unwrap_or_else(|| ApplicationConfiguration::default_instance())
    }
    pub fn clear_application_configuration(&mut self) {
        self.application_configuration.clear();
    }

    pub fn has_application_configuration(&self) -> bool {
        self.application_configuration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_application_configuration(&mut self, v: ApplicationConfiguration) {
        self.application_configuration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_configuration(&mut self) -> &mut ApplicationConfiguration {
        if self.application_configuration.is_none() {
            self.application_configuration.set_default();
        }
        self.application_configuration.as_mut().unwrap()
    }

    // Take field
    pub fn take_application_configuration(&mut self) -> ApplicationConfiguration {
        self.application_configuration.take().unwrap_or_else(|| ApplicationConfiguration::new())
    }
}

impl ::protobuf::Message for CreateApplicationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.application_configuration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.application_configuration)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.application_configuration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.application_configuration.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateApplicationRequest {
        CreateApplicationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApplicationConfiguration>>(
                    "application_configuration",
                    |m: &CreateApplicationRequest| { &m.application_configuration },
                    |m: &mut CreateApplicationRequest| { &mut m.application_configuration },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateApplicationRequest>(
                    "CreateApplicationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateApplicationRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateApplicationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateApplicationRequest,
        };
        unsafe {
            instance.get(CreateApplicationRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateApplicationRequest {
    fn clear(&mut self) {
        self.application_configuration.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateApplicationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateApplicationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateApplicationResponse {
    // message fields
    pub application_id: ::std::string::String,
    pub grpc_port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateApplicationResponse {
    fn default() -> &'a CreateApplicationResponse {
        <CreateApplicationResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateApplicationResponse {
    pub fn new() -> CreateApplicationResponse {
        ::std::default::Default::default()
    }

    // string application_id = 1;


    pub fn get_application_id(&self) -> &str {
        &self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: ::std::string::String) {
        self.application_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_id(&mut self) -> &mut ::std::string::String {
        &mut self.application_id
    }

    // Take field
    pub fn take_application_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_id, ::std::string::String::new())
    }

    // int32 grpc_port = 2;


    pub fn get_grpc_port(&self) -> i32 {
        self.grpc_port
    }
    pub fn clear_grpc_port(&mut self) {
        self.grpc_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_grpc_port(&mut self, v: i32) {
        self.grpc_port = v;
    }
}

impl ::protobuf::Message for CreateApplicationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.grpc_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.application_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.application_id);
        }
        if self.grpc_port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.grpc_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.application_id.is_empty() {
            os.write_string(1, &self.application_id)?;
        }
        if self.grpc_port != 0 {
            os.write_int32(2, self.grpc_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateApplicationResponse {
        CreateApplicationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_id",
                    |m: &CreateApplicationResponse| { &m.application_id },
                    |m: &mut CreateApplicationResponse| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "grpc_port",
                    |m: &CreateApplicationResponse| { &m.grpc_port },
                    |m: &mut CreateApplicationResponse| { &mut m.grpc_port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateApplicationResponse>(
                    "CreateApplicationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateApplicationResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateApplicationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateApplicationResponse,
        };
        unsafe {
            instance.get(CreateApplicationResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateApplicationResponse {
    fn clear(&mut self) {
        self.application_id.clear();
        self.grpc_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateApplicationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateApplicationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TerminateApplicationRequest {
    // message fields
    pub application_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TerminateApplicationRequest {
    fn default() -> &'a TerminateApplicationRequest {
        <TerminateApplicationRequest as ::protobuf::Message>::default_instance()
    }
}

impl TerminateApplicationRequest {
    pub fn new() -> TerminateApplicationRequest {
        ::std::default::Default::default()
    }

    // string application_id = 1;


    pub fn get_application_id(&self) -> &str {
        &self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: ::std::string::String) {
        self.application_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_id(&mut self) -> &mut ::std::string::String {
        &mut self.application_id
    }

    // Take field
    pub fn take_application_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TerminateApplicationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.application_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.application_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.application_id.is_empty() {
            os.write_string(1, &self.application_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TerminateApplicationRequest {
        TerminateApplicationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_id",
                    |m: &TerminateApplicationRequest| { &m.application_id },
                    |m: &mut TerminateApplicationRequest| { &mut m.application_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TerminateApplicationRequest>(
                    "TerminateApplicationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TerminateApplicationRequest {
        static mut instance: ::protobuf::lazy::Lazy<TerminateApplicationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TerminateApplicationRequest,
        };
        unsafe {
            instance.get(TerminateApplicationRequest::new)
        }
    }
}

impl ::protobuf::Clear for TerminateApplicationRequest {
    fn clear(&mut self) {
        self.application_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TerminateApplicationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TerminateApplicationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TerminateApplicationResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TerminateApplicationResponse {
    fn default() -> &'a TerminateApplicationResponse {
        <TerminateApplicationResponse as ::protobuf::Message>::default_instance()
    }
}

impl TerminateApplicationResponse {
    pub fn new() -> TerminateApplicationResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TerminateApplicationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TerminateApplicationResponse {
        TerminateApplicationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TerminateApplicationResponse>(
                    "TerminateApplicationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TerminateApplicationResponse {
        static mut instance: ::protobuf::lazy::Lazy<TerminateApplicationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TerminateApplicationResponse,
        };
        unsafe {
            instance.get(TerminateApplicationResponse::new)
        }
    }
}

impl ::protobuf::Clear for TerminateApplicationResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TerminateApplicationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TerminateApplicationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmanager.proto\x12\x03oak\"\x9d\x01\n\x18ApplicationConfiguration\x12\
    \x1f\n\x05nodes\x18\x01\x20\x03(\x0b2\t.oak.NodeR\x05nodes\x12(\n\x08cha\
    nnels\x18\x02\x20\x03(\x0b2\x0c.oak.ChannelR\x08channels\x126\n\rwasm_co\
    ntents\x18\x03\x20\x03(\x0b2\x11.oak.WasmContentsR\x0cwasmContents\"\x9c\
    \x02\n\x04Node\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12)\
    \n\x08log_node\x18\x02\x20\x01(\x0b2\x0c.oak.LogNodeH\0R\x07logNode\x12?\
    \n\x10grpc_server_node\x18\x03\x20\x01(\x0b2\x13.oak.GrpcServerNodeH\0R\
    \x0egrpcServerNode\x12B\n\x11web_assembly_node\x18\x04\x20\x01(\x0b2\x14\
    .oak.WebAssemblyNodeH\0R\x0fwebAssemblyNode\x12:\n\x0cstorage_node\x18\
    \x05\x20\x01(\x0b2\x15.oak.StorageProxyNodeH\0R\x0bstorageNodeB\x0b\n\tn\
    ode_type\"\x10\n\x0eGrpcServerNode\"\t\n\x07LogNode\"`\n\x0fWebAssemblyN\
    ode\x12,\n\x12wasm_contents_name\x18\x01\x20\x01(\tR\x10wasmContentsName\
    \x12\x1f\n\x05ports\x18\x02\x20\x03(\x0b2\t.oak.PortR\x05ports\"E\n\x0cW\
    asmContents\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12!\n\x0cmodu\
    le_bytes\x18\x02\x20\x01(\x0cR\x0bmoduleBytes\",\n\x10StorageProxyNode\
    \x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\"m\n\x04Port\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\"\n\x04type\x18\x02\x20\
    \x01(\x0e2\x0e.oak.Port.TypeR\x04type\"-\n\x04Type\x12\x14\n\x10TYPE_UNS\
    PECIFIED\x10\0\x12\x06\n\x02IN\x10\x01\x12\x07\n\x03OUT\x10\x02\"\xd9\
    \x01\n\x07Channel\x12>\n\x0fsource_endpoint\x18\x01\x20\x01(\x0b2\x15.oa\
    k.Channel.EndpointR\x0esourceEndpoint\x12H\n\x14destination_endpoint\x18\
    \x02\x20\x01(\x0b2\x15.oak.Channel.EndpointR\x13destinationEndpoint\x1aD\
    \n\x08Endpoint\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12\
    \x1b\n\tport_name\x18\x02\x20\x01(\tR\x08portName\"v\n\x18CreateApplicat\
    ionRequest\x12Z\n\x19application_configuration\x18\x01\x20\x01(\x0b2\x1d\
    .oak.ApplicationConfigurationR\x18applicationConfiguration\"_\n\x19Creat\
    eApplicationResponse\x12%\n\x0eapplication_id\x18\x01\x20\x01(\tR\rappli\
    cationId\x12\x1b\n\tgrpc_port\x18\x02\x20\x01(\x05R\x08grpcPort\"D\n\x1b\
    TerminateApplicationRequest\x12%\n\x0eapplication_id\x18\x01\x20\x01(\tR\
    \rapplicationId\"\x1e\n\x1cTerminateApplicationResponse2\xba\x01\n\x07Ma\
    nager\x12R\n\x11CreateApplication\x12\x1d.oak.CreateApplicationRequest\
    \x1a\x1e.oak.CreateApplicationResponse\x12[\n\x14TerminateApplication\
    \x12\x20.oak.TerminateApplicationRequest\x1a!.oak.TerminateApplicationRe\
    sponseb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
