//
// Copyright 2022 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.functions;

service OakFunctions {
  // Initializes the service and remote attestation keys.
  //
  // method_id: 0
  rpc Initialize(InitializeRequest) returns (InitializeResponse);

  // Handles an invocation coming from a client.
  //
  // method_id: 1
  rpc Invoke(InvokeRequest) returns (InvokeResponse);

  // Extends the next lookup data by the given chunk of lookup data. Only
  // after the sender calls finishes building the next lookup data, the receiver replaces the
  // current lookup data with the next lookup data, and only then chunk is will be served in
  // lookups.
  //
  // method_id: 2
  rpc ExtendNextLookupData(ExtendNextLookupDataRequest) returns (ExtendNextLookupDataResponse);

  // Finishes building the next lookup data with the given chunk of lookup data. The receiver
  // replaces the current lookup data and the next lookup data will be served in lookups.
  //
  // method_id: 3
  rpc FinishNextLookupData(FinishNextLookupDataRequest) returns (FinishNextLookupDataResponse);

  // Aborts building the next lookup data.option
  //
  // method_id: 4
  rpc AbortNextLookupData(Empty) returns (AbortNextLookupDataResponse);
}

message InitializeRequest {
  bytes wasm_module = 1;
  uint32 constant_response_size = 2;
}

message InitializeResponse {
  PublicKeyInfo public_key_info = 1;
}

message PublicKeyInfo {
  bytes public_key = 1;
  bytes attestation = 2;
}

message InvokeRequest {
  // TODO(#3843): Use explicit `oak_crypto` messages.
  bytes body = 1;
}

message InvokeResponse {
  // TODO(#3843): Use explicit `oak_crypto` messages.
  bytes body = 1;
}

message LookupDataEntry {
  bytes key = 1;
  bytes value = 2;
}

message LookupDataChunk {
  repeated LookupDataEntry items = 1;
}

// If the definition of ExtendNextLookupData changes, the estimation of the size when
// serialized in the Oak Functions Launcher needs to change, too.
message ExtendNextLookupDataRequest {
  LookupDataChunk chunk = 1;
}

message ExtendNextLookupDataResponse {}

message FinishNextLookupDataRequest {}

message FinishNextLookupDataResponse {}

message AbortNextLookupDataResponse {}

message Empty {}
