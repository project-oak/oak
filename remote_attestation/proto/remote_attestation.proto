//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.remote_attestation;

option java_multiple_files = true;
option java_package = "oak.remote_attestation";

/// Placeholder implementation of TEE report for remote attestation.
/// https://www.amd.com/system/files/TechDocs/56860.pdf#page=39
///
/// TODO(#1867): Add remote attestation support and use real TEE reports.
message AttestationReport {
  // Version number of this attestation report.
  int32 version = 1;
  // Security version number of SNP firmware.
  int32 svn = 2;
  // The installed version of firmware.
  int32 platform_version = 3;
  // Arbitrary data to put into the TEE report.
  bytes data = 4;
  // TEE measurement, i.e. VM hash.
  bytes measurement = 5;
  // Signature of this report.
  bytes signature = 6;
}

/// Convenience struct for representing X.509 TEE extensions containing TEE reports and TEE
/// provider's certificates.
message AttestationInfo {
  /// TEE report.
  AttestationReport report = 1;
  /// Provider's PEM encoded X.509 certificate that signs TEE firmware keys.
  /// https://tools.ietf.org/html/rfc7468
  bytes certificate = 2;
}

message EncryptedData {
  // Random nonce (initialization vector) used for encryption/decryption.
  bytes nonce = 1;
  // Data encrypted using the session key.
  bytes data = 2;
}

// TODO(#2105): Implement challenge-response in remote attestation.
// TODO(#2106): Support various claims in remote attestation.
message ClientHello {
  // Random vector sent in messages for preventing replay attacks.
  bytes random = 1;
}

message ServerIdentity {
  // Remote attestation protocol version.
  int32 version = 1;
  // Public key needed to establish a session key.
  bytes ephemeral_public_key = 2;
  // Random vector sent in messages for preventing replay attacks.
  bytes random = 3;
  // Signature of the SHA-256 hash of all previously send and received messaged.
  // Transcript signature is sent in messages to prevent replay attacks.
  //
  // Signature must be an IEEE-P1363 encoded ECDSA-P256 signature.
  // https://datatracker.ietf.org/doc/html/rfc6979
  // https://standards.ieee.org/standard/1363-2000.html
  bytes transcript_signature = 4;
  // Public key used to sign transcripts.
  //
  // Public key must be an OpenSSL ECDSA-P256 key, which is represented as
  // `0x04 | X: 32-byte | Y: 32-byte`.
  // Where X and Y are big-endian coordinates of an Elliptic Curve point.
  // https://datatracker.ietf.org/doc/html/rfc6979
  bytes signing_public_key = 5;
  // Information used for remote attestation such as a TEE report and a TEE provider's certificate.
  // TEE report contains a hash of the `signing_public_key`.
  AttestationInfo attestation_info = 6;
}

message ClientIdentity {
  // Public key needed to establish a session key.
  bytes ephemeral_public_key = 1;
  // Signature of the SHA-256 hash of all previously send and received messaged.
  // Transcript signature is sent in messages to prevent replay attacks.
  //
  // Signature must be an IEEE-P1363 encoded ECDSA-P256 signature.
  // https://datatracker.ietf.org/doc/html/rfc6979
  // https://standards.ieee.org/standard/1363-2000.html
  bytes transcript_signature = 2;
  // Public key used to sign transcripts.
  //
  // Public key must be an OpenSSL ECDSA-P256 key, which is represented as
  // `0x04 | X: 32-byte | Y: 32-byte`.
  // Where X and Y are big-endian coordinates of an Elliptic Curve point.
  // https://datatracker.ietf.org/doc/html/rfc6979
  bytes signing_public_key = 3;
  // Information used for remote attestation such as a TEE report and a TEE provider's certificate.
  // TEE report contains a hash of the `signing_public_key`.
  AttestationInfo attestation_info = 4;
}
