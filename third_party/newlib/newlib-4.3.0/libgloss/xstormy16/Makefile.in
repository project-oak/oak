#
#

DESTDIR =
VPATH = @srcdir@ @srcdir@/..
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =

SHELL =	/bin/sh

mkinstalldirs = $(SHELL) $(srcroot)/mkinstalldirs

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
RANLIB = @RANLIB@

# Yuk.
OBJCOPY = $(subst ranlib,objcopy,$(RANLIB))

OBJS		= isatty.o
CFLAGS		= -g -O2
ASFLAGS		= --gdwarf2
SCRIPTS		= 
CRT		= crt0.o crti.o crtn.o

# Here is all of the simulator stuff
SIM_SCRIPTS	= sim_high.ld sim_rom.ld
SIM_LDFLAGS	=
SIM_BSP		= libsim.a
SIM_OBJS	= syscalls.o sim_malloc_start.o

# Here is stuff for building apps for GDB on the EVA board
EVA_APP_BSP     = libeva_app.a
EVA_APP_OBJS    = close.o fstat.o getpid.o kill.o lseek.o open.o \
                  stat.o unlink.o eva_app.o
EVA_APP_SCRIPTS = eva_app.ld

# Stub stuff
EVA_STUB_HEX    = eva_stub.hex
EVA_STUB        = eva_stub.elf
EVA_STUB_OBJS   = xstormy16_stub.o crt0_stub.o

# Host specific makefile fragment comes in here.
@host_makefile_frag@

#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
# all: ${MON_CRT0} ${MON_BSP}
all: ${CRT} ${SIM_BSP} ${EVA_APP_BSP} ${EVA_STUB_HEX}

#
# here's where we build the board support packages for each target
#
${SIM_BSP}: ${OBJS} ${SIM_OBJS}
	${AR} ${ARFLAGS} ${SIM_BSP} ${SIM_OBJS} ${OBJS}
	${RANLIB} ${SIM_BSP}

${EVA_APP_BSP}: ${OBJS} ${EVA_APP_OBJS}
	${AR} ${ARFLAGS} ${EVA_APP_BSP} ${EVA_APP_OBJS} ${OBJS}
	${RANLIB} ${EVA_APP_BSP}

${EVA_STUB_HEX}: ${EVA_STUB}
	${OBJCOPY} -O ihex $< $@

${EVA_STUB}: ${EVA_STUB_OBJS} ${srcdir}/eva_stub.ld
	${CC} -g -Os -nostartfiles -T${srcdir}/eva_stub.ld ${EVA_STUB_OBJS} -o $@


#
# here's where we build the test programs for each target
#
.PHONY: test
test:	
	true

#
#
#
.c.S:
	${CC} ${CFLAGS_FOR_TARGET} -c $<

clean mostlyclean:
	rm -f a.out core *.i *.o *-test *.srec *.dis *.x *.hex $(SIM_BSP) $(EVA_APP_BSP) $(EVA_STUB) 

distclean maintainer-clean realclean: clean
	rm -f Makefile *~

.PHONY: install info install-info clean-info
install: 
	${mkinstalldirs} ${DESTDIR}${tooldir}/lib${MULTISUBDIR}
	set -e; for x in ${SIM_BSP} ${CRT} ${EVA_APP_BSP} ${EVA_STUB_HEX} ${EVA_STUB} ; do\
	  ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
	done
	@for script in ${SCRIPTS} ${SIM_SCRIPTS} ${EVA_APP_SCRIPTS}; do\
	  ${INSTALL_DATA} ${srcdir}/$${script} $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$${script}; \
	done


doc:
info:
install-info:
clean-info:

Makefile: Makefile.in ../config.status
	cd .. && $(SHELL) config.status
