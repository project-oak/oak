# Copyright (c) 1995, 1996, 2001 Cygnus Support  -*- mode:makefile -*-
#
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors
# and need not follow the licensing terms described here, provided that
# the new terms are clearly indicated on the first page of each file where
# they apply.
#
# This currently works with Motorola's MVME135 and IDP m68k based
# target boards.
#

DESTDIR =
VPATH = @srcdir@
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@
program_transform_name = @program_transform_name@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

SHELL =	/bin/sh

mkinstalldirs = $(SHELL) $(srcroot)/mkinstalldirs

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
RANLIB = @RANLIB@
AR_FLAGS = qv

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

SCRIPTS = mvme162 mvme135 idp bcc

OBJS =  close.o fstat.o getpid.o isatty.o kill.o \
	lseek.o open.o print.o putnum.o read.o sbrk.o stat.o \
	unlink.o write.o

# What targets to build for.  This is a list of {m68k,cf}
TARGET = @M68K_TARGET@

# Here is all of the simulator stuff
SIM_SCRIPTS	= sim.ld
SIM_LDFLAGS	= -Tsim.ld
SIM_BSP		= libsim.a
SIM_CRT0	= sim-crt0.o
SIM_OBJS	= sim-print.o sim-inbyte.o sim-sbrk.o sim-abort.o sim-errno.o simulator.o sim-funcs.o unlink.o
SIM_TEST	= 
SIM_INSTALL	= install-sim


CRT0 = crt0.o
#
# here's all the MVME135 target stuff
#
MVME_LDFLAGS=	-L${srcdir} -Tmvme135.ld
MVME135_BSP=	libmvme135.a
MVME162_BSP=	libmvme162.a
#MVME135_OBJS=	mvme.o
#MVME162_OBJS=	mvme.o
# Uncomment the last two objects if you want to use the GDB stub. 
# The stub is included "as is", and will likely take some hacking
# to work on your system.
MVME135_OBJS=	cpu32bug.o # mvme-stub.o mvme135-asm.o
MVME162_OBJS=	cpu32bug.o # mvme-stub.o mvme162lx-asm.o


#
# here's all the BCC target stuff
#
BCC_LDFLAGS=	-L${srcdir} -Tbcc.ld
BCC_BSP=	libbcc.a
BCC_OBJS=	cpu32bug.o

#
# here's all the IDP target stuff
#
IDP_LDFLAGS=	-L${srcdir} -Tidp.ld
IDP_BSP=	libidp.a
IDP_OBJS=	leds.o idp-inbyte.o idp-outbyte.o mc68ec.o

#
# here's all the IDP GDB target stuff
#
IDPGDB_LDFLAGS=	-L${srcdir} -Tidpgdb.ld
IDPGDB_BSP=	libidpgdb.a
IDPGDB_OBJS=	leds.o idp-inbyte.o idp-gdb-outbyte.o mc68ec.o

#
# here's all the ColdFire boards
#
CF_CRT0S=	cf-hosted-crt0.o cf-unhosted-crt0.o
CF_BSP=		libcf.a
CF_OBJS=	cf-isv.o cf-crt1.o cf-hosted.o getpid.o kill.o cf-sbrk.o \
		cf-exit.o $(patsubst %,cf-%.o,${CF_ISRS})
CF_ISRS=	other_interrupt access_error address_error \
	illegal_instruction divide_by_zero privilege_violation \
	trace unimplemented_opcode breakpoint_debug_interrupt \
	format_error spurious_interrupt fp_interrupt \
	unsupported_instruction trap_interrupt

#              RAM       ROM
m5208evb  := 1024M 16M          0M   2M
m5213evb  :=  512M 32K          0M 256K
m52235evb :=  512M 32K          0M 256K
m5235evb  :=    0M 16M  0xFFE00000   2M
m5249c3	  :=    0M  4M  0xFFE00000   2M
m5272c3   :=    0M  4M  0xFFE00000   2M
m5275evb  :=    0M 16M  0xFFE00000   2M
m5282evb  :=    0M 16M  0xFFE00000   2M
m5329evb  := 1024M 32M          0M   2M
m5485evb  :=    0M 64M       1024M  16M

CF_BOARDS :=  m5208evb m5213evb m52235evb m5235evb m5249c3 m5272c3 m5275evb \
	m5282evb m5329evb m5485evb
CF_RAM_SCRIPTS := $(patsubst %,%-ram.ld,$(CF_BOARDS))
CF_ROM_SCRIPTS := $(patsubst %,%-rom.ld,$(CF_BOARDS))
CF_HOSTED_SCRIPTS := $(patsubst %.ld,%-hosted.ld,$(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS))
CF_SCRIPTS = $(CF_RAM_SCRIPTS) $(CF_ROM_SCRIPTS) $(CF_HOSTED_SCRIPTS)
CF_SOURCES = cf-isv.S cf-crt0.S cf-crt1.c asm.h

# Fido board.
# Programs built with the ROM linker script are designed to be
# executed from flash.  Programs built with the RAM linker script are
# designed to be run via JTAG.  Program built with the RedBoot linker
# script are designed to be run from the RedBoot boot loader.
FIDO_CRT0S    = fido-rom-crt0.o fido-ram-crt0.o fido-redboot-crt0.o
FIDO_BSP      = libfido.a
FIDO_OBJS     = fido-hosted.o getpid.o kill.o fido-sbrk.o fido-_exit.o \
		$(patsubst %,fido-%Handler.o,$(FIDO_HANDLERS))
FIDO_HANDLERS:= BusError AddressError IllegalInstruction DivideByZero Chk \
	Trapcc PrivilegeViolation Trace ALine FLine HwBreakpoint Reserved0 \
	FormatError UnitializedInt SoftwareInt \
	$(addprefix Unassigned,0 1 2 3 4 5 6) \
	$(addprefix Int,0 1 2 3 4 5 6 7) \
	$(addprefix Trap,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	$(addprefix Reserved,048 049 050 051 052 053 054 055 056 057 058 \
				059 060 061 062 063) \
	ContextOvertime MpuError \
	$(addprefix SystemTimer,0 1 2 3 4) \
	WatchdogTimer TimerCounter0 TimerCounter1 DMA0 DMA1 AtoDConversion \
	$(addprefix Pdma,0 1 2 3) \
	$(addprefix Reserved,081 082 083 084 085 086 087 088 089 \
				090 091 092 093 094 095) \
	$(addprefix Trapx,00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15) \
	Dummy
FIDO_UNHOSTED_SCRIPTS:= fido-rom.ld fido-sram.ld fido-sdram.ld
FIDO_HOSTED_SCRIPTS:=$(patsubst %.ld,%-hosted.ld,$(FIDO_UNHOSTED_SCRIPTS))
FIDO_SCRIPTS  = $(FIDO_UNHOSTED_SCRIPTS) $(FIDO_HOSTED_SCRIPTS) fido-redboot.ld
FIDO_SOURCES  = fido-crt0.S asm.h fido.h

#
# here's all the unhosted stuff
#
UNHOSTED_BSP=	libunhosted.a
UNHOSTED_OBJS=	unhosted-close.o unhosted-fstat.o \
		unhosted-gettimeofday.o unhosted-isatty.o unhosted-lseek.o \
		unhosted-open.o unhosted-read.o unhosted-rename.o \
		unhosted-stat.o unhosted-system.o unhosted-time.o \
		unhosted-unlink.o unhosted-write.o

#
# here's all the hosted stuff
#
HOSTED_BSP=	libhosted.a
HOSTED_OBJS=	hosted-gdb.o hosted-exit.o $(patsubst un%,%,$(UNHOSTED_OBJS))

# Host specific makefile fragment comes in here.
@host_makefile_frag@

all :: $(TARGET:%=all_%)

#
# here's where we build the board support packages for each target
#

.PHONY: all_m68k
all_m68k :: ${SIM_CRT0} ${SIM_BSP} ${CRT0} ${BCC_BSP} ${IDP_BSP} \
	${IDPGDB_BSP} ${MVME135_BSP} ${MVME162_BSP}
.PHONY: all_cf
all_cf :: ${CF_CRT0S} ${CF_BSP} ${CF_SCRIPTS} ${HOSTED_BSP} ${UNHOSTED_BSP}

.PHONY: all_fido
all_fido :: ${FIDO_CRT0S} ${FIDO_BSP} ${FIDO_SCRIPTS} \
	${HOSTED_BSP} ${UNHOSTED_BSP}

${SIM_BSP}: ${SIM_OBJS}
	${AR} ${ARFLAGS} $@ ${SIM_OBJS}
	${RANLIB} $@

${BCC_BSP}: $(OBJS) ${BCC_OBJS}
	${AR} ${ARFLAGS} $@ $(OBJS) ${BCC_OBJS}
	${RANLIB} $@

${IDP_BSP}: $(OBJS) ${IDP_OBJS}
	${AR} ${ARFLAGS} $@ $(OBJS) ${IDP_OBJS}
	${RANLIB} $@

${IDPGDB_BSP}: $(OBJS) ${IDPGDB_OBJS}
	${AR} ${ARFLAGS} $@ $(OBJS) ${IDPGDB_OBJS}
	${RANLIB} $@

${MVME135_BSP}: $(OBJS) ${MVME135_OBJS}
	${AR} ${ARFLAGS} $@ $(OBJS) ${MVME135_OBJS}
	${RANLIB} $@

${MVME162_BSP}: $(OBJS) ${MVME162_OBJS}
	${AR} ${ARFLAGS} $@ $(OBJS) ${MVME162_OBJS}
	${RANLIB} $@

# build hosted library
$(HOSTED_OBJS): hosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@
$(HOSTED_BSP): $(HOSTED_OBJS)
	${AR} ${ARFLAGS} $@ $^
	${RANLIB} $@
cf-hosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=1 $(INCLUDES) -c $< -o $@

# build unhosted library
$(UNHOSTED_OBJS): unhosted%.o: io%.c io.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@
$(UNHOSTED_BSP): $(UNHOSTED_OBJS)
	${AR} ${ARFLAGS} $@ $^
	${RANLIB} $@
cf-unhosted-crt0.o: cf-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DHOSTED=0 $(INCLUDES) -c $< -o $@

# build coldfire library
$(patsubst %,cf-%.o,${CF_ISRS}) : cf-isrs.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $< -o $@ \
	  -DL_$(patsubst cf-%.o,%,$@)
$(CF_BSP): $(CF_OBJS)
	${AR} ${ARFLAGS} $@ $^
	${RANLIB} $@

m%-ram.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ${SHELL} $< >$@
m%-rom.ld : cf.sc Makefile
	IO=unhosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@
m%-ram-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ${SHELL} $< >$@
m%-rom-hosted.ld : cf.sc Makefile
	IO=hosted RAM=$(word 1,$(m$*)) RAM_SIZE=$(word 2,$(m$*)) \
	  ROM=$(word 3,$(m$*)) ROM_SIZE=$(word 4,$(m$*)) ${SHELL} $< >$@

#build fido library
fido-%-crt0.o : fido-crt0.S asm.h fido.h
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) \
		-DFIDO_$* -c -o $@ $<

$(patsubst %,fido-%Handler.o,${FIDO_HANDLERS}) : fido-handler.c
	$(CC) $(CFLAGS_FOR_TARGET) -fomit-frame-pointer $(CFLAGS) $(INCLUDES) \
		-c $< -o $@ -DHANDLER=$(patsubst fido-%.o,_%,$@)
${FIDO_BSP}: ${FIDO_OBJS}
	${AR} ${ARFLAGS} $@ ${FIDO_OBJS}
	${RANLIB} $@

fido-rom.ld: fido.sc
	MODE=rom IO=unhosted ${SHELL} $< > $@

fido-rom-hosted.ld: fido.sc
	MODE=rom IO=hosted ${SHELL} $< > $@

fido-sram.ld: fido.sc
	MODE=sram IO=unhosted ${SHELL} $< > $@

fido-sram-hosted.ld: fido.sc
	MODE=sram IO=hosted ${SHELL} $< > $@

fido-sdram.ld: fido.sc
	MODE=sdram IO=unhosted ${SHELL} $< > $@

fido-sdram-hosted.ld: fido.sc
	MODE=sdram IO=hosted ${SHELL} $< > $@

fido-redboot.ld: fido.sc
	MODE=redboot IO=unhosted ${SHELL} $< > $@

leds.o: ${srcdir}/leds.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-inbyte.o: ${srcdir}/idp-inbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-outbyte.o: ${srcdir}/idp-outbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

idp-gdb-outbyte.o: ${srcdir}/idp-outbyte.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) -DGDB_MONITOR_OUTPUT $(INCLUDES) -c $< -o $@

mc68ec.o: ${srcdir}/mc68ec.c
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -c $<

test.o: ${srcdir}/test.c

#
# Make a simple test case to test the linker script, startup code, and
# I/O code
#
test: $(OBJS) idp-test.srec mvme135-test.srec bcc-test.srec \
	idp-test.dis mvme135-test.dis bcc-test.dis
	@echo Done...

# compile a fully linked binary. The -N option is for a.out, so the
# base address will be zero, rather than the default of 0x2020. The
# -Wl,-T*.ld is for the linker script. By using -Wl, the linker script
# is put on the proper place in the comand line for ld, and all the
# symbols will get fully resolved.

idp-test.x: test.o ${CRT0} Makefile ${IDP_BSP}
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
	test.o -o $@ $(LDFLAGS_FOR_TARGET) -N -Wl,-Tidp.ld
idp-test.srec: idp-test.x
	$(OBJCOPY) -O srec idp-test.x $@
idp-test.dis: idp-test.x
	@rm -fr idp-test.dis
	$(OBJDUMP) -d idp-test.x > $@
idp-test: idp-test.srec idp-test.dis

idpgdb-test.x: test.o ${CRT0} Makefile ${IDPGDB_BSP}
	${CC} $(CFLAGS_FOR_TARGET) $(CFLAGS) -L${srcdir} -L${objdir} \
	test.o -o $@ $(LDFLAGS_FOR_TARGET) -N -Wl,-Tidpgdb.ld
idpgdb-test.srec: idpgdb-test.x
	$(OBJCOPY) -O srec idpgdb-test.x $@
idpgdb-test.dis: idpgdb-test.x
	@rm -fr idpgdb-test.dis
	$(OBJDUMP) -d idpgdb-test.x > $@
idpgdb-test: idpgdb-test.srec idpgdb-test.dis

mvme135-test.x: test.o ${CRT0} ${srcdir}/mvme135.ld Makefile  ${MVME135_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tmvme135.ld -nostdlib
mvme135-test.srec: mvme135-test.x
	$(OBJCOPY) -O srec mvme135-test.x $@
mvme135-test.dis: mvme135-test.x
	@rm -fr mvme135-test.dis
	$(OBJDUMP) -d mvme135-test.x > $@
mvme135-test: mvme135-test.srec mvme135-test.dis

mvme162-test.x: test.o ${CRT0} ${srcdir}/mvme162.ld Makefile  ${MVME162_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tmvme162.ld -nostdlib
mvme162-test.srec: mvme162-test.x
	$(OBJCOPY) -O srec mvme162-test.x $@
mvme162-test.dis: mvme162-test.x
	@rm -fr mvme162-test.dis
	$(OBJDUMP) -d mvme162-test.x > $@
mvme162-test: mvme162-test.srec mvme162-test.dis

bcc-test.x: test.o ${CRT0} ${srcdir}/bcc.ld Makefile  ${BCC_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tbcc.ld -nostdlib
bcc-test.srec: bcc-test.x
	$(OBJCOPY) -O srec bcc-test.x $@
bcc-test.dis: bcc-test.x
	@rm -fr bcc-test.dis
	$(OBJDUMP) -d bcc-test.x > $@
bcc-test: bcc-test.srec bcc-test.dis

# a C++ test case
dtor.o:  $(srcdir)/dtor.C
	$(CC) $(CFLAGS_FOR_TARGET) $(CFLAGS) $(INCLUDES) -o $@ -c $<
dtor.dis: dtor.x
	@rm -fr dtor.dis
	$(OBJDUMP) -d dtor.x > $@
dtor.x: dtor.o ${CRT0} ${srcdir}/mvme135.ld Makefile  ${MVME135_BSP}
	${CC} -L${srcdir} -L${objdir} dtor.o -o $@ $(LIBS_FOR_TARGET) \
	-N -Wl,-Tmvme135.ld -nostdlib

unlink.o: $(srcdir)/../unlink.c

.PHONY: install info dvi doc install-info clean-info
install:: $(TARGET:%=install_%)


.PHONY:install_m68k
install_m68k::
	${mkinstalldirs} ${DESTDIR}${tooldir}/lib${MULTISUBDIR}
	# install SIM stuff
	$(INSTALL_PROGRAM) $(SIM_CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(SIM_CRT0)
	$(INSTALL_PROGRAM) $(SIM_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(SIM_BSP)
	$(INSTALL_DATA) ${srcdir}/sim.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sim.ld
	#
	$(INSTALL_PROGRAM) $(CRT0) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CRT0)
	# install BCC stuff
	$(INSTALL_PROGRAM) $(BCC_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(BCC_BSP)
	$(INSTALL_DATA) ${srcdir}/bcc.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/bcc.ld
	# install IDP stuff
	$(INSTALL_PROGRAM) $(IDP_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(IDP_BSP)
	$(INSTALL_DATA) ${srcdir}/idp.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/idp.ld
	# install IDPGDB stuff
	$(INSTALL_PROGRAM) $(IDPGDB_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(IDPGDB_BSP)
	$(INSTALL_DATA) ${srcdir}/idpgdb.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/idpgdb.ld
	# install MVME135 stuff
	$(INSTALL_PROGRAM) $(MVME135_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(MVME135_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme135.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/mvme135.ld
	# install MVME162lx stuff
	$(INSTALL_PROGRAM) $(MVME162_BSP) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(MVME162_BSP)
	$(INSTALL_DATA) ${srcdir}/mvme162.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/mvme162.ld
	$(INSTALL_DATA) ${srcdir}/sbc5204.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sbc5204.ld
	$(INSTALL_DATA) ${srcdir}/sbc5206.ld $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/sbc5206.ld

.PHONY: install_cf
install_cf:: install_io
	${mkinstalldirs} ${DESTDIR}${tooldir}/lib${MULTISUBDIR}
	# install CF stuff
	$(INSTALL_DATA) $(CF_CRT0S) $(CF_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(CF_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL_DATA) $(addprefix ${srcdir}/,$(CF_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
endif

.PHONY: install_fido
install_fido:: install_io
	${mkinstalldirs} ${DESTDIR}${tooldir}/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(FIDO_CRT0S) $(FIDO_BSP) \
		$(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)
	$(INSTALL_DATA) $(FIDO_SCRIPTS) $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}
ifeq ($(MULTISUBDIR),)
	# only install sources for the default multilib
	$(INSTALL) -d $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
	$(INSTALL_DATA) $(addprefix $(srcdir)/,$(FIDO_SOURCES)) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/src
endif

.PHONY: install_io
install_io::
	${mkinstalldirs} ${DESTDIR}${tooldir}/lib${MULTISUBDIR}
	# install IO stuff
	$(INSTALL_DATA) $(HOSTED_BSP) $(UNHOSTED_BSP) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}

# target specific makefile fragment comes in here.
@target_makefile_frag@

clean mostlyclean:
	rm -f a.out core *.i *~ *.a *.o *-test *.srec *.dis *.x *.map

distclean maintainer-clean realclean: clean
	rm -f Makefile

info dvi doc:
install-info:
clean-info:

Makefile: Makefile.in ../config.status
	cd .. && $(SHELL) config.status
