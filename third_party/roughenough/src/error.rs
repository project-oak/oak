// Copyright 2017-2019 int08h LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::tag::Tag;

/// Error types generated by this implementation
#[derive(Debug)]
pub enum Error {
    /// The associated tag was added to an `RtMessage` in non-increasing order.
    TagNotStrictlyIncreasing(Tag),

    /// The associated byte sequence does not correspond to a valid Roughtime tag.
    InvalidTag(Box<[u8]>),

    /// Invalid number of tags specified
    InvalidNumTags(u32),

    /// Tag value length exceeds length of source bytes
    InvalidValueLength(Tag, u32),

    /// Decoding failed. The associated `std::io::Error` should provide more information.
    DecodingFailure(std::io::Error),

    /// Offset was not 32-bit aligned
    InvalidAlignment(u32),

    /// Offset is outside of valid message range.
    InvalidOffsetValue(u32),

    /// Could not convert bytes to message because bytes were too short.
    MessageTooShort,

    /// Internal error.
    Internal,
}

impl From<std::io::Error> for Error {
    fn from(err: std::io::Error) -> Self {
        Error::DecodingFailure(err)
    }
}

impl From<ring::error::Unspecified> for Error {
    fn from(_err: ring::error::Unspecified) -> Self {
        Error::Internal
    }
}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::TagNotStrictlyIncreasing(tag) => {
                write!(f, "Tag not in increasing orger: {:?}", tag)
            }
            Error::InvalidTag(_) => write!(f, "Invalid tag"),
            Error::InvalidNumTags(tag_count) => write!(f, "Invalid number of tags: {}", tag_count),
            Error::InvalidValueLength(tag, length) => write!(
                f,
                "Tag {:?} value length exceeds length of source bytes: {}",
                tag, length
            ),
            Error::DecodingFailure(error) => write!(f, "Decoding error: {}", error),
            Error::InvalidAlignment(offset) => write!(f, "Offset not aligned: {}", offset),
            Error::InvalidOffsetValue(offset) => write!(f, "Offset outside range: {}", offset),
            Error::MessageTooShort => write!(f, "Message too short."),
            Error::Internal => write!(f, "Unspecified internal error."),
        }
    }
}

impl std::error::Error for Error {}
