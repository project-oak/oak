(function() {var type_impls = {
"oak_crypto":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Kem-for-X25519HkdfSha256\" class=\"impl\"><a href=\"#impl-Kem-for-X25519HkdfSha256\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Kem for X25519HkdfSha256</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.derive_keypair\" class=\"method trait-impl\"><a href=\"#method.derive_keypair\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">derive_keypair</a>(\n    ikm: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; (&lt;X25519HkdfSha256 as Kem&gt;::PrivateKey, &lt;X25519HkdfSha256 as Kem&gt;::PublicKey)</h4></section></summary><div class=\"docblock\"><p>Deterministically derives a keypair from the given input keying material</p>\n<h5 id=\"requirements\"><a class=\"doc-anchor\" href=\"#requirements\">§</a>Requirements</h5>\n<p>This keying material SHOULD have as many bits of entropy as the bit length of a\nsecret key, i.e., <code>8 * Self::PrivateKey::size()</code>. For X25519 and P-256, this is\n256 bits of entropy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sk_to_pk\" class=\"method trait-impl\"><a href=\"#method.sk_to_pk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sk_to_pk</a>(\n    sk: &amp;&lt;X25519 as DhKeyExchange&gt;::PrivateKey\n) -&gt; &lt;X25519 as DhKeyExchange&gt;::PublicKey</h4></section></summary><div class=\"docblock\"><p>Computes the public key of a given private key</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.PublicKey\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PublicKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PublicKey</a> = &lt;X25519 as DhKeyExchange&gt;::PublicKey</h4></section></summary><div class='docblock'>The key exchange’s public key type. If you want to generate a keypair, see\n<code>Kem::gen_keypair</code> or <code>Kem::derive_keypair</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.PrivateKey\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PrivateKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PrivateKey</a> = &lt;X25519 as DhKeyExchange&gt;::PrivateKey</h4></section></summary><div class='docblock'>The key exchange’s private key type. If you want to generate a keypair, see\n<code>Kem::gen_keypair</code> or <code>Kem::derive_keypair</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.EncappedKey\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EncappedKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">EncappedKey</a> = EncappedKey</h4></section></summary><div class='docblock'>The encapsulated key for this KEM. This is used by the recipient to derive the shared\nsecret.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.KEM_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.KEM_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">KEM_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a> = 32u16</h4></section></summary><div class='docblock'>The algorithm identifier for a KEM implementation</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gen_keypair\" class=\"method trait-impl\"><a href=\"#method.gen_keypair\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gen_keypair</a>&lt;R&gt;(csprng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; (Self::PrivateKey, Self::PublicKey)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.CryptoRng.html\" title=\"trait rand_core::CryptoRng\">CryptoRng</a> + <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand_core/trait.RngCore.html\" title=\"trait rand_core::RngCore\">RngCore</a>,</div></h4></section></summary><div class='docblock'>Generates a random keypair using the given RNG</div></details></div></details>","Kem","oak_crypto::hpke::Kem"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()