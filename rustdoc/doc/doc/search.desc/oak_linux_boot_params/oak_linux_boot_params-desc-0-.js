searchState.loadedDescShard("oak_linux_boot_params", 0, "ACPI Reclaim Memory. Available after the OS reads the ACPI …\nIndicates that the value entered in …\nMemory that is not enabled.\nE820 address range types according to Chapter 15 of the …\nUninitialized entry in the table. Don’t trust the …\nUsed internally by the compressed kernel to communicate …\nIf <code>0</code>, the protected-mode code is loaded at <code>0x10000</code>.If <code>1</code>, …\nBoot protocol option flags.\nACPI NVS memory; in use or reserved by the system.\nPersistent memory: must be handled distinct from …\nRequests the kernel to not write early messages that …\nAvailable RAM usable by the operating system.\nIn use or reserved by the system.\nReal-mode Kernel Header.\nMemory in which errors have been detected.\nThe kernel/boot_params/cmdline/ramdisk can be above 4G.\nThe kernel supports the 32-bit EFI handoff entry point …\nThe kernel supports the 64-bit EFI handoff entry point …\nThe kernel supports kexec EFI boot with EFI runtime …\nThis kernel has the legacy 64-bit entry point at <code>0x200</code>.\nExtended Boot protocol option flags.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n0xAA55 magic number\nDO NOT USE - for bootsect.S use only\n32-bit pointer to the kernel command line\nMaximum size of the kernel command line\nBoot loader hook\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nExtended boot laoder ID\nExtended boot loader version\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nOffset of handover entry point\nHardware subarchitecture\nSubarchitecture-specific data\nMagic signature “HdrS”\nFree memory after setup end\nLinear memory required during initialization\nHighest legal initrd address\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nJump instruction\nPhysical addr alignment required for kernel\nOffset of the kernel_info\nPointer to kernel version string\nBoot protocol option flags\nMinimum alignment, as a power of two\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nLength of kernel payload\nOffset of kernel payload\nPreferred loading address\nDO NOT USE - for bootsect.S use only\ninitrd load address (set by boot loader)\ninitrd size (set by boot loader)\nBoot loader hook\nWhether kernel is relocatable or not\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDefault root device number\nIf this field is nonzero, the root defaults to readonly.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n64-bit physical pointer to linked list of struct setup_data\nMove to high memory size (used with hooks)\nThe size of the setup code in 512-byte sectors.\nThe load-low segment (<code>0x1000</code>) (obsolete)\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe size of the protected-mode code in units of 16-byte …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBoot loader identifier\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBoot protocol version supported\nVideo mode control\nBoot protocol option flags")