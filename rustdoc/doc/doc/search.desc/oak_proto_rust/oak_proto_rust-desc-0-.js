searchState.loadedDescShard("oak_proto_rust", 0, "Similar to RawDigest, but contains hex-encoded hashes for …\nContains various digest formats for the same underlying …\nContainer that can contain any serialized data and a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique payload identifier that also defines how to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialized data.\nValues extracted from an AMD SEV-SNP attestation report.\nKeys used by the application to derive encryption session …\nValues extracted from the evidence that represents an …\nThe expected binary and configuration digests for an …\nRepresents an application running under Oak Restricted …\nRepresents a verification result. Can be extended to …\nReserved for future use.\nMessage for passing embedded certificate authority …\nSpecifies a list of claim types. Claims are assertions …\nValues extracted from the evidence that represents the …\nThe expected bundle and configuration digests for a …\nMessage that is sent between DICE layers.\nVerifies that the field contains at least one of the given …\nAn ECDSA key with curve P-256 and SHA2_256 hashing. An …\nDetails about the endorsement statement which can be …\nVerifies the transparency log entry, including signatures …\nThis message contains statements that some entity (e.g. a …\nRepresents an event intended for inclusion in attestation. …\nAttestation verification results for an individual event. …\nValues extracted from the evidence that represents an …\nRepresents digest of an event.\nA sequence of Events intended for inclusion in attestation …\nRepresents digest of an event.\nAttestation Evidence used by the client to the identity of …\nEvidence values extracted from attestation evidence during …\nValues extracted from a fake attestation report when not …\nReference value for a file including its digests.\nThe Transparent Release attachment for Oak Stage 0. …\nValues extracted from an Intel TDX attestation report.\nThe Transparent Release attachment for Oak Containers …\nFollows the lines of <code>BinaryReferenceValue</code>, but provides a …\nSimilar to the <code>Digests</code> message, but allows to specify …\nThe expected values for kernel image and setup data, …\nValues extracted from the the kernel layer evidence, as …\nReference values of the kernel layer, as measured by …\nReference values of the kernel layer, as measured by …\nDICE layer evidence containing a certificate signed by the …\nValues extracted from the evidence for an Oak Containers …\nValues extracted from the evidence for a restricted kernel …\nOak Standalone currently skips all attestation\nAll the related measurements for Oak Container’s Stage 1.\nValues extracted from the root layer evidence.\nEvidence generated by the Layer0.\nA signed endorsement which is optionally published.\nAll the related measurements for Stage 0.\nAll the related measurements for Oak Container’s Stage 1.\nA match in at least one value is considered a success. At …\nValues extracted from the evidence that represents the Oak …\nThe expected binary digests for a system layer image.\nThe versions of the components in the AMD SEV-SNP platform …\nThis proto defines the layered DICE Attestation Evidence.\nReference value to match text via endorsement, or directly …\nA Transparent Release endorsement for a binary which …\nA verifying key without a defined type is invalid.\nSpecifies a temporal range of validity for an endorsement.\nReference values that control how the endorsement is …\nSet of keys currently needed for verification. Will …\nMeasured digests of the commands for building the ACPI …\nACPI table generation digest\nIf true, will skip the check that the TEE is not in debug …\nIf true, will skip the check that the TEE is not in debug …\nSwitches between AMD SEV-SNP and Intel TDX based on …\nSwitches between AMD SEV-SNP and Intel TDX based on …\nApplication keys signed by the penultimate layer’s ECA …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNested message and enum types in <code>AttestationResults</code>.\nVerifies the application binary based on endorsement.\nVerifies the container binary based on endorsement.\nMeasurement RawDigest of the application binary.\nThe allowable digest values for an application binary.\nNested message and enum types in <code>BinaryReferenceValue</code>.\nThe current security version number (SVN) of the secure …\nMeasurement RawDigest of the container bundle.\nThe allowable digest values for a container bundle.\nMeasurement RawDigest of the application configuration.\nMeasurement RawDigest of the configuration used by the …\nThe allowable digest values for a configuration passed …\nMaps number of vCPUs to measurement of the modified …\nVerifies configuration with respect to the application …\nVerifies configuration with respect to the container …\nThe allowable digest values for a configuration passed to …\nThis represents the actual, up-to-date TCB version of the …\nWhether the VM was booted in debug mode.\nAllowable digests for the file.\nCertificate signing current layer’s measurements and the …\nECA private key that will be used by a layer to sign a …\nSerialized ECA public key for Layer0 that is signed by the …\nHolds serialized instances of the the [<code>Event</code>] message. The …\nContains the verified public key for encryption whenever …\nContains the public key for encryption. The key is …\nKey used to initialize HPKE encryption from the client.\nCertificate signing the encryption public key.\nNested message and enum types in <code>Endorsement</code>.\nThe underlying unsigned endorsement.\nJSON string comtaining the endorsement statement for the …\nThe signature for the endorsement.\nNested message and enum types in <code>Endorsements</code>.\nVerifies the endorsement. Since the signed endorsement is …\nThe endorser’s public verifying key for signature …\nMeasurement RawDigest of an event.\nDetailed attestation verification results each event.\nTODO: b/333748757 - Remove ‘events’ once ‘…\nEndorsements corresponding to the event log.\nNested message and enum types in <code>ExpectedDigests</code>.\nNested message and enum types in <code>ExpectedValues</code>.\nNested message and enum types in <code>ExtractedEvidence</code>.\nContains the evidence values whenever the status indicates …\nEndorsement of the stage0 firmware binary.\nEndorsement corresponding to the initial TEE measurement …\nReturns the enum value of <code>format</code>, or the default if the …\nThe format of the serialized endorsement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>KeyType</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCertificate signing the group encryption public key as …\nCertificate signing the group signing public key as part …\nThe hardware ID of the AMD SEV-SNP platform that generated …\nDigest of the kernel image part of the bzImage.\nContains admissible digests for the kernel image part of …\nAllowable digests for the image.\nVerifies the stage1 binary if running as Oak Containers.\nMeasured digests of the initial RAM disk.\nVerifies the stage1 binary if running as Oak Containers.\nThe measurement of the initial memory and CPU state of the …\nWhen insecure is set no verification of the TEE platform …\nWhen insecure is set no verification of the TEE platform …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>KeyType</code>.\nVerifies the kernel based on endorsement.\nVerifies the kernel based on endorsement.\nNested message and enum types in <code>KernelBinaryReferenceValue</code>…\nVerifies the kernel command line, i.e. the parameters …\nVerifies the kernel command line, i.e. the parameters …\nKernel Command line.\nMeasured digests of the image part of the kernel.\nKernel digest.\nReturns the value of <code>kernel_raw_cmd_line</code>, or the default …\nCommand-line that was passed to the kernel during startup. …\nMeasured digests of the setup data part of the kernel.\nTo distinguish between keys in a key set. The ID is unique …\nThe ID of the key in a key set that was used to generate …\nLayer1..LayerN-1 attestation evidence.\nMeasured digests of the physical memory map.\nE820 table digest.\nThe lowest current patch level of all the CPU cores.\nMinimum accepted versions of all TCB components.\nMinimum accepted versions of all TCB components.\nThe time the endorsement was last valid. In milliseconds …\nThe time the endorsement first became valid. In …\nAbsolute path to the file in question, or just the file …\nReturns the enum value of <code>platform</code>, or the default if the …\nThe platform providing the attestation report.\nInitial RAM disk digest.\nThe key serialized in raw format. The key type is needed …\nThe raw signature. The type and format of the key used to …\nProvides the reason why verification did not pass, on …\nNested message and enum types in <code>ReferenceValues</code>.\nVerifies the Rekor log entry, if present and requested.\nThe Rekor log entry about the endorsement or empty if …\nThe log entry as proof of inclusion of the endorsement …\nRekor’s public verifying key for log entry verification. …\nTEE-specific attestation report acting as a non-standard …\nThe custom bytes that were passed to the report when it …\nThe custom bytes that were passed to the report when it …\nThe custom bytes that were passed to the report when it …\nThis is the TCB version reported in attestation reports. …\nClaims that are required to be present in the endorsement.\nLayer0 attestation evidence.\nNested message and enum types in <code>RootLayerData</code>.\nThe serialized endorsement, e.g. serialized JSON for an …\nKey used to verify that Noise session is bound to the …\nSets <code>format</code> to the provided enum value.\nSets <code>platform</code> to the provided enum value.\nSets <code>status</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nDigest of the setup data part of the bzImage.\nContains admissible digests for the setup data part of the …\nAllowable digests for the setup data.\nKernel setup data digest.\nThe signature over <code>endorsement.serialized</code>. Unsigned …\nContains the verified public key for signing whenever the …\nContains the public key for signing. The key is serialized …\nKey used to verify artifacts signed by the TEE.\nCertificate signing the signing public key.\nThe current SVN of the SNP firmware.\nVerifies the stage0 binary implicitly contained in the …\nEndorsement of the Stage0 binary.\nReturns the enum value of <code>status</code>, or the default if the …\nIndicates whether the verification passed and perhaps more.\nCan pass the endorsed subject when needed and when it is …\nThe data hashed as endorsement subject can be inlined here …\nDigest of the first subject in the endorsement.\nSystem image digest.\nVerifies the system image binary based on endorsement.\nMeasurement RawDigest of the system image.\nThe allowable digest values for a system layer image.\nRepresents what is contained in the event. For example, …\nThe current SVN of the PSP operating system.\nThe serialized TEE certificate(s). The details of the …\nThe serialized TEE certificate(s). The details of the …\nNested message and enum types in <code>TextExpectedValue</code>.\nNested message and enum types in <code>TextReferenceValue</code>.\nReturns the enum value of <code>type</code>, or the default if the …\nThe type of the verifying key.\nNothing set is an error, need to have something set. An …\nTODO: b/380407219 - Remove this field once Oak clients …\nValidity of the verified endorsement.\nThis field is optional, and only used for some optional …\nNested message and enum types in <code>VerifyingKeyReferenceValue</code>…\nThe VM Protection Leve (VMPL) that was active when the …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Status</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Status</code>.\nExplicitly verifies digests if the client has them.\nVerifies the endorsement of the underlying binary.\nDeliberately skips a verification step, rather than …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEndorsement is a JSON in-toto statement (all variants and …\nUndefined and hence invalid format of the endorsement.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Format</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Format</code>.\nTODO: b/380407219 - Remove this field once Oak clients …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nOne or more digests that should be considered a valid …\nIf the reference value was set to SkipVerification, we …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nValues extracted from a fake report when not running in a …\nValues extracted from an AMD SEV-SNP attestation report.\nValues extracted from an Intel TDX attestation report.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nIf the reference value was set to SkipVerification, we …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDeliberately disables verification: it will pass this …\nNothing set is an error, need to have something set. An …\nDefault case: verify with this key set. This also requires …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAs images can be large (hundreds of megabytes), the …\nArbitrary config that the container can retrieve from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChoice between a key generated by the enclave instance and …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>KeyProvisioningRole</code>, or <code>None</code> if <code>value</code> …\nConverts an <code>i32</code> to a <code>KeyOrigin</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>KeyProvisioningRole</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>KeyOrigin</code>.\nReturns the enum value of <code>key_origin</code>, or the default if …\nReturns the enum value of <code>key_origin</code>, or the default if …\nReturns the enum value of <code>role</code>, or the default if the …\nEphemeral Diffie-Hellman client public key that is needed …\nSession keys for decrypting client requests and encrypting …\nSets <code>key_origin</code> to the provided enum value.\nSets <code>key_origin</code> to the provided enum value.\nSets <code>role</code> to the provided enum value.\nMessage encrypted with Authenticated Encryption with …\nRequest message encrypted using Hybrid Public Key …\nResponse message encrypted Hybrid Public Key Encryption …\nEnvelope containing session keys required to …\nMessage encrypted with Authenticated Encryption with …\nMessage encrypted with Authenticated Encryption with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAEAD key for encrypting/decrypting client requests.\nAEAD key for encrypting/decrypting enclave responses.\nReturns the value of <code>serialized_encapsulated_public_key</code>, …\nEphemeral Diffie-Hellman client public key that is needed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the definition of ExtendNextLookupData changes, the …\nNested message and enum types in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe client can check the configuration report for the …\n/ Server-side policy describing limits on the size of the …\nA fixed response time, in milliseconds.\nA fixed size for responses returned by the trusted runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe validated server-side policy.\nHash of the loaded Wasm module.\nInterpret the module as a native .so file. Only supported …\nDefaults to WASM.\nUse a wasm interpreter to load the module.\nSettings specific to the Wasmtime engine.\nNested message and enum types in <code>ApplicationConfig</code>.\nString value of the enum field names used in the ProtoBuf …\nCommunication channel parameters. The default behaviour …\nReturns the value of <code>dynamic_memory_guard_size</code>, or the …\n…\nReturns the value of <code>dynamic_memory_reserved_for_growth</code>, …\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>HandlerType</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nReturns the enum value of <code>handler_type</code>, or the default if …\nHow to load the provided module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>HandlerType</code>.\nReturns the value of <code>memory_init_cow</code>, or the default value …\n…\nIf specified, switches to a pooling allocation strategy. …\nPort to listen on. If not specified, defaults to 8080.\nPort to listen on. If not specified, defaults to 8080.\nSets <code>handler_type</code> to the provided enum value.\nReturns the value of <code>static_memory_guard_size</code>, or the …\n…\nReturns the value of <code>static_memory_maximum_size</code>, or the …\n…\nNested message and enum types in <code>WasmtimeConfig</code>.\nConfiguration for the Wasmtime engine, if that is used. …\nCommunication channel parameters. The default behaviour …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nSee …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>linear_memory_keep_resident</code>, or the …\nReturns the value of <code>max_component_instance_size</code>, or the …\nReturns the value of <code>max_core_instance_size</code>, or the …\nReturns the value of <code>max_core_instances_per_component</code>, or …\nReturns the value of <code>max_memories_per_component</code>, or the …\nReturns the value of <code>max_memories_per_module</code>, or the …\nReturns the value of <code>max_memory_protection_keys</code>, or the …\nReturns the value of <code>max_tables_per_component</code>, or the …\nReturns the value of <code>max_tables_per_module</code>, or the default …\nReturns the value of <code>max_unused_warm_slots</code>, or the default …\nReturns the value of <code>memory_pages</code>, or the default value if …\nReturns the value of <code>memory_protection_keys</code>, or the …\nWill set to <code>auto</code> if enabled.\nReturns the value of <code>table_elements</code>, or the default value …\nReturns the value of <code>table_keep_resident</code>, or the default …\nReturns the value of <code>total_component_instances</code>, or the …\nReturns the value of <code>total_core_instances</code>, or the default …\nReturns the value of <code>total_memories</code>, or the default value …\nReturns the value of <code>total_stacks</code>, or the default value if …\nReturns the value of <code>total_tables</code>, or the default value if …\nExperimental: a serialized array of varint-prefixed …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAn individual entry to be made available for lookup to an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEcho the bytes back, and then panic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>LookupRequest</code>.\nReturns the enum value of <code>mode</code>, or the default if the …\nSets <code>mode</code> to the provided enum value.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Mode</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Mode</code>.\nWhether to echo the message back. If false, the response …\nIf true, the value was found in the store. This is useful …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncryption private key that was encrypted with HPKE using …\nEvidence contains the encryption public key for encrypting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe initial payload provided to a restricted kernel …\nThe restricted kernel ELF application binary bytes.\nThe serialized endorsement bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequest message for the remote attestation.\nResponse message for the remote attestation.\nMessage for encrypted data exchange after a secure session …\nEndorsed evidence contains an attestation evidence …\nRequest message for the crypto handshake request needed to …\nResponse message for the crypto handshake request needed …\nNoise handshake message containing fields for all …\nMessage with decrypted content (not to be transmitted over …\nMessage that binds the Noise session (and optionally other …\nRequest message for the Oak protocol attested secure …\nWrapper around SessionRequest that is used in cases where …\nResponse message for the Oak protocol attested secure …\nReturns the value of <code>associated_data</code>, or the default value …\nBindings to the attestation evidence, per binding type.\nBindings to the attestation evidence, per binding type.\nRepresentation the serialized message cryptographically …\nPayload encrypted with the current chaining key.\nBody of the request, encrypted using Hybrid Public Key …\nBody of the request, encrypted using Hybrid Public Key …\nMaps unique IDs of attestation providers to the …\nMaps unique IDs of attestation providers to the …\nNoise Protocol ephemeral public key ‘e’. &lt;…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNested message and enum types in <code>HandshakeRequest</code>.\nNested message and enum types in <code>HandshakeResponse</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>nonce</code>, or the default value if <code>nonce</code> …\nNested message and enum types in <code>RequestWrapper</code>.\nNested message and enum types in <code>ResponseWrapper</code>.\nUnique string to identify the session. This should be at …\nNested message and enum types in <code>SessionRequest</code>.\nNested message and enum types in <code>SessionResponse</code>.\nNoise Protocol static public key ‘s’. &lt;…\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDescribes function and line table debug information.\nEach Sample records values encountered in some program …\nValueType describes the semantics and measurement units of …\nThe instruction address for this location, if available.  …\nA string that uniquely identifies a particular program …\nFreeform text associated to the profile.\nIndex into the string table of the type of the preferred …\nframes with Function.function_name fully matching the …\nDuration of the profile, if a duration makes sense.\nOffset in the binary that corresponds to the first mapped …\nThe object this entry is loaded from.  This can be a …\nSource file containing the function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunctions referenced by locations\nThe id of the corresponding profile.Function for this line.\nThe following fields indicate the resolution of symbolic …\nUnique nonzero id for the mapping.\nUnique nonzero id for the location.  A profile could use …\nUnique nonzero id for the function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides an indication that multiple symbols map to this …\nframes with Function.function_name fully matching the …\nIndex into string table\nlabel includes additional context for this sample. It can …\nMultiple line indicates this location has inlined …\nLine number in source code.\nUseful program location\nThe ids recorded here correspond to a Profile.location.id. …\nMapping from address ranges to the image/binary/library …\nThe id of the corresponding profile.Mapping for this …\nThe limit of the address range occupied by this mapping.\nAddress at which the binary (or DLL) is loaded into memory.\nName of the function, in human-readable form if available.\nShould only be present when num is present. Specifies the …\nThe number of events between sampled occurrences.\nThe kind of events between sampled ocurrences. e.g [ “cpu…\nThe set of samples recorded in this profile.\nA description of the samples associated with each …\nLine number in source file.\nAt most one of the following must be present\nA common table for strings referenced by various messages. …\nName of the function, as identified by the system. For …\nTime of collection (UTC) represented as nanoseconds past …\nRename it from type to ty to avoid using keyword in Rust.\nIndex into string table.\nThe type and unit of each value is defined by the …")