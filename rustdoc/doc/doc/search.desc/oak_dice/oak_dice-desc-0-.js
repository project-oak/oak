searchState.loadedDescShard("oak_dice", 0, "Structs and helpers for implementing DICE-based …\nConstants and helper functions to work with CWT-based DICE …\nC-like structs for representing DICE data in environments …\nUtilities to handle encoded keys and certificates\nThe CWT private claim ID for the concatenated hash of the …\nThe CWT private claim ID of the application keys.\nThe CWT private claim ID for the container image.\nThe CWT private claim ID for an enclave application layer.\nThe CWT private claim ID of the Event digest.\nThe CWT private claim ID for the measurement of the …\nThe CWT private claim ID for the initial RAM file system …\nThe CWT private claim ID for the raw kernel command-line.\nThe CWT private claim ID for the kernel command-line …\nThe CWT private claim ID for the Kernel layer.\nThe CWT private claim ID for the kernel measurement.\nLength of the unique ID for ECDSA keys generated.\nID for the bitstring used to describe the intended usage …\nIntended usage of a key.\nThe CWT private claim ID for the measurement of the layer …\nThe CWT private claim ID for the measurement of the layer …\nThe CWT private claim ID for the physical memory map (e820 …\nThe CWT private claim ID for the kernel setup data …\nThe CWT private claim ID for SHA2_256 digests.\nID for the CWT private claim corresponding to the Subject …\nThe CWT private claim ID for the Oak Containers system …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nConverts a COSE_Key to a serialized HPKE KEM public key.\nConverts a COSE_Key to a ECDSA verifying key.\nDerives an ID from an HPKE KEM public key.\nDerives an ID from a verifying key.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGenerates private/public ECDSA key pair.\nGenerates a CWT certificate representing a Key …\nGenerates a CWT certificate representing an ECDSA signing …\nParses a bytes slice as a CWT certificate and extracts the …\nExtracts the certified public key from the claims set of a …\nConverts a serialized HPKE KEM public key to a COSE_Key …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConverts an ECDSA verifying key to a COSE_Key …\nAMD SEV-SNP.\nCertificates for the ECDSA keys that can be used for an …\nECDSA private keys that can be used for an application for …\nThe size for compound device identifiers.\nThe maximum size of a serialized CWT certificate.\nPrivate key that can be used by a layer to sign a …\nThe name of the kernel command-line parameter that is used …\nThe name of the kernel command-line parameter containing …\nphysical address of the Stage 0 event log.\nWrapper for passing the attestation evidence from the …\nIntel TDX.\nAttestation evidence for non-root layers.\nNone.\nThe actual size used when encoding a Nist P256 private key.\nThe maximum size of an ECDSA private key.\nThe maximum size of a serialized COSE Key object …\nThe maximum size of the signed attestation report.\nWrapper for passing the attestation evidence and private …\nAttestation evidence generated by Stage 0.\nThe magic number used to identify the Stage 0 DICE proto …\nThe magic number used to identify the Stage 0 DICE data in …\nWrapper for passing DICE info from Stage0 to the next …\nThe hardware platform providing the Trusted Execution …\nPlatform is not specified.\nThe actual size used when encoding a X25519 private key.\nKeys (and associated certificates) that can be used by the …\nThe RAW bytes representing the CDI.\nSerialized CWT certificate for the ECA private key owned …\nThe RAW bytes representing an ECDSA private key.\nSerialized COSE Key representation of the ECDSA public key …\nThe RAW bytes representing an ECDSA private key that can …\nSerialized CWT certificate for the encryption private key. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create Self from the raw representation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe compound device identifier for Layer 1.\nThe private key for the Layer 1 ECA certificate.\nThe evidence about the next layer.\nMagic number that is expected to always be set to the …\nByte representation of the signed attestation report …\nThe evidence about the Restricted Kernel.\nThe evidence about Stage 0 and the initial state of the VM.\nEvidence about Stage 0 and the initial state of the VM.\nThe RAW bytes representing an ECDSA private key that can …\nSerialized CWT certificate for the signing private key. …\nThe hardware platform that generated the remote …\nExtracts the bytes used to encode a CBOR object from a …")