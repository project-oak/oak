searchState.loadedDescShard("oak_containers_sdk", 0, "The Oak Standalone SDK allows easy development iteration …\nRetrieves the endorsements from the Orchestrator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the evidence from the Orchestrator. The evidence …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a closure with request encryption and response …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn Oak trusted application will write an implementation of …\nThe state needed to handle one streaming Oak crypto …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUtility struct used to interface with the Orchestrator.\nTrait defining the interface for interacting with the …\nReturns the argument unchanged.\nRetrieves the application configuration from the …\nRetrieves the endorsed evidence from the Orchestrator. …\nCalls <code>U::from(self)</code>.\nNotifies the Orchestrator that the application is ready to …\nA mock implementation of the OrchestratorInterface for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper for handling streaming requests presented by a …")