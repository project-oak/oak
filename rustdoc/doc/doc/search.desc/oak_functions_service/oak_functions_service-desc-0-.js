searchState.loadedDescShard("oak_functions_service", 0, "Handles a call to invoke by getting the raw request bytes …\nA key/value hash table optimized for large numbers of …\nWasm business logic provider based on Wasmi.\nSee […\nSee […\nSee […\nReturns the argument unchanged.\nSee […\nCalls <code>U::from(self)</code>.\nSee [<code>crate::proto::oak::functions::OakFunctions::initialize</code>…\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nTemporary OakLogger implementation using the <code>log</code> crate.\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nLogs a message that contains only public, non-sensitive …\nLogs the message, which might contain sensitive …\nReturns the most verbose logging level.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nProvides access to shared lookup data.\nUtility for managing lookup data.\nCreates a new <code>LookupData</code> instance with a reference to the …\nCreates an instance of LookupData populated with the given …\nConverts a binary sequence to a string if it is a valid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an individual entry from the backing data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the backing data is empty.\nGets the number of entries in the backing data.\nReturns a slice covering up to the first <code>limit</code> elements of …\nLogs a debug message.\nLogs an error message.\nCreates a new instance with empty backing data.\nThis is like HashMapp::contains_key.\nThis is like HashMap::extend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is like HashMapp::get.\nInsert a k/v pair into the table.  Returns None if the key …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if there are no entries in the hash table.\nReturn an iterator that can be used to iterate through k/v …\nReturn the number of entries in the hash table.\nSet the initial size of self.table.  For best speed and …\nFixed name of the function to allocate memory. Every Oak …\nType aliases for positions in Wasm linear memory. Any …\nType aliases for offsets in Wasm linear memory.\nFixed name of the function to start a Wasm. Every Oak Wasm …\nThe name of the memory every Oak Wasm module has.\n<code>UserState</code> holds the user request bytes and response bytes …\nA trait for Wasm APIs that can be called from Wasm modules.\nA trait for creating Wasm APIs that can be called from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWasm business logic provider based on wasmtime.\nThe main purpose of this factory is to allow creating a …\nImplementation of the standard Oak Functions API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFixed name of the function to allocate memory. Every Oak …\nType aliases for positions in Wasm linear memory. Any …\nType aliases for offsets in Wasm linear memory.\nFixed name of the function to start a Wasm. Every Oak Wasm …\nThe name of the memory every Oak Wasm module has.\n<code>UserState</code> holds the user request bytes and response bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")