searchState.loadedDescShard("oak_sev_guest", 0, "Rust wrappers for instructions and structs for use by …\nMemory address translation functions.\nThis module contains structs that can be used to interpret …\nThis module provides an optional implementation for …\nThis module contains an implementation of the …\nUtilities for creating and processing SNP Guest Request …\nRust instruction wrappers for managing page state and …\nUtilities for building interrupt handlers that need to …\nRust implementations of the AMD SEV-SNP GHCB MSR protocol.\nThis module contains structs that can be used to interpret …\nThis module provides an implementation of the State Save …\nAP Jump Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of CPUID functions that can be included …\nThe size of the CPUID page.\nThe CPUID function result of an invocation for a specific …\nThe required input valus for invoking CPUID.\nThe resulting register values after invoking CPUID.\nRepresentation of the CPUID page.\nThe number of CPUID function results included in the page. …\nThe CPUID function results.\nThe input value of the EAX register, which represents the …\nThe EAX register output from calling CPUID.\nThe EBX register output from calling CPUID.\nThe input value of the ECX register, which represents the …\nThe ECX register output from calling CPUID.\nThe EDX register output from calling CPUID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input values when CPUID was invoked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resulting register values when CPUID was invoked.\nChecks that the count is less than the maximum allowed …\nThe input value of the XCR0 extended control register.\nThe value of the IA32_XSS model-specific register.\nWrapper for encrypting and decrypting guest messages.\nExtracts a decrypted message from an encrypted <code>GuestMessage</code>…\nCreates an encrypted payload from the provided message and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance.\nCreates a new instance with a specific sequence number.\nThe size of the GHCB page.\nThe version of the GHCB protocol and page layout that we …\nThe guest-host communications block.\nImplementation of the GHCB protocol using the wrapped GHCB …\nFlags indicating which fields in a specific GHCB instance …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe current privilege level of the executing code.\nThe intersection of a source flags value with the …\nSends a guest request message to the Platform Secure …\nThe value of the DR7 debug register.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCalls a CPUID function for the given input using the GHCB …\nGets the guest-physical address for the guest-hypervisor …\nThe usage of the GHCB page. A value of 0 indicates the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the GHCB protocol, yielding back the underlying …\nRead a 16 bit number from an IO port via the IOIO protocol.\nRead a 32 bit number from an IO port via the IOIO protocol.\nRead an 8 bit number from an IO port via the IOIO protocol.\nWrites a 16 bit number to an IO port via the IOIO protocol.\nWrites a 32 bit number to an IO port via the IOIO protocol.\nWrites an 8 bit number to an IO port via the IOIO protocol.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nRead a 32-bit value from a MMIO memory address via the …\nWrite a 32-bit value to a MMIO memory address via the MMIO …\nReads a value from the specified model-specific register.\nWrites a value to the specified model-specific register.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPerforms a Page State Change operation on the given …\nThe version of the GHCB protocol and page layout in use.\nThe value of the RAX register.\nThe value of the RBX register.\nThe value of the RCX register.\nThe value of the RDX register.\nRegisters the address of the GHCB with the hypervisor.\nThe intersection of a source flags value with the …\nResets all of the inner GHCB information to its original …\nZeroes the entire GHCB.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nArea that can be used as a shared buffer for communicating …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGuest-controlled exit code.\nGuest-controlled exit information 1.\nGuest-controlled exit information 2.\nGuest-controlled additional information.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBitmap indicating which quadwords of the save state area …\nThe guest-physical address of the page that contains the …\nValue of the XCR0 extended control register.\nThe value of the IA32_XSS model-specific reqister.\nVM absorb request by a migration agent.\nVM absorb response.\nThe AEAD algorithm used for encryption.\n256-bit AES-GCM.\nRequest for an attestation report.\nResponse containing the attestation report.\nThe authenticated subsection of the header used for an …\nThe currently supported attestation report version number.\nThe currently supported header version number.\nThe currently supported message version number.\nCPUID request.\nCPUID response.\nUse VLEK if installed, otherwise use the VCEK.\nThe elliptic curve used.\nAn ECDSA public key.\nVM export request. Used for VM migration.\nVM export response. Used for VM migration.\nThe family ID provided in the ID block will be mixed into …\nThe size of a guest message, including the header and …\nThe guest policy will be mixed into the key.\nThe guest-provided SVN will be mixed into the key.\nFlags indicating allowed policy options.\nAn encrypted guest message.\nThe header for an encrypted guest request message.\nThe image ID provided in the ID block will be mixed into …\nVM import request. Used during VM migration, typically by …\nVM import response. Used during VM migration.\nInvalid encryption algorithm.\nInvalid message type.\nInvalid.\nThe key selection field was invalid.\nThe supplied parameters in the request was invalid.\nThe supplied parameters in the request was invalid.\nRequest for a derived key.\nRequest for a derived key.\nResponse containing the derived key.\nDerived key response.\nThe selected key to use for key derivation.\nAn iterator over the variants of KeySelect\nThe status of the report response.\nThe maximum payload size.\nThe launch measurement of the VM will be mixed into the …\nThe type of message represented by the payload.\nCurve P-384.\nAttestation report request.\nAttestation report response.\nThe status of the report response.\nReserved.\nThe selected root key to use for key derivation.\nAn iterator over the variants of RootKeySelect\nReport was successfully generated.\nReport was successfully generated.\nThe guest-provided TCB version will be mixed into the key.\nTimestamp counter information response.\nUse the Versioned Chip Endorsement Key (VCEK).\nUse the Versioned Chip Endorsement Key (VCEK).\nUse the Loaded Chip Endorsement Key (VLEK).\nUse the Virtual Machine Root Key (VMRK) provided by the …\nVMRK request. Provides the VM root key to use after …\nVMRK response. Status of using the VM root key after …\nThe algorithm used to encrypt the payload.\nGet a flags value with all known bits set.\nThe the sub-section of the header that is treated as …\nThe authentication tag for the payload and additional data.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe curve for this public key.\nThe derived key if status is <code>KeyStatus::Success</code>.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nGets the algorithm field as an <code>AeadAlgorithm</code> enum if …\nGets the <code>guest_field_select</code> field as a <code>GuestFieldFlags</code> …\nGets bits 1 and 2 of the <code>key_select</code> field as a <code>KeySelect</code> …\nGets the message type field as a <code>MessageType</code> enum if …\nGets bit 0 of the <code>key_select</code> field as a <code>RootKeySelect</code> enum.\nGets the status field as a <code>KeyStatus</code> enum if possible.\nGets the status field as a <code>ReportStatus</code> enum if possible.\nMask indicating which guest data will be mixed into the …\nThe guest security version number (SVN) to mix into the …\nThe message header.\nThe size of the header in bytes.\nThe header version. Currently only version 1 is supported.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe size of the encrypted message payload in bytes.\nThe type of message that the payload represents.\nThe version of the message. Currently only version 1 is …\nThe ID of the VM communication key that was used to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe encrypted payload.\nThe R component of this public. The value is zero-extended …\nThe intersection of a source flags value with the …\nThe attestation report.\nThe custom data to be included in the attestation report.\nThe size of the report.\nThe S component of this public key. The value is …\nThe message sequence number. This is used as the IV for …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets bits 1 and 2 of the <code>key_select</code> field.\nSets bit 0 of the <code>key_select</code> field.\nThe status of the operation.\nThe status of the operation.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe TCB version to mix into the key.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nChecks that header is valid.\nChecks that the authenticated header subsection is valid.\nChecks that all reserved bytes are zero and that the …\nChecks that all reserved bytes are zero and that the …\nThe VM Protection Level (VMPL) to mix into the derived key.\nThe VM Protection Level (VMPL) to be used in the …\nCode in the page can be executed in rings 0..2.\nCode in the page can be executed in ring 3.\nThe input parameters were invalid.\nInsufficient permissions.\nThe page size does not match the page size entry in the …\nThe potential errors when calling the PVALIDATE or …\nThe page cannot be used as a VM save area.\nThe page is a 2MiB page.\nThe page is a 4KiB page.\nThe size of a memory page.\nPermission mask used by the RMP.\nThe target VMPL can read the page.\nRepresentation of the RMP permission used by the RMPADJUST …\nThe page is not validated.\nThe page is validated.\nWhether a page is in the validated state or not.\nThe page validation status was not updated. This value is …\nWhether the page can be used as a VM save area.\nThe target VMPL can write to the page.\nThe page can be used as a VM save area.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bit mask specifying the permission.\nMarks a page as validated or unvalidated in the RMP.\nThe intersection of a source flags value with the …\nAdjusts the permissions of a page in the RMP.\nReads an RMP permission mask for a guest page.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe target VMPL to which the permission applies.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnconditionally exits from the guest to the hypervisor.\nWhether this page can be used as a VM save area.\nA reference to the interrupt stack frame will be passed as …\nThe backed-up value of the code segment selector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe backed-up value of the RAX register.\nThe backed-up value of the RBX register.\nThe backed-up value of the RCX register.\nThe backed-up value of the RDI register.\nThe backed-up value of the RDX register.\nThe backed-up value CPU’s flags register.\nThe backed-up value of the instruction pointer when the …\nThe backed-up value of the RSI register.\nThe backed-up value of the stack pointer.\nThe backed-up value of the stack segment.\nA factory for creating port readers and writers that use …\nGHCB-based wrapper for a single IO port.\nFactory for instantiating IO port readers and writers.\nWrapper implementation that can either create IO ports …\nReader that can be used to read values from a port.\nWriter that can be used to write values to a port.\nFactory for creating port reader and writers that perform …\nAn IO port reader and writer implementation that uses the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new IO port reader instance.\nCreates a new IO port writer instance.\nTries to read from the port.\nTries to write a value to the port.\nAlternate injection is enabled for this guest.\nThe new AMD SEV-SNP feature for starting new Application …\nGHCB must be 4KiB-aligned.\nThe register of interest from the result of executing …\nA request to execute CPUID for a specific leaf and return …\nA response from executing CPUID for a specific leaf. Only …\nDebug Register Swapping is enabled for this guest.\nNon-specific termination request.\nContains the guest-physical address of the GHCB page. The …\nThe supported range for the GHCB protocol version does not …\nA request for the hypervisor’s supported features.\nFlags indicating which features are supported by the …\nThe gust was run with Instruction-Based Virtualization …\nValue indicating that the hypervisor does not have a …\nThe Prevent Host IBS feature is enabled for this guest.\nWhether a memory page is private to the guest, or shared …\nA request for the hypervisor’s preferred location for …\nThe response containing the preferred location of the GHCB.\nReflect-VC is enabled for this guest.\nRestricted interrrupt injection is supported.\nRestricted Injection is enabled for this guest.\nTimer support is available if restricted interrupt …\nRequest to register a guest-physical address for the GHCB …\nThe response containing the result of the GHCB …\nSecure Timestamp Counter is enabled for this guest.\nSEV is enabled for this guest.\nSEV-ES is enabled for this guest.\nAMD SEV-SNP is supported.\nSMT Protection is enabled for this guest.\nSEV-SNP is active for this guest.\nSNP Branch Target Buffer Isolation is enabled for this …\nThe version of the GHCB MSR protocol supported by this …\nA request for information about the supported GHCB MSR …\nResponse from the hypervisor about the encryption bit and …\nFlags indicating which SEV features are active.\nThe SEV-SNP features supported by the hypervisor is not …\nRequest to change a memory page from shared to private or …\nThe response containing the result of the SNP Page State …\nThe reason for requesting termination from the hypervisor.\nRequest for the hypervisor to terminate the guest.\nVMGEXIT Parameter is enabled for this guest.aes_gcm\nVMPL SSS (Supervisor Shadow Stack) is enabled for this …\nVMSA Register Protection is enabled for this guest.\nVirtual Top-of-Memory is enabled for this guest.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRequests a change of state for a page to be either private …\nChanges the SNP page state assignments in the RMP for a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe page table bit used for inidicating that a page is …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nGets the value of the specified register that was returned …\nGets the CPUID values for EAX, EBX, ECX and EDX and …\nRequests a bitmap specifying the features supported by the …\nRequests the hypervisor’s preferred location for the …\nGets information about the supported GHCB MSR protocol …\nGets the status of SEV features for the current guest.\nThe preferred guest-physical address for the GHCB.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe CPUID leaf to request. Sub-leafs are not supported by …\nThe maximum version of the GHCB MSR protocol supported by …\nThe minimum version of the GHCB MSR protocol supported by …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe register to return from the result. This protocol only …\nThe register that the value represents.\nRegisters the location of the GHCB page for the current …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRequests termination from the hypervisor.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the address of the GHCB page before exiting to the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe value of the requested register after executing CPUID.\nThe initial migration image is not enabled.\nThe initial migration image is enabled.\nRepresentation of the Secrets Page Guest Reserved Area.\nWhether an initial migration image is enabled.\nThe mmaximum version of the secrets pages that we expect …\nThe minimum version of the secrets pages that we expect to …\nThe size of the secrets page.\nRepresentation of the secrets page.\nAP Jump Table Physical Address\nThe family, model and stepping of the CPU as reported in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create Self from the raw representation\nGets the IMI enabled field as and <code>Imi</code> enum if possible.\nGuest-OS-visible workarounds provided by the hypervisor …\nArea reserved for guest OS use.\nArea reserved for guest OS use.\nGuest Usage\nThe least significant bit indicates whether an initial …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nScaling factor that can be used for calculating the real …\nChecks that version is the expected value, …\n(Rev 2.01+) Version (1 = 2.01) Otherwise: Reserved, MBZ\nThe version of the secrets page.\nVM-platform communication key 0. AES key used for …\nVM-platform communication key 1. AES key used for …\nVM-platform communication key 2. AES key used for …\nVM-platform communication key 3. AES key used for …\n(Rev 2.01+) VMPL0 Current Guest Message Sequence Number …\nVMPL0 Current Guest Message Sequence Number [31:0]\n(Rev 2.01+) VMPL1 Current Guest Message Sequence Number …\nVMPL1 Current Guest Message Sequence Number [31:0]\n(Rev 2.01+) VMPL2 Current Guest Message Sequence Number …\nVMPL2 Current Guest Message Sequence Number [31:0]\n(Rev 2.01+) VMPL3 Current Guest Message Sequence Number …\nVMPL3 Current Guest Message Sequence Number [31:0]\nBitmap indicating which quadwords of the VM Save Area have …\nRepresentation of a segment register in 64-bit mode.\nThe State Save Area used for SEV-ES and SEV-SNP.\nThe page containing the Save State Area used for SEV-ES …\nThe segment attributes. The meaning of the attribute bits …\nThe base address of the segment.\nThe value of the guest’s IbsBrTarget MSR.\nThe value of the guest’s LastBranchFromIP MSR.\nThe value of the guest’s LastBranchToIP MSR.\nWhen the CPU is reset, the value of RDX is set to the same …\nThe current protection level (ring).\nControl Register 0.\nThe CR2 control register.\nControl Register 3.\nControl Register 4.\nThe code segment.\nThe target instruction pointer when making a syscall in …\nThe value of the guest’s DebugCTL MSR.\nDebug register 0.\nDebug register 0 address mask.\nDebug register 1.\nDebug register 1 address mask.\nDebug register 2.\nDebug register 2 address mask.\nDebug register 3.\nDebug register 3 address mask.\nDebug register 6.\nDebug register 7.\nThe data segment.\nThe extended feature enable register.\nThe extra segment.\nField used for injecting events into the guest.\nThe X87 register state.\nThe XMM register state.\nThe YMM register state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneral purpose segment.\nThe page attribute table for the guest.\nPointer to the global descriptor table.\nGeneral purpose segment.\nThe exit code for automatic exits.\nThe info 1 value for automatic exits.\nThe info 2 value for automatic exits.\nThe interrupt info value for automatic exits.\nThe next instruction pointer for automatic exits.\nThe guests time stamp counter offset.\nThe guest’s time stamp counter scaling factor.\nThe value of the guest’s IbsDcLinAd MSR.\nThe value of the guest’s IbsFetchCtl MSR.\nThe value of the guest’s IbsFetchCtl MSR.\nThe value of the guest’s IbsOfCtl MSR.\nThe value of the guest’s IbsOpData1 MSR.\nThe value of the guest’s IbsOpData2 MSR.\nThe value of the guest’s IbsOpData3 MSR.\nThe value of the guest’s IbsOpRip MSR.\nThe value of the guest’s IbsFetchExtdCtl MSR.\nPointer to the interrupt descriptor table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe address of the interrupt shadow stack.\nRegister used by the SWAPGS instruction to swap the base …\nThe value of the guest’s LastIntFromIP MSR.\nThe value of the guest’s LastIntToIP MSR.\nThe value of the guest’s LastBranchStackSelect MSR.\nThe last branch record stack state.\nPointer to the local descriptor table.\nThe segment limit.\nThe target instruction pointer when making a syscall in …\nThe Media eXtensions Control and Status Register.\nCreates a new instance of the VMSA that represents the …\nUsed to control flushing of the guest TLB. Writing 0 to …\nThe protect keys rights register.\nShadow stack pointer for ring 0.\nShadow stack pointer for ring 1.\nShadow stack pointer for ring 2.\nShadow stack pointer for ring 3.\nThe R10 register.\nThe R11 register.\nThe R12 register.\nThe R13 register.\nThe R14 register.\nThe R14 register.\nThe R8 register.\nThe R9 register.\nThe RAX register.\nThe RBP register.\nThe RBX register.\nThe RCX register.\nThe RDI register.\nThe RDX register.\nNonce used when VMSA register protection is enabled.\nThe 64-bit flags register.\nThe instruction pointer.\nThe RSI register.\nThe stack pointer.\nShadow stack MSR for supervisor mode settings.\nThe segment selector.\nThe guest-controlled SEV features that are selected.\nThe syscall flag mask.\nThe stack segment.\nThe shadow stack pointer.\nThe target address, code segment and stack segment when …\nThe code segment when using SYSENTER or SYSEXIT in legacy …\nThe instruction pointer when using SYSENTER or SYSEXIT in …\nThe stack pointer when using SYSENTER or SYSEXIT in legacy …\nUsed by the hardware to track TLB information for the …\nPointer to a valid task state secgement in the global …\nAdditional information read by the RDTSC instruction.\nShadow stack MSR for user mode settings.\nThe guest-controlled interrupt injection control settings.\nThe virtual top-of-memory setting for the guest.\nThe current VM protection level.\nThe X87 floating point code segment.\nThe X87 floating point data pointer.\nThe X87 floating point data segment.\nThe X87 floating point control word.\nThe X87 floating point opcode.\nThe X87 floating point status word.\nThe X87 floating point tag word.\nThe X87 instruction pointer.\nThe XCR0 extended control register.\nThe IA32_XSS machine-specific register.")