searchState.loadedDescShard("oak_tdx_guest", 0, "Rust implementation of features needed to implement guest …\nRust implementation of the TDX TDCALL instruction.\nRust implementation of the sub-functions of the TDX TDCALL[…\nError when accepting guest-physical memory.\nThe page is not pending and has already been accepted.\nAttributes of a TD.\nThe guest TD runs in off-TD debug mode.\nError when extending an RTMR.\nA buffer that can be used for extending an RTMR.\nThe TD participates in HGS+ operation. HGS+ monitors the TD\nThe supplied operand is invalid.\nThe supplied operand in Rcx is invalid.\nWhether the TD is allowed to use Key Locker.\nTD is allowed to use Linear Address Space Separation. This …\nWhether the TD is migratable\nOperation encountered a busy operand, indicated by the …\nOperation encountered a busy operand, indicated by the …\nWhether the TD is allowed to use Perfmon and PERF_METRICS.\nThe TD participates in system profiling using performance …\nWhether the TD is allowed to use Supervisor Protection …\nThe TD participates in system profiling using core …\nRequested page size is 2MB, but the page GPA is not mapped …\nThe index of a run-time measurement register (RTMR).\nDisable EPT violation conversion to #VE on guest TD access …\nThe TD is a TDX Connect Provisioning Agent. This bit may …\nInformation about the TD’s execution environment.\nTrait for getting the associated <code>TdxPageSize</code> enum for a …\nInformation about a virtualization exception (#VE).\nAccepts a pending private memory page to make it usable in …\nGet a flags value with all known bits set.\nThe TD attributes passed as part of TDINIT.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe exit qualification.\nThe exit reason.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtends the specified run-time measurement register (RTMR) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTry to create Self from the raw representation\nTry to create Self from the raw representation\nGets information about the TD’s execution environment by …\nGets information about the recent virtualization exception …\nThe effective GPA width. The “shared” bit is at …\nThe guest-linear address (virtual address).\nThe guest-physical address.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAdditional context for the instruction that caused the #VE.\nThe length of the instruction that caused the #VE.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe maximum possible number of vCPUs for this TD.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of vCPUs enabled on this TD.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nError when mapping a guest-physical address (GPA) as …\nExecutes CPUID for the specified leaf and sub-leaf.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTDVMCall GetQuote\nTDVMCall GetTdVmCallInfo\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads two bytes from the specified IO port.\nReads four bytes from the specified IO port.\nReads a single byte from the specified IO port.\nWrites two bytes to the specified IO port.\nWrites four bytes to the specified IO port.\nWrites a single byte to the specified IO port.\nMaps a range of guest-physical addresses (GPAs) as shared …\nEmulated MMIO-read with help from tdx-module and VMM\nEmulated MMIO-write with help from tdx-module and VMM\nReads a value from the specified model-specific register.\nWrites a value to the specified model-specific register.\nTDVMCALL WBINVD - Write Back and Invalidate Cache\nTDVMCALL WBNOINVD - Write Back and Do Not Invalidate Cache")