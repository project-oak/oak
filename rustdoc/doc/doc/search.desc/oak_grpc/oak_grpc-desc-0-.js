searchState.loadedDescShard("oak_grpc", 0, "Generated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nDefines the service exposed by the launcher, that can be …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nThis method is used by the orchestrator to load and …\nProvides orchestrator with the trusted container image.\nProvides the orchestrator with the endorsements of the …\nProvides stage1 with the Oak system image (which contains …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotifies the launcher that the trusted app is ready to …\nSends Attestation Evidence containing the Attestation …\nCompress requests with the given encoding.\nServer streaming response type for the GetContainerBundle …\nServer streaming response type for the GetOakSystemImage …\nGenerated trait containing gRPC methods that should be …\nDefines the service exposed by the launcher, that can be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nThis method is used by the orchestrator to load and …\nProvides orchestrator with the trusted container image.\nProvides the orchestrator with the endorsements of the …\nProvides stage1 with the Oak system image (which contains …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotifies the launcher that the trusted app is ready to …\nSends Attestation Evidence containing the Attestation …\nCompress responses with the given encoding, if the client …\nDefines the service exposed by the orchestrator, that can …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nExposes the previously loaded trusted application config …\nProvide the endorsed evidence for this TEE to the caller.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotifies the orchestrator that the trusted app is ready to …\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nDefines the service exposed by the orchestrator, that can …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nExposes the previously loaded trusted application config …\nProvide the endorsed evidence for this TEE to the caller.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotifies the orchestrator that the trusted app is ready to …\nCompress responses with the given encoding, if the client …\nGenerated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nDefines the service exposed by the Hostlib that is used …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nGet enclave group keys to the enclave as part of Key …\nGet the enclave role for Key Provisioning. Could be one of …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nDefines the service exposed by the Hostlib that is used …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nGet enclave group keys to the enclave as part of Key …\nGet the enclave role for Key Provisioning. Could be one of …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nTODO(#4504): Implement data signing.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nDerives session keys for decrypting client requests and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nSigns the provided message using the hardware rooted …\nGenerated trait containing gRPC methods that should be …\nTODO(#4504): Implement data signing.\nEnable decompressing requests with the given encoding.\nDerives session keys for decrypting client requests and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nSigns the provided message using the hardware rooted …\nGenerated client implementations.\nGenerated server implementations.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nGenerated client implementations.\nGenerated server implementations.\nAborts building the next lookup data.option\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nExtends the next lookup data by the given chunk of lookup …\nFinishes building the next lookup data with the given …\nReturns the argument unchanged.\nHandles an invocation coming from a client.\nInitializes the service and remote attestation keys.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReserves additional capacity for entries in the lookup …\nCompress requests with the given encoding.\nStreaming version combining <code>ExtendNextLookupData</code> and …\nGenerated trait containing gRPC methods that should be …\nAborts building the next lookup data.option\nEnable decompressing requests with the given encoding.\nExtends the next lookup data by the given chunk of lookup …\nFinishes building the next lookup data with the given …\nReturns the argument unchanged.\nHandles an invocation coming from a client.\nInitializes the service and remote attestation keys.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReserves additional capacity for entries in the lookup …\nCompress responses with the given encoding, if the client …\nStreaming version combining <code>ExtendNextLookupData</code> and …\nGenerated client implementations.\nGenerated server implementations.\nDefines the Key Provisioning Service that distributes keys …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nRequest enclave group keys from for other enclaves as part …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nDefines the Key Provisioning Service that distributes keys …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nRequest enclave group keys from for other enclaves as part …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nGenerated client implementations.\nGenerated server implementations.\nService definition for streaming communication with an Oak …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nUsed to send a sequence of messages ensuring that they are …\nServer streaming response type for the Stream method.\nGenerated trait containing gRPC methods that should be …\nService definition for streaming communication with an Oak …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nUsed to send a sequence of messages ensuring that they are …")