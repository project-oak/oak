searchState.loadedDescShard("oak_restricted_kernel_sdk", 0, "Trait that provides the ability to build an attestation …\nExposes the ability to derive a session key from the …\nTrait that provides the ability to read attestation …\nStructs for providing attestation related logic such as …\nProvides functionality to communicate with host …\nStructs for signing and encryption using keys attested in …\nGenerate an endorsement.\nMarks a function as the entrypoint to an enclave app and …\nAdd a new event to the evidence.\nExpose oak_attestation_verification to users of the …\nGenerate a signed evidence containing all events …\nMock attestation evidence and crypto logic. Useful for …\nVarious utilities like loggers, allocators, timers, etc.\nExposes the ability to read the Attestation Evidence.\n<code>Endorser</code> implementation that exposes the instance’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChannel that communicates over a file descriptor.\nSimple no_std compatible equivalent of <code>std::io::Read</code>.\nSimple no_std compatible equivalent of <code>std::io::Write</code>.\nConstructs a new FileDescriptorChannel that assumes we’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts a blocking server that listens for requests on the …\n<code>EncryptionKeyHandle</code> implementation that using the instance…\n<code>Signer</code> implementation that using the instance’s evidence …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a closure to an underlying function with request …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Attester</code> implementation that exposes mock evidence.\n<code>EncryptionKeyHandle</code> implementation that using mock …\n<code>Signer</code> implementation that using mock evidence and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>log::Log</code> implementation that outputs logs on standard …\nProvides a default implementation for <code>alloc_error_handler</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nno_std compatible allocators.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a default implementation for <code>panic_handler</code> …\nProbabilistic sample store to compute percentiles over …\nSynchronization utils.\nUtils to read the CPUs timestamp counter.\nHeap implementation that asks Restricted Kernel for more …\nThread-safe version of GrowableHeap, above, usable as a …\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBasic Probabilistic sample store to compute percentiles\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the n-th percentile.\nRecords a new data point value.\nA synchronised implementation of a cell that can be …\nUnsafely deinitializes the cell, returning the contents.\nReturns the argument unchanged.\nGets a reference to the inner value if the cell has been …\nCalls <code>U::from(self)</code>.\nSets the inner value of the cell if it has not been …\nMeasures the number of clock cycles between <code>new()</code> and …\nReturns the approximate number of clock cycles elapsed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new timer, recording the current tick counter …\nRead the timestamp counter register from the CPU.\nReturns the approximate number of clock cycles it took to …")