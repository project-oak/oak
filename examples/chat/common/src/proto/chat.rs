// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chat.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateRoomRequest {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    pub admin_token: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRoomRequest {
    fn default() -> &'a CreateRoomRequest {
        <CreateRoomRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRoomRequest {
    pub fn new() -> CreateRoomRequest {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // bytes admin_token = 2;


    pub fn get_admin_token(&self) -> &[u8] {
        &self.admin_token
    }
    pub fn clear_admin_token(&mut self) {
        self.admin_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.admin_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.admin_token
    }

    // Take field
    pub fn take_admin_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.admin_token, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateRoomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.admin_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        if !self.admin_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.admin_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        if !self.admin_token.is_empty() {
            os.write_bytes(2, &self.admin_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRoomRequest {
        CreateRoomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &CreateRoomRequest| { &m.room_id },
                    |m: &mut CreateRoomRequest| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "admin_token",
                    |m: &CreateRoomRequest| { &m.admin_token },
                    |m: &mut CreateRoomRequest| { &mut m.admin_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRoomRequest>(
                    "CreateRoomRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRoomRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateRoomRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRoomRequest,
        };
        unsafe {
            instance.get(CreateRoomRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateRoomRequest {
    fn clear(&mut self) {
        self.room_id.clear();
        self.admin_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRoomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRoomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DestroyRoomRequest {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    pub admin_token: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DestroyRoomRequest {
    fn default() -> &'a DestroyRoomRequest {
        <DestroyRoomRequest as ::protobuf::Message>::default_instance()
    }
}

impl DestroyRoomRequest {
    pub fn new() -> DestroyRoomRequest {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // bytes admin_token = 2;


    pub fn get_admin_token(&self) -> &[u8] {
        &self.admin_token
    }
    pub fn clear_admin_token(&mut self) {
        self.admin_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.admin_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.admin_token
    }

    // Take field
    pub fn take_admin_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.admin_token, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DestroyRoomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.admin_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        if !self.admin_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.admin_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        if !self.admin_token.is_empty() {
            os.write_bytes(2, &self.admin_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DestroyRoomRequest {
        DestroyRoomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &DestroyRoomRequest| { &m.room_id },
                    |m: &mut DestroyRoomRequest| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "admin_token",
                    |m: &DestroyRoomRequest| { &m.admin_token },
                    |m: &mut DestroyRoomRequest| { &mut m.admin_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DestroyRoomRequest>(
                    "DestroyRoomRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DestroyRoomRequest {
        static mut instance: ::protobuf::lazy::Lazy<DestroyRoomRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DestroyRoomRequest,
        };
        unsafe {
            instance.get(DestroyRoomRequest::new)
        }
    }
}

impl ::protobuf::Clear for DestroyRoomRequest {
    fn clear(&mut self) {
        self.room_id.clear();
        self.admin_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DestroyRoomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DestroyRoomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeRequest {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeRequest {
    fn default() -> &'a SubscribeRequest {
        <SubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeRequest {
    pub fn new() -> SubscribeRequest {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SubscribeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeRequest {
        SubscribeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &SubscribeRequest| { &m.room_id },
                    |m: &mut SubscribeRequest| { &mut m.room_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeRequest>(
                    "SubscribeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeRequest,
        };
        unsafe {
            instance.get(SubscribeRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeRequest {
    fn clear(&mut self) {
        self.room_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub user_handle: ::std::string::String,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // string user_handle = 2;


    pub fn get_user_handle(&self) -> &str {
        &self.user_handle
    }
    pub fn clear_user_handle(&mut self) {
        self.user_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_handle(&mut self, v: ::std::string::String) {
        self.user_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_handle(&mut self) -> &mut ::std::string::String {
        &mut self.user_handle
    }

    // Take field
    pub fn take_user_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_handle, ::std::string::String::new())
    }

    // string text = 1;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_handle)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.user_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_handle);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.user_handle.is_empty() {
            os.write_string(2, &self.user_handle)?;
        }
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user_handle",
                    |m: &Message| { &m.user_handle },
                    |m: &mut Message| { &mut m.user_handle },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &Message| { &m.text },
                    |m: &mut Message| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.user_handle.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMessageRequest {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    pub message: ::protobuf::SingularPtrField<Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendMessageRequest {
    fn default() -> &'a SendMessageRequest {
        <SendMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendMessageRequest {
    pub fn new() -> SendMessageRequest {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // .oak.examples.chat.Message message = 3;


    pub fn get_message(&self) -> &Message {
        self.message.as_ref().unwrap_or_else(|| Message::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut Message {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> Message {
        self.message.take().unwrap_or_else(|| Message::new())
    }
}

impl ::protobuf::Message for SendMessageRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMessageRequest {
        SendMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &SendMessageRequest| { &m.room_id },
                    |m: &mut SendMessageRequest| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Message>>(
                    "message",
                    |m: &SendMessageRequest| { &m.message },
                    |m: &mut SendMessageRequest| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SendMessageRequest>(
                    "SendMessageRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SendMessageRequest {
        static mut instance: ::protobuf::lazy::Lazy<SendMessageRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SendMessageRequest,
        };
        unsafe {
            instance.get(SendMessageRequest::new)
        }
    }
}

impl ::protobuf::Clear for SendMessageRequest {
    fn clear(&mut self) {
        self.room_id.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nchat.proto\x12\x11oak.examples.chat\x1a\x1bgoogle/protobuf/empty.pro\
    to\"M\n\x11CreateRoomRequest\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\
    \x06roomId\x12\x1f\n\x0badmin_token\x18\x02\x20\x01(\x0cR\nadminToken\"N\
    \n\x12DestroyRoomRequest\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\x06r\
    oomId\x12\x1f\n\x0badmin_token\x18\x02\x20\x01(\x0cR\nadminToken\"+\n\
    \x10SubscribeRequest\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\x06roomI\
    d\">\n\x07Message\x12\x1f\n\x0buser_handle\x18\x02\x20\x01(\tR\nuserHand\
    le\x12\x12\n\x04text\x18\x01\x20\x01(\tR\x04text\"c\n\x12SendMessageRequ\
    est\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\x06roomId\x124\n\x07messa\
    ge\x18\x03\x20\x01(\x0b2\x1a.oak.examples.chat.MessageR\x07message2\xbe\
    \x02\n\x04Chat\x12J\n\nCreateRoom\x12$.oak.examples.chat.CreateRoomReque\
    st\x1a\x16.google.protobuf.Empty\x12L\n\x0bDestroyRoom\x12%.oak.examples\
    .chat.DestroyRoomRequest\x1a\x16.google.protobuf.Empty\x12N\n\tSubscribe\
    \x12#.oak.examples.chat.SubscribeRequest\x1a\x1a.oak.examples.chat.Messa\
    ge0\x01\x12L\n\x0bSendMessage\x12%.oak.examples.chat.SendMessageRequest\
    \x1a\x16.google.protobuf.Emptyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
