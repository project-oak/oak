// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chat.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateRoomRequest {
    // message fields
    pub name: ::std::string::String,
    pub room_id: ::std::vec::Vec<u8>,
    pub admin_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRoomRequest {
    fn default() -> &'a CreateRoomRequest {
        <CreateRoomRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRoomRequest {
    pub fn new() -> CreateRoomRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes room_id = 2;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // bytes admin_id = 3;


    pub fn get_admin_id(&self) -> &[u8] {
        &self.admin_id
    }
    pub fn clear_admin_id(&mut self) {
        self.admin_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.admin_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.admin_id
    }

    // Take field
    pub fn take_admin_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.admin_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateRoomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.admin_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.room_id);
        }
        if !self.admin_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.admin_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.room_id.is_empty() {
            os.write_bytes(2, &self.room_id)?;
        }
        if !self.admin_id.is_empty() {
            os.write_bytes(3, &self.admin_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRoomRequest {
        CreateRoomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CreateRoomRequest| { &m.name },
                    |m: &mut CreateRoomRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &CreateRoomRequest| { &m.room_id },
                    |m: &mut CreateRoomRequest| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "admin_id",
                    |m: &CreateRoomRequest| { &m.admin_id },
                    |m: &mut CreateRoomRequest| { &mut m.admin_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRoomRequest>(
                    "CreateRoomRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRoomRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateRoomRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRoomRequest,
        };
        unsafe {
            instance.get(CreateRoomRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateRoomRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.room_id.clear();
        self.admin_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRoomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRoomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DestroyRoomRequest {
    // message fields
    pub admin_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DestroyRoomRequest {
    fn default() -> &'a DestroyRoomRequest {
        <DestroyRoomRequest as ::protobuf::Message>::default_instance()
    }
}

impl DestroyRoomRequest {
    pub fn new() -> DestroyRoomRequest {
        ::std::default::Default::default()
    }

    // bytes admin_id = 1;


    pub fn get_admin_id(&self) -> &[u8] {
        &self.admin_id
    }
    pub fn clear_admin_id(&mut self) {
        self.admin_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.admin_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.admin_id
    }

    // Take field
    pub fn take_admin_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.admin_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DestroyRoomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.admin_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.admin_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.admin_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.admin_id.is_empty() {
            os.write_bytes(1, &self.admin_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DestroyRoomRequest {
        DestroyRoomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "admin_id",
                    |m: &DestroyRoomRequest| { &m.admin_id },
                    |m: &mut DestroyRoomRequest| { &mut m.admin_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DestroyRoomRequest>(
                    "DestroyRoomRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DestroyRoomRequest {
        static mut instance: ::protobuf::lazy::Lazy<DestroyRoomRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DestroyRoomRequest,
        };
        unsafe {
            instance.get(DestroyRoomRequest::new)
        }
    }
}

impl ::protobuf::Clear for DestroyRoomRequest {
    fn clear(&mut self) {
        self.admin_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DestroyRoomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DestroyRoomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinRoomRequest {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    pub user_handle: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinRoomRequest {
    fn default() -> &'a JoinRoomRequest {
        <JoinRoomRequest as ::protobuf::Message>::default_instance()
    }
}

impl JoinRoomRequest {
    pub fn new() -> JoinRoomRequest {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // string user_handle = 2;


    pub fn get_user_handle(&self) -> &str {
        &self.user_handle
    }
    pub fn clear_user_handle(&mut self) {
        self.user_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_handle(&mut self, v: ::std::string::String) {
        self.user_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_handle(&mut self) -> &mut ::std::string::String {
        &mut self.user_handle
    }

    // Take field
    pub fn take_user_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_handle, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JoinRoomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_handle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        if !self.user_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        if !self.user_handle.is_empty() {
            os.write_string(2, &self.user_handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinRoomRequest {
        JoinRoomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &JoinRoomRequest| { &m.room_id },
                    |m: &mut JoinRoomRequest| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user_handle",
                    |m: &JoinRoomRequest| { &m.user_handle },
                    |m: &mut JoinRoomRequest| { &mut m.user_handle },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinRoomRequest>(
                    "JoinRoomRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinRoomRequest {
        static mut instance: ::protobuf::lazy::Lazy<JoinRoomRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinRoomRequest,
        };
        unsafe {
            instance.get(JoinRoomRequest::new)
        }
    }
}

impl ::protobuf::Clear for JoinRoomRequest {
    fn clear(&mut self) {
        self.room_id.clear();
        self.user_handle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinRoomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinRoomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceivedMessage {
    // message fields
    pub room_name: ::std::string::String,
    pub user_handle: ::std::string::String,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceivedMessage {
    fn default() -> &'a ReceivedMessage {
        <ReceivedMessage as ::protobuf::Message>::default_instance()
    }
}

impl ReceivedMessage {
    pub fn new() -> ReceivedMessage {
        ::std::default::Default::default()
    }

    // string room_name = 1;


    pub fn get_room_name(&self) -> &str {
        &self.room_name
    }
    pub fn clear_room_name(&mut self) {
        self.room_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_name(&mut self, v: ::std::string::String) {
        self.room_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_name(&mut self) -> &mut ::std::string::String {
        &mut self.room_name
    }

    // Take field
    pub fn take_room_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.room_name, ::std::string::String::new())
    }

    // string user_handle = 2;


    pub fn get_user_handle(&self) -> &str {
        &self.user_handle
    }
    pub fn clear_user_handle(&mut self) {
        self.user_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_handle(&mut self, v: ::std::string::String) {
        self.user_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_handle(&mut self) -> &mut ::std::string::String {
        &mut self.user_handle
    }

    // Take field
    pub fn take_user_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_handle, ::std::string::String::new())
    }

    // string text = 3;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReceivedMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.room_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_handle)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.room_name);
        }
        if !self.user_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_handle);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_name.is_empty() {
            os.write_string(1, &self.room_name)?;
        }
        if !self.user_handle.is_empty() {
            os.write_string(2, &self.user_handle)?;
        }
        if !self.text.is_empty() {
            os.write_string(3, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceivedMessage {
        ReceivedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "room_name",
                    |m: &ReceivedMessage| { &m.room_name },
                    |m: &mut ReceivedMessage| { &mut m.room_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user_handle",
                    |m: &ReceivedMessage| { &m.user_handle },
                    |m: &mut ReceivedMessage| { &mut m.user_handle },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &ReceivedMessage| { &m.text },
                    |m: &mut ReceivedMessage| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReceivedMessage>(
                    "ReceivedMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReceivedMessage {
        static mut instance: ::protobuf::lazy::Lazy<ReceivedMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReceivedMessage,
        };
        unsafe {
            instance.get(ReceivedMessage::new)
        }
    }
}

impl ::protobuf::Clear for ReceivedMessage {
    fn clear(&mut self) {
        self.room_name.clear();
        self.user_handle.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceivedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceivedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SentMessage {
    // message fields
    pub room_id: ::std::vec::Vec<u8>,
    pub user_handle: ::std::string::String,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SentMessage {
    fn default() -> &'a SentMessage {
        <SentMessage as ::protobuf::Message>::default_instance()
    }
}

impl SentMessage {
    pub fn new() -> SentMessage {
        ::std::default::Default::default()
    }

    // bytes room_id = 1;


    pub fn get_room_id(&self) -> &[u8] {
        &self.room_id
    }
    pub fn clear_room_id(&mut self) {
        self.room_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_room_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.room_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_room_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.room_id
    }

    // Take field
    pub fn take_room_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.room_id, ::std::vec::Vec::new())
    }

    // string user_handle = 2;


    pub fn get_user_handle(&self) -> &str {
        &self.user_handle
    }
    pub fn clear_user_handle(&mut self) {
        self.user_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_handle(&mut self, v: ::std::string::String) {
        self.user_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_handle(&mut self) -> &mut ::std::string::String {
        &mut self.user_handle
    }

    // Take field
    pub fn take_user_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_handle, ::std::string::String::new())
    }

    // string text = 3;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SentMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.room_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_handle)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.room_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.room_id);
        }
        if !self.user_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_handle);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.room_id.is_empty() {
            os.write_bytes(1, &self.room_id)?;
        }
        if !self.user_handle.is_empty() {
            os.write_string(2, &self.user_handle)?;
        }
        if !self.text.is_empty() {
            os.write_string(3, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SentMessage {
        SentMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "room_id",
                    |m: &SentMessage| { &m.room_id },
                    |m: &mut SentMessage| { &mut m.room_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user_handle",
                    |m: &SentMessage| { &m.user_handle },
                    |m: &mut SentMessage| { &mut m.user_handle },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &SentMessage| { &m.text },
                    |m: &mut SentMessage| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SentMessage>(
                    "SentMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SentMessage {
        static mut instance: ::protobuf::lazy::Lazy<SentMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SentMessage,
        };
        unsafe {
            instance.get(SentMessage::new)
        }
    }
}

impl ::protobuf::Clear for SentMessage {
    fn clear(&mut self) {
        self.room_id.clear();
        self.user_handle.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SentMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SentMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nchat.proto\x12\x11oak.examples.chat\x1a\x1bgoogle/protobuf/empty.pro\
    to\"[\n\x11CreateRoomRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04na\
    me\x12\x17\n\x07room_id\x18\x02\x20\x01(\x0cR\x06roomId\x12\x19\n\x08adm\
    in_id\x18\x03\x20\x01(\x0cR\x07adminId\"/\n\x12DestroyRoomRequest\x12\
    \x19\n\x08admin_id\x18\x01\x20\x01(\x0cR\x07adminId\"K\n\x0fJoinRoomRequ\
    est\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\x06roomId\x12\x1f\n\x0bus\
    er_handle\x18\x02\x20\x01(\tR\nuserHandle\"c\n\x0fReceivedMessage\x12\
    \x1b\n\troom_name\x18\x01\x20\x01(\tR\x08roomName\x12\x1f\n\x0buser_hand\
    le\x18\x02\x20\x01(\tR\nuserHandle\x12\x12\n\x04text\x18\x03\x20\x01(\tR\
    \x04text\"[\n\x0bSentMessage\x12\x17\n\x07room_id\x18\x01\x20\x01(\x0cR\
    \x06roomId\x12\x1f\n\x0buser_handle\x18\x02\x20\x01(\tR\nuserHandle\x12\
    \x12\n\x04text\x18\x03\x20\x01(\tR\x04text2\xbd\x02\n\x04Chat\x12J\n\nCr\
    eateRoom\x12$.oak.examples.chat.CreateRoomRequest\x1a\x16.google.protobu\
    f.Empty\x12L\n\x0bDestroyRoom\x12%.oak.examples.chat.DestroyRoomRequest\
    \x1a\x16.google.protobuf.Empty\x12T\n\x08JoinRoom\x12\".oak.examples.cha\
    t.JoinRoomRequest\x1a\".oak.examples.chat.ReceivedMessage0\x01\x12E\n\
    \x0bSendMessage\x12\x1e.oak.examples.chat.SentMessage\x1a\x16.google.pro\
    tobuf.Emptyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
