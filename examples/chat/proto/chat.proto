//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.examples.chat;

import "google/protobuf/empty.proto";
import "oak/proto/handle.proto";
import "oak_abi/proto/grpc_encap.proto";

message CreateRoomRequest {
  // ID used to identify the room; knowledge of this value allows entry to the room. The client
  // should create a random bearer token of sufficient entropy to use as the room ID.
  //
  // TODO(#212): Once more of the labelling / policy system is implemented in the Oak Runtime, the
  // confidentiality of each chat room will not be based on the confidentiality of this value,
  // rather by the labels attached to individual messages by the various clients.
  bytes room_id = 1;

  // Bearer token used to administer the room; knowledge of this value allows control over the room
  // (including the ability to destroy the room). The client should create a random bearer token of
  // sufficient entropy to use as the admin token.
  bytes admin_token = 2;
}

message DestroyRoomRequest {
  bytes room_id = 1;
  bytes admin_token = 2;
}

message SubscribeRequest {
  bytes room_id = 1;
}

message Message {
  // Handle for the user; this is only used for UI purposes (and so does not need to be unique nor
  // persistent).
  string user_handle = 2;
  string text = 1;
}

message SendMessageRequest {
  bytes room_id = 1;
  Message message = 3;
}

service Chat {
  rpc CreateRoom(CreateRoomRequest) returns (google.protobuf.Empty);
  rpc DestroyRoom(DestroyRoomRequest) returns (google.protobuf.Empty);

  // Subscribe to a chat room, in order to receive future messages sent to it.
  rpc Subscribe(SubscribeRequest) returns (stream Message);

  // Send a message to a chat room.
  rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty);
}

// Command sent to room nodes.
//
// This message is only used for inter-node communication, it is not exposed through gRPC.
message Command {
  oneof command {
    // Sent when a new subscriber joins the room.
    oak.handle.Sender join_room = 1 [(oak.handle.message_type) = ".oak.encap.GrpcResponse"];

    // Command to send a message to the room (and thus to all subscribers).
    Message send_message = 2;
  }
}
