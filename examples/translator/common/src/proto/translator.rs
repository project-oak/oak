// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `translator.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct TranslateRequest {
    // message fields
    pub text: ::std::string::String,
    pub from_lang: ::std::string::String,
    pub to_lang: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslateRequest {
    fn default() -> &'a TranslateRequest {
        <TranslateRequest as ::protobuf::Message>::default_instance()
    }
}

impl TranslateRequest {
    pub fn new() -> TranslateRequest {
        ::std::default::Default::default()
    }

    // string text = 1;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }

    // string from_lang = 2;


    pub fn get_from_lang(&self) -> &str {
        &self.from_lang
    }
    pub fn clear_from_lang(&mut self) {
        self.from_lang.clear();
    }

    // Param is passed by value, moved
    pub fn set_from_lang(&mut self, v: ::std::string::String) {
        self.from_lang = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_lang(&mut self) -> &mut ::std::string::String {
        &mut self.from_lang
    }

    // Take field
    pub fn take_from_lang(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from_lang, ::std::string::String::new())
    }

    // string to_lang = 3;


    pub fn get_to_lang(&self) -> &str {
        &self.to_lang
    }
    pub fn clear_to_lang(&mut self) {
        self.to_lang.clear();
    }

    // Param is passed by value, moved
    pub fn set_to_lang(&mut self, v: ::std::string::String) {
        self.to_lang = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_lang(&mut self) -> &mut ::std::string::String {
        &mut self.to_lang
    }

    // Take field
    pub fn take_to_lang(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to_lang, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TranslateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from_lang)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to_lang)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        if !self.from_lang.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.from_lang);
        }
        if !self.to_lang.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.to_lang);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        if !self.from_lang.is_empty() {
            os.write_string(2, &self.from_lang)?;
        }
        if !self.to_lang.is_empty() {
            os.write_string(3, &self.to_lang)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslateRequest {
        TranslateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &TranslateRequest| { &m.text },
                    |m: &mut TranslateRequest| { &mut m.text },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "from_lang",
                    |m: &TranslateRequest| { &m.from_lang },
                    |m: &mut TranslateRequest| { &mut m.from_lang },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "to_lang",
                    |m: &TranslateRequest| { &m.to_lang },
                    |m: &mut TranslateRequest| { &mut m.to_lang },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslateRequest>(
                    "TranslateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslateRequest {
        static mut instance: ::protobuf::lazy::Lazy<TranslateRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslateRequest,
        };
        unsafe {
            instance.get(TranslateRequest::new)
        }
    }
}

impl ::protobuf::Clear for TranslateRequest {
    fn clear(&mut self) {
        self.text.clear();
        self.from_lang.clear();
        self.to_lang.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslateResponse {
    // message fields
    pub translated_text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslateResponse {
    fn default() -> &'a TranslateResponse {
        <TranslateResponse as ::protobuf::Message>::default_instance()
    }
}

impl TranslateResponse {
    pub fn new() -> TranslateResponse {
        ::std::default::Default::default()
    }

    // string translated_text = 1;


    pub fn get_translated_text(&self) -> &str {
        &self.translated_text
    }
    pub fn clear_translated_text(&mut self) {
        self.translated_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_translated_text(&mut self, v: ::std::string::String) {
        self.translated_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_translated_text(&mut self) -> &mut ::std::string::String {
        &mut self.translated_text
    }

    // Take field
    pub fn take_translated_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.translated_text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TranslateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.translated_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.translated_text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.translated_text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.translated_text.is_empty() {
            os.write_string(1, &self.translated_text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslateResponse {
        TranslateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "translated_text",
                    |m: &TranslateResponse| { &m.translated_text },
                    |m: &mut TranslateResponse| { &mut m.translated_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslateResponse>(
                    "TranslateResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslateResponse {
        static mut instance: ::protobuf::lazy::Lazy<TranslateResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslateResponse,
        };
        unsafe {
            instance.get(TranslateResponse::new)
        }
    }
}

impl ::protobuf::Clear for TranslateResponse {
    fn clear(&mut self) {
        self.translated_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10translator.proto\x12\x17oak.examples.translator\"\\\n\x10Translate\
    Request\x12\x12\n\x04text\x18\x01\x20\x01(\tR\x04text\x12\x1b\n\tfrom_la\
    ng\x18\x02\x20\x01(\tR\x08fromLang\x12\x17\n\x07to_lang\x18\x03\x20\x01(\
    \tR\x06toLang\"<\n\x11TranslateResponse\x12'\n\x0ftranslated_text\x18\
    \x01\x20\x01(\tR\x0etranslatedText2p\n\nTranslator\x12b\n\tTranslate\x12\
    ).oak.examples.translator.TranslateRequest\x1a*.oak.examples.translator.\
    TranslateResponseB6Z4github.com/project-oak/oak/examples/translator/prot\
    ob\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
