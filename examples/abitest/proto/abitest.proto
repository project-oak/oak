//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.examples.abitest;

message ABITestRequest {
  // Regular expression of test names to include in the test run.
  string include = 1;
  // If non-empty, holds a regular expression of test names to exclude from the
  // test run.  Tests are only run if they match include and do not match
  // exclude.
  string exclude = 2;
  // If true, only run tests that have predictable changes to the Node and
  // channel count.
  bool predictable_counts = 3;
}

message ABITestResponse {
  message TestResult {
    string name = 1;
    bool success = 2;
    string details = 3;
    bool disabled = 4;
    // If true, the following two fields indicate the expected changes in Node
    // and channel counts from running the test.
    bool predictable_counts = 5;
    uint32 node_change = 6;
    uint32 channel_change = 7;
  }
  repeated TestResult results = 1;
}

message GrpcTestRequest {
  oneof method_result {
    int32 err_code = 1;
    string ok_text = 2;
  }
}

message GrpcTestResponse {
  string text = 1;
}

service OakABITestService {
  rpc RunTests(ABITestRequest) returns (ABITestResponse);

  // The following methods allow testing of the gRPC connection to an Oak
  // Application. Each method reflects back the contents of the incoming
  // request, generating an error if `err_code` is set or an OK response
  // containing the contents of `ok_text otherwise.
  rpc UnaryMethod(GrpcTestRequest) returns (GrpcTestResponse);
  rpc ServerStreamingMethod(GrpcTestRequest) returns (stream GrpcTestResponse);
  rpc ClientStreamingMethod(stream GrpcTestRequest) returns (GrpcTestResponse);
  rpc BidiStreamingMethod(stream GrpcTestRequest) returns (stream GrpcTestResponse);

  // The following methods perform an operation that takes some time server-side;
  // this allows testing of parallel requests.
  rpc SlowUnaryMethod(GrpcTestRequest) returns (GrpcTestResponse);
  rpc SlowStreamingMethod(GrpcTestRequest) returns (stream GrpcTestResponse);
}
