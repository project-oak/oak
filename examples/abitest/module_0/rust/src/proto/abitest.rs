// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `abitest.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ABITestRequest {
    // message fields
    pub include: ::std::string::String,
    pub exclude: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ABITestRequest {
    fn default() -> &'a ABITestRequest {
        <ABITestRequest as ::protobuf::Message>::default_instance()
    }
}

impl ABITestRequest {
    pub fn new() -> ABITestRequest {
        ::std::default::Default::default()
    }

    // string include = 1;


    pub fn get_include(&self) -> &str {
        &self.include
    }
    pub fn clear_include(&mut self) {
        self.include.clear();
    }

    // Param is passed by value, moved
    pub fn set_include(&mut self, v: ::std::string::String) {
        self.include = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_include(&mut self) -> &mut ::std::string::String {
        &mut self.include
    }

    // Take field
    pub fn take_include(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.include, ::std::string::String::new())
    }

    // string exclude = 2;


    pub fn get_exclude(&self) -> &str {
        &self.exclude
    }
    pub fn clear_exclude(&mut self) {
        self.exclude.clear();
    }

    // Param is passed by value, moved
    pub fn set_exclude(&mut self, v: ::std::string::String) {
        self.exclude = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exclude(&mut self) -> &mut ::std::string::String {
        &mut self.exclude
    }

    // Take field
    pub fn take_exclude(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exclude, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ABITestRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.include)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exclude)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.include.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.include);
        }
        if !self.exclude.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exclude);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.include.is_empty() {
            os.write_string(1, &self.include)?;
        }
        if !self.exclude.is_empty() {
            os.write_string(2, &self.exclude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ABITestRequest {
        ABITestRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "include",
                    |m: &ABITestRequest| { &m.include },
                    |m: &mut ABITestRequest| { &mut m.include },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "exclude",
                    |m: &ABITestRequest| { &m.exclude },
                    |m: &mut ABITestRequest| { &mut m.exclude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ABITestRequest>(
                    "ABITestRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ABITestRequest {
        static mut instance: ::protobuf::lazy::Lazy<ABITestRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ABITestRequest,
        };
        unsafe {
            instance.get(ABITestRequest::new)
        }
    }
}

impl ::protobuf::Clear for ABITestRequest {
    fn clear(&mut self) {
        self.include.clear();
        self.exclude.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ABITestRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABITestRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ABITestResponse {
    // message fields
    pub results: ::protobuf::RepeatedField<ABITestResponse_TestResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ABITestResponse {
    fn default() -> &'a ABITestResponse {
        <ABITestResponse as ::protobuf::Message>::default_instance()
    }
}

impl ABITestResponse {
    pub fn new() -> ABITestResponse {
        ::std::default::Default::default()
    }

    // repeated .oak.examples.abitest.ABITestResponse.TestResult results = 1;


    pub fn get_results(&self) -> &[ABITestResponse_TestResult] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<ABITestResponse_TestResult>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<ABITestResponse_TestResult> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<ABITestResponse_TestResult> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ABITestResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.results {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ABITestResponse {
        ABITestResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ABITestResponse_TestResult>>(
                    "results",
                    |m: &ABITestResponse| { &m.results },
                    |m: &mut ABITestResponse| { &mut m.results },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ABITestResponse>(
                    "ABITestResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ABITestResponse {
        static mut instance: ::protobuf::lazy::Lazy<ABITestResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ABITestResponse,
        };
        unsafe {
            instance.get(ABITestResponse::new)
        }
    }
}

impl ::protobuf::Clear for ABITestResponse {
    fn clear(&mut self) {
        self.results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ABITestResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABITestResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ABITestResponse_TestResult {
    // message fields
    pub name: ::std::string::String,
    pub success: bool,
    pub details: ::std::string::String,
    pub disabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ABITestResponse_TestResult {
    fn default() -> &'a ABITestResponse_TestResult {
        <ABITestResponse_TestResult as ::protobuf::Message>::default_instance()
    }
}

impl ABITestResponse_TestResult {
    pub fn new() -> ABITestResponse_TestResult {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    // string details = 3;


    pub fn get_details(&self) -> &str {
        &self.details
    }
    pub fn clear_details(&mut self) {
        self.details.clear();
    }

    // Param is passed by value, moved
    pub fn set_details(&mut self, v: ::std::string::String) {
        self.details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_details(&mut self) -> &mut ::std::string::String {
        &mut self.details
    }

    // Take field
    pub fn take_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.details, ::std::string::String::new())
    }

    // bool disabled = 4;


    pub fn get_disabled(&self) -> bool {
        self.disabled
    }
    pub fn clear_disabled(&mut self) {
        self.disabled = false;
    }

    // Param is passed by value, moved
    pub fn set_disabled(&mut self, v: bool) {
        self.disabled = v;
    }
}

impl ::protobuf::Message for ABITestResponse_TestResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.details)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.success != false {
            my_size += 2;
        }
        if !self.details.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.details);
        }
        if self.disabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        if !self.details.is_empty() {
            os.write_string(3, &self.details)?;
        }
        if self.disabled != false {
            os.write_bool(4, self.disabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ABITestResponse_TestResult {
        ABITestResponse_TestResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ABITestResponse_TestResult| { &m.name },
                    |m: &mut ABITestResponse_TestResult| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &ABITestResponse_TestResult| { &m.success },
                    |m: &mut ABITestResponse_TestResult| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "details",
                    |m: &ABITestResponse_TestResult| { &m.details },
                    |m: &mut ABITestResponse_TestResult| { &mut m.details },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disabled",
                    |m: &ABITestResponse_TestResult| { &m.disabled },
                    |m: &mut ABITestResponse_TestResult| { &mut m.disabled },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ABITestResponse_TestResult>(
                    "ABITestResponse_TestResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ABITestResponse_TestResult {
        static mut instance: ::protobuf::lazy::Lazy<ABITestResponse_TestResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ABITestResponse_TestResult,
        };
        unsafe {
            instance.get(ABITestResponse_TestResult::new)
        }
    }
}

impl ::protobuf::Clear for ABITestResponse_TestResult {
    fn clear(&mut self) {
        self.name.clear();
        self.success = false;
        self.details.clear();
        self.disabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ABITestResponse_TestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABITestResponse_TestResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcTestRequest {
    // message oneof groups
    pub method_result: ::std::option::Option<GrpcTestRequest_oneof_method_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcTestRequest {
    fn default() -> &'a GrpcTestRequest {
        <GrpcTestRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GrpcTestRequest_oneof_method_result {
    err_code(i32),
    ok_text(::std::string::String),
}

impl GrpcTestRequest {
    pub fn new() -> GrpcTestRequest {
        ::std::default::Default::default()
    }

    // int32 err_code = 1;


    pub fn get_err_code(&self) -> i32 {
        match self.method_result {
            ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::err_code(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_err_code(&mut self) {
        self.method_result = ::std::option::Option::None;
    }

    pub fn has_err_code(&self) -> bool {
        match self.method_result {
            ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::err_code(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_err_code(&mut self, v: i32) {
        self.method_result = ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::err_code(v))
    }

    // string ok_text = 2;


    pub fn get_ok_text(&self) -> &str {
        match self.method_result {
            ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ok_text(&mut self) {
        self.method_result = ::std::option::Option::None;
    }

    pub fn has_ok_text(&self) -> bool {
        match self.method_result {
            ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ok_text(&mut self, v: ::std::string::String) {
        self.method_result = ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ok_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(_)) = self.method_result {
        } else {
            self.method_result = ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(::std::string::String::new()));
        }
        match self.method_result {
            ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ok_text(&mut self) -> ::std::string::String {
        if self.has_ok_text() {
            match self.method_result.take() {
                ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for GrpcTestRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.method_result = ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::err_code(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.method_result = ::std::option::Option::Some(GrpcTestRequest_oneof_method_result::ok_text(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.method_result {
            match v {
                &GrpcTestRequest_oneof_method_result::err_code(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &GrpcTestRequest_oneof_method_result::ok_text(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.method_result {
            match v {
                &GrpcTestRequest_oneof_method_result::err_code(v) => {
                    os.write_int32(1, v)?;
                },
                &GrpcTestRequest_oneof_method_result::ok_text(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcTestRequest {
        GrpcTestRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                    "err_code",
                    GrpcTestRequest::has_err_code,
                    GrpcTestRequest::get_err_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "ok_text",
                    GrpcTestRequest::has_ok_text,
                    GrpcTestRequest::get_ok_text,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GrpcTestRequest>(
                    "GrpcTestRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrpcTestRequest {
        static mut instance: ::protobuf::lazy::Lazy<GrpcTestRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrpcTestRequest,
        };
        unsafe {
            instance.get(GrpcTestRequest::new)
        }
    }
}

impl ::protobuf::Clear for GrpcTestRequest {
    fn clear(&mut self) {
        self.method_result = ::std::option::Option::None;
        self.method_result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcTestRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcTestRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcTestResponse {
    // message fields
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcTestResponse {
    fn default() -> &'a GrpcTestResponse {
        <GrpcTestResponse as ::protobuf::Message>::default_instance()
    }
}

impl GrpcTestResponse {
    pub fn new() -> GrpcTestResponse {
        ::std::default::Default::default()
    }

    // string text = 1;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GrpcTestResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcTestResponse {
        GrpcTestResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &GrpcTestResponse| { &m.text },
                    |m: &mut GrpcTestResponse| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GrpcTestResponse>(
                    "GrpcTestResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrpcTestResponse {
        static mut instance: ::protobuf::lazy::Lazy<GrpcTestResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrpcTestResponse,
        };
        unsafe {
            instance.get(GrpcTestResponse::new)
        }
    }
}

impl ::protobuf::Clear for GrpcTestResponse {
    fn clear(&mut self) {
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcTestResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcTestResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rabitest.proto\x12\x14oak.examples.abitest\"D\n\x0eABITestRequest\x12\
    \x18\n\x07include\x18\x01\x20\x01(\tR\x07include\x12\x18\n\x07exclude\
    \x18\x02\x20\x01(\tR\x07exclude\"\xcf\x01\n\x0fABITestResponse\x12J\n\
    \x07results\x18\x01\x20\x03(\x0b20.oak.examples.abitest.ABITestResponse.\
    TestResultR\x07results\x1ap\n\nTestResult\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success\
    \x12\x18\n\x07details\x18\x03\x20\x01(\tR\x07details\x12\x1a\n\x08disabl\
    ed\x18\x04\x20\x01(\x08R\x08disabled\"Z\n\x0fGrpcTestRequest\x12\x1b\n\
    \x08err_code\x18\x01\x20\x01(\x05H\0R\x07errCode\x12\x19\n\x07ok_text\
    \x18\x02\x20\x01(\tH\0R\x06okTextB\x0f\n\rmethod_result\"&\n\x10GrpcTest\
    Response\x12\x12\n\x04text\x18\x01\x20\x01(\tR\x04text2\x88\x04\n\x11Oak\
    ABITestService\x12W\n\x08RunTests\x12$.oak.examples.abitest.ABITestReque\
    st\x1a%.oak.examples.abitest.ABITestResponse\x12\\\n\x0bUnaryMethod\x12%\
    .oak.examples.abitest.GrpcTestRequest\x1a&.oak.examples.abitest.GrpcTest\
    Response\x12h\n\x15ServerStreamingMethod\x12%.oak.examples.abitest.GrpcT\
    estRequest\x1a&.oak.examples.abitest.GrpcTestResponse0\x01\x12h\n\x15Cli\
    entStreamingMethod\x12%.oak.examples.abitest.GrpcTestRequest\x1a&.oak.ex\
    amples.abitest.GrpcTestResponse(\x01\x12h\n\x13BidiStreamingMethod\x12%.\
    oak.examples.abitest.GrpcTestRequest\x1a&.oak.examples.abitest.GrpcTestR\
    esponse(\x010\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
