//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.verification.v1;

// This package provides constructs for configuring the logic for verifying remote attestation evidence and endorsement. The general verification process involves:
// 1. Verifying the TEE certificate from endorsement and matching it against the attestation report from evidence.
// 2. Iterate over DICE evidence layers and for each layer:
//   2.1 Check the signatures, and verify that the layer is in the expected order.
//   2.2 For each binary verify it against the transparent release endorsement and reference values.

// Client-side options for verifying the attestation endorsement for a binary.
message AttestationVerificationOptions {
  // TEE platforms that the client is allowed to interact with, and can verify the evidence
  // generated by them.
  repeated TeePlatform supported_tee_platforms = 1;
  // Whether to skip TEE certificate verification.
  bool skip_tee_certificate_verification = 2;
  // Options for verifying transparency evidence. The mapping allows associating a different set
  // of options to each binary.
  map<string, TransparencyVerificationOptions> transparency_verification_options = 3;
  // Default transparency verification options for binaries that are absent from
  // transparency_verification_options.
  TransparencyVerificationOptions default_transparency_verification_options = 4;
  // Options for verifying evidence against reference values
  ReferenceValueVerificationOptions reference_value_verification_options = 5;
}

enum TeePlatform {
  UNSPECIFIED = 0;
  AMD_SEV_SNP = 1;
  INTEL_TDX = 2;
}

// Specifies whether verifying a Rekor log entry should be skipped. If not, provides the data,
// including public keys, required for verifying the Rekor log entry.
message TransparencyVerificationOptions {
  oneof rekor_entry_verification {
    SkipRekorEntryVerification skip = 1;
    RekorEntryVerificationData verification_data = 2;
  }
}

// Data, including public keys, required for verifying a Rekor log entry.
message RekorEntryVerificationData {
  string base64_pem_encoded_rekor_public_key = 1;
  string base64_pem_encoded_endorser_public_key = 2;
}

// A singleton value to allow skipping the verification of Rekor log entry.
message SkipRekorEntryVerification {}

// TODO(#3641): This needs to be updated with more details. In particular, the client should be able to specify the order in which it expects the layers to appear.
message ReferenceValueVerificationOptions {
  // key:value pairs of reference values to check the attestation evidence against.
  map<string, string> reference_values = 1;
}
