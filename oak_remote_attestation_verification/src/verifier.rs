//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

use alloc::vec::Vec;
use oak_remote_attestation::proto::oak::session::v1::{
    AttestationEndorsement, AttestationEvidence, BinaryAttestation,
};

use crate::rekor::verify_rekor_log_entry;
use oak_transparency_claims::claims::{parse_endorsement_statement, validate_endorsement};

/// Reference values used by the verifier to appraise the attestation evidence.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-reference-values>
pub struct ReferenceValue {
    pub binary_hash: Vec<u8>,
}

/// A trait implementing the functionality of a verifier that appraises the attestation evidence and
/// produces an attestation result.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-verifier>
pub trait AttestationVerifier: Clone + Send + Sync {
    /// Verify that the provided evidence was endorsed and contains specified reference values.
    fn verify(
        evidence: &AttestationEvidence,
        endorsement: &AttestationEndorsement,
        reference_value: &ReferenceValue,
    ) -> anyhow::Result<()>;
}

/// An instance of [`AttestationVerifier`] that succeeds iff the provided attestation is empty.
///
/// Useful when no attestation is expected to be generated by the other side of a remotely
/// attested connection.
#[derive(Clone)]
pub struct InsecureAttestationVerifier;

impl AttestationVerifier for InsecureAttestationVerifier {
    fn verify(
        evidence: &AttestationEvidence,
        _endorsement: &AttestationEndorsement,
        _reference_value: &ReferenceValue,
    ) -> anyhow::Result<()> {
        // We check that the attestation report is empty in order to avoid accidentally ignoring a
        // real attestation from the other side, although in principle a more lenient
        // implementation of this struct could be used that always ignores also non-empty
        // attestations.
        if evidence.attestation.is_empty() {
            Ok(())
        } else {
            Err(anyhow::anyhow!(
                "expected empty attestation report, got {:?}",
                evidence.attestation
            ))
        }
    }
}

// Verifies the given BinaryAttestation object using the given Rekor and endorser public keys, and
// reference value.
pub fn verify_binary_attestation(
    binary_attestation: &BinaryAttestation,
    reference_value: &ReferenceValue,
    pem_encoded_rekor_public_key_bytes: &[u8],
    pem_encoded_endorser_public_key_bytes: &[u8],
) -> anyhow::Result<()> {
    verify_rekor_log_entry(
        &binary_attestation.rekor_log_entry,
        pem_encoded_rekor_public_key_bytes,
        pem_encoded_endorser_public_key_bytes,
        &binary_attestation.endorsement_statement,
    )?;
    verify_endorsement_statement(&binary_attestation.endorsement_statement, reference_value)
}

// Parses the given bytes into an endorsement statement and verifies it against the given Reference
// values.
pub fn verify_endorsement_statement(
    endorsement_bytes: &[u8],
    reference_value: &ReferenceValue,
) -> anyhow::Result<()> {
    let claim = parse_endorsement_statement(endorsement_bytes)?;
    if let Err(err) = validate_endorsement(&claim) {
        anyhow::bail!("validating endorsement: {err:?}");
    }
    let binary_digest = core::str::from_utf8(&reference_value.binary_hash)?;
    if claim.subject.len() != 1 {
        anyhow::bail!(
            "expected 1 subject in the endorsement, found {}",
            claim.subject.len()
        );
    }
    if claim.subject[0].digest["sha256"] != binary_digest {
        anyhow::bail!(
            "unexpected binary SHA256 digest: expected {binary_digest}, got {}",
            claim.subject[0].digest["sha256"]
        );
    }
    Ok(())
}
