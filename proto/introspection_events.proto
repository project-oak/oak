//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "oak_abi/proto/label.proto";

package oak.introspection_events;

message Events {
  repeated Event events = 1;
}

// This messages defines an event sent by the Oak Runtime to allow for dynamic
// introspection in non-production enviroments. It provides a "schema" to
// describe the creation/destruction of nodes, channels, handles, as well as the
// queuing of messages.
message Event {
  google.protobuf.Timestamp timestamp = 1;
  oneof event_details {
    NodeCreated node_created = 2;
    NodeDestroyed node_destroyed = 3;
    ChannelCreated channel_created = 4;
    ChannelDestroyed channel_destroyed = 5;
    HandleCreated handle_created = 6;
    HandleDestroyed handle_destroyed = 7;
    MessageEnqueued message_enqueued = 8;
    MessageDequeued message_dequeued = 9;
  }
}

message NodeCreated {
  // By default the generated JavaScript code converts all 64bit integer types
  // to the JS `number` type. A potentially lossy conversion since `number` only
  // supports integers up to 2^53 - 1. This is remedied via the [jstype =
  // JS_STRING] annotation. Ref:
  // https://github.com/protocolbuffers/protobuf/issues/3666
  uint64 node_id = 1 [jstype = JS_STRING];

  string name = 2;

  oak.label.Label label = 3;
}

message NodeDestroyed {
  uint64 node_id = 1 [jstype = JS_STRING];
}

message ChannelCreated {
  uint64 channel_id = 1 [jstype = JS_STRING];

  string name = 2;

  oak.label.Label label = 3;
}

message ChannelDestroyed {
  uint64 channel_id = 1 [jstype = JS_STRING];
}

enum Direction {
  READ = 0;
  WRITE = 1;
}

message HandleCreated {
  uint64 node_id = 1 [jstype = JS_STRING];

  uint64 channel_id = 2 [jstype = JS_STRING];

  uint64 handle = 3 [jstype = JS_STRING];

  Direction direction = 4;
}

message HandleDestroyed {
  uint64 node_id = 1 [jstype = JS_STRING];

  uint64 channel_id = 2 [jstype = JS_STRING];

  uint64 handle = 3 [jstype = JS_STRING];

  Direction direction = 4;
}

message MessageEnqueued {
  uint64 node_id = 1 [jstype = JS_STRING];

  uint64 channel_id = 2 [jstype = JS_STRING];

  // These fields must be explicitly marked as packed = false, since depending
  // on being interpreted as either standard uint64 vs as a string type they
  // are respectively packed and not packed by default.
  // Ref: https://developers.google.com/protocol-buffers/docs/encoding#packed
  // If these are not explicitly set as not packed, the the JS parser
  // (google-protobuf) will produce an error when interpreting the packed
  // integer field as a non packed string field. This is since it seems
  // to not have implemented the protobuf parser spec of being able to
  // "parse repeated fields that were compiled as packed as if they were not
  // packed, and vice versa". Ref:
  // https://github.com/protocolbuffers/protobuf/issues/3571#issuecomment-575543049
  repeated uint64 included_handles = 3 [jstype = JS_STRING, packed = false];
}

message MessageDequeued {
  uint64 node_id = 1 [jstype = JS_STRING];

  uint64 channel_id = 2 [jstype = JS_STRING];

  repeated uint64 acquired_handles = 3 [jstype = JS_STRING, packed = false];
}
