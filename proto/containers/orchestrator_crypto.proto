//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.containers.v1;

import "oak_crypto/proto/v1/crypto.proto";

// Choice between a key generated by the enclave instance and the key distributed to the enclave
// group with Key Provisioning.
enum KeyOrigin {
  INSTANCE = 0;
  GROUP = 1;
}

message GetSessionKeysRequest {
  KeyOrigin key_origin = 1;
  // Ephemeral Diffie-Hellman client public key that is needed to derive a session key.
  bytes serialized_encapsulated_public_key = 2;
}

message GetSessionKeysResponse {
  // Session keys for decrypting client requests and encrypting enclave responses.
  oak.crypto.v1.CryptoContext context = 1;
}

message GetSignatureRequest {
  KeyOrigin key_origin = 1;
  bytes data = 2;
}

message GetSignatureResponse {
  bytes signature = 1;
}

service OrchestratorCrypto {
  // Returns session keys for decrypting client requests and encrypting enclave responses.
  rpc GetSessionKeys(GetSessionKeysRequest) returns (GetSessionKeysResponse) {}

  // Sign arbitrary data with a signing key.
  // TODO(#4504): Implement data signing.
  rpc GetSignature(GetSignatureRequest) returns (GetSignatureResponse) {}
}
