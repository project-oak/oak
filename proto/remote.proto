//
// Copyright 2020 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.remote.encap;

import "google/protobuf/descriptor.proto";
import "oak_abi/proto/label.proto";
import "oak_abi/proto/application.proto";

// Request matching a call to the `node_create` function in the runtime.
message NodeCreateRequest {
  // Name of the node
  string name = 1;
  // Node configuration
  oak.application.NodeConfiguration node_configuration = 2;
  // Label of the node
  oak.label.Label label = 3;
  // The initial handle is a handle to a channel on the remote runtime
  fixed64 initial_handle = 4;
}

message NodeCreateResponse {
  // A mapping that maps the read handles on the local (sender) Runtime to their corresponding write
  // handles on the remote (server) Runtime. The mapping only involves the handles that have been in
  // the init_message in the request, as well as the node's startup handle.
  map<fixed64, fixed64> handles_map = 1;
}

message ChannelWriteRequest {
  fixed64 write_handle = 1;
  // Bytes content of the message
  bytes data = 2;
  // Handles content of the message. Handles may be on any of the runtime instances in the whole system.
  repeated RemoteHandle handles = 3;
}

message ChannelWriteResponse {
  // A mapping that maps the read handles on the local (sender) Runtime to their corresponding write
  // handles on the remote (server) Runtime. The mapping only involves the handles that have been in
  // the message in the ChannelWriteRequest.
  map<fixed64, fixed64> handles_map = 1;
}

// Represents a handle, on a potentially remote runtime.
message RemoteHandle {
  fixed64 raw_handle = 1;
  // Direction of the channel half associated with this handle.
  Direction direction = 2;
  // label of the corresponding channel
  oak.label.Label label = 3;
  // The address of the remote runtime that owns the corresponding channel half.
  string runtime_addr = 4;
}

// Direction of a channel half
enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    READ = 1;
    WRITE = 2;
}
