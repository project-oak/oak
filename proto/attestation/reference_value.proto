
//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.attestation.v1;

import "proto/digest.proto";

option go_package = "proto/oak/attestation/v1";
option java_multiple_files = true;
option java_package = "com.google.oak.attestation.v1";

message ReferenceValues {
  RootLayerReferenceValues root_layer = 1;                // Layer 0
  KernelLayerReferenceValues kernel_layer = 2;            // Layer 1
  repeated CustomLayerReferenceValues custom_layers = 3;  // Layers 2 through N
}

message RootLayerReferenceValues {
  // Switches between AMD and Intel based on TeePlatform value.
  AmdSevReferenceValues amd_sev = 1;
  IntelTdxReferenceValues intel_tdx = 2;
}

message AmdSevReferenceValues {
  bytes amd_root_public_key = 1;

  // TBD: Add conditions on all kinds of fields contained in the
  // attestation report.
  string firmware_version = 2;

  // If true, will skip the check that the TEE is not in debug mode.
  bool allow_debug = 3;

  optional LogEntryVerification stage0_log_entry = 4;
}

message IntelTdxReferenceValues {
  // TBD
}

// Verifies the log entry, including signatures and the digest.
message LogEntryVerification {
  // The endorser’s public signing key for signature verification.
  bytes endorser_public_key = 1;

  // Rekor’s public signing key for signature verification.
  bytes rekor_public_key = 2;
}

// Verifies that the field contains at least one of the given digests.
// No checks are performed if this is empty.
message Digests {
  repeated RawDigest digests = 1;
}

// Reference values of the kernel layer, as measured by stage0.
message KernelLayerReferenceValues {
  // Verifies the kernel binary based on endorsement.
  optional LogEntryVerification log_entry = 1;

  // Explicitly verifies digests in addition to log entry verification.
  // Note that endorsement-based digest verification is implicitly contained
  // in the log entry verification.
  optional Digests code = 2;

  // Verifies that the command line is equivalent to a specified one (e.g. up
  // to certain permutations).
  repeated string kernel_cmd_line = 3;

  optional Digests kernel_setup_data = 4;

  optional Digests init_ram_fs = 5;

  repeated Digests memory_map = 6;

  optional Digests acpi = 7;
}

message CustomLayerReferenceValues {
  // Verifies the layer binary based on endorsement.
  optional LogEntryVerification log_entry = 1;

  // Explicitly verifies digests in addition to log entry verification.
  // Note that endorsement-based digest verification is implicitly contained
  // in the log entry verification.
  optional Digests code = 2;

  optional Digests configuration = 3;
}
