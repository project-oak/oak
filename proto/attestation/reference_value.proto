
//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.attestation.v1;

import "proto/digest.proto";

option go_package = "proto/oak/attestation/v1";
option java_multiple_files = true;
option java_package = "com.google.oak.attestation.v1";

// Verifies the transparency log entry, including signatures and the digest.
message EndorsementReferenceValue {
  // The endorser's public signing key for signature verification.
  bytes endorser_public_key = 1;

  // Rekor's public signing key for signature verification.
  bytes rekor_public_key = 2;
}

message BinaryReferenceValue {
  oneof type {
    // Verifies the endorsement of the underlying binary.
    EndorsementReferenceValue endorsement = 1;

    // Explicitly verifies digests if the client has them.
    Digests digests = 2;
  }
}

// Reference value for a file including its digests.
message FileReferenceValue {
  // Allowable digests for the file.
  Digests digests = 1;

  // Absolute path to the file in question, or just the file name. Relative paths are
  // not supported.
  string path = 2;
}

// Verifies that a particular string is equal to at least one of the specified ones.
// No checks are performed if this is empty.
message StringReferenceValue {
  repeated string values = 1;
}

message RootLayerReferenceValues {
  // Switches between AMD and Intel based on TeePlatform value.
  AmdSevReferenceValues amd_sev = 1;
  IntelTdxReferenceValues intel_tdx = 2;
}

message AmdSevReferenceValues {
  bytes amd_root_public_key = 1;
  // TBD: Add conditions on all kinds of fields contained in the
  // attestation report.
  string firmware_version = 2;

  // If true, will skip the check that the TEE is not in debug mode.
  bool allow_debug = 3;

  // Verifies the stage0 binary implicitly contained in the root layer.
  BinaryReferenceValue stage0 = 4;
}

message IntelTdxReferenceValues {
  // TBD
}

// Verifies that the field contains at least one of the given digests.
// No checks are performed if this is empty. A match in at least one
// digest is considered a success.
message Digests {
  repeated RawDigest digests = 1;
}

// Reference values of the kernel layer, as measured by stage0.
message KernelLayerReferenceValues {
  // Verifies the kernel binary based on endorsement.
  BinaryReferenceValue kernel_image = 1;

  // Compare command line as string until further notice.
  StringReferenceValue kernel_cmd_line = 2;

  BinaryReferenceValue kernel_setup_data = 3;

  BinaryReferenceValue init_ram_fs = 4;

  BinaryReferenceValue memory_map = 5;

  BinaryReferenceValue acpi = 6;
}

message SystemLayerReferenceValues {
  // Verifies the system image binary based on endorsement.
  BinaryReferenceValue system_image = 1;

  // Configuration measurements.
  BinaryReferenceValue configuration = 2;
}

// Represents an application running under Oak Restricted Kernel.
message ApplicationLayerReferenceValues {
  // Verifies the binary based on endorsement.
  BinaryReferenceValue binary = 1;

  // Configuration measurements.
  BinaryReferenceValue configuration = 2;
}

message ContainerLayerReferenceValues {
  // Verifies the binary based on endorsement.
  BinaryReferenceValue binary = 1;

  // Configuration measurements.
  BinaryReferenceValue configuration = 2;
}

message OakRestrictedKernelReferenceValues {
  RootLayerReferenceValues root_layer = 1;
  KernelLayerReferenceValues kernel_layer = 2;
  ApplicationLayerReferenceValues application_layer = 3;
}

message OakContainersReferenceValues {
  RootLayerReferenceValues root_layer = 1;
  KernelLayerReferenceValues kernel_layer = 2;
  SystemLayerReferenceValues system_layer = 3;
  ContainerLayerReferenceValues container_layer = 4;
}

message CBLayerReferenceValues {
  string layer_name = 1;
  repeated FileReferenceValue files = 2;
  StringReferenceValue config = 3;
  StringReferenceValue command_line = 4;
}

message CBReferenceValues {
  repeated CBLayerReferenceValues layers = 1;
}

message ReferenceValues {
  oneof type {
    OakRestrictedKernelReferenceValues oak_restricted_kernel = 1;
    OakContainersReferenceValues oak_containers = 2;
    CBReferenceValues cb = 3;
  }
}
