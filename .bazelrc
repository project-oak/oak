# Copied from https://github.com/google/asylo/blob/v0.3.4/.bazelrc

build:asylo --crosstool_top=@com_google_asylo_toolchain//toolchain:crosstool
build:asylo --dynamic_mode=off
build:asylo --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:asylo --fission=no
build:asylo --custom_malloc=@com_google_asylo_toolchain//toolchain:malloc
build:asylo --define=grpc_no_ares=true

build:sgx --config=asylo
build:sgx --define=ASYLO_SGX=1
build:sgx --define=SGX_SIM=0

build:sgx-sim --config=asylo
build:sgx-sim --define=ASYLO_SGX=1
build:sgx-sim --define=SGX_SIM=1

# The enclave simulation backend currently makes use of the SGX simulator.
# However, this is subject to change and users of this config should not
# make assumptions about it being related to SGX.
build:enc-sim --config=sgx-sim

# Toolchain for compiling C++ code to wasm32.
build:wasm32 --crosstool_top=//toolchain:clang
build:wasm32 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:wasm32 --cpu=wasm32

# Use a different symlink prefix for wasm-based artifacts.
build:wasm32 --symlink_prefix=bazel-wasm-

build:clang --crosstool_top=//toolchain:clang
build:clang --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:clang --cpu=k8
build:clang --copt=-Wno-error=sign-compare

# Use a different symlink prefix for clang-based artifacts.
build:clang --symlink_prefix=bazel-clang-

# Emscripten toolchain for WASM.
build:emscripten --crosstool_top=//toolchain:emscripten
build:emscripten --cpu=wasm
build:emscripten --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:emscripten --cxxopt="-std=c++11"
build:emscripten --cxxopt="-fno-rtti"
build:emscripten --cxxopt="-fno-exceptions"
build:emscripten --cxxopt="-fomit-frame-pointer"
build:emscripten --cxxopt="-ffast-math"
build:emscripten --copt="-ffast-math"
build:emscripten --spawn_strategy=local

# Address Sanitizer.
# bazel build --config=asan
build:asan --config=clang
build:asan --strip=never
build:asan --copt=-fsanitize=address
build:asan --copt=-DADDRESS_SANITIZER
build:asan --copt=-O1
build:asan --copt=-g
build:asan --copt=-fno-omit-frame-pointer
build:asan --linkopt=-fsanitize=address
build:asan --compilation_mode=dbg

# Thread Sanitizer.
# bazel build --config=tsan
build:tsan --config=clang
build:tsan --strip=never
build:tsan --copt=-fsanitize=thread
build:tsan --copt=-DTHREAD_SANITIZER
build:tsan --copt=-DDYNAMIC_ANNOTATIONS_ENABLED=1
build:tsan --copt=-DDYNAMIC_ANNOTATIONS_EXTERNAL_IMPL=1
build:tsan --copt=-O1
build:tsan --copt=-g
build:tsan --copt=-fno-omit-frame-pointer
build:tsan --linkopt=-fsanitize=thread
build:tsan --compilation_mode=dbg
# Turn off TSAN checking of atomics in `bazel test`, due to false positive on absl::MutexLock:
#    https://github.com/google/sanitizers/issues/953
# Note this does not affect `bazel run`: use `export TSAN_OPTIONS=report_atomic_races=0`
build:tsan --test_env=TSAN_OPTIONS=report_atomic_races=0

# Memory Sanitizer.
# bazel build --config=msan
build:msan --config=clang
build:msan --strip=never
build:msan --copt=-fsanitize=memory
build:msan --copt=-DADDRESS_SANITIZER
build:msan --copt=-O1
build:msan --copt=-fno-omit-frame-pointer
build:msan --linkopt=-fsanitize=memory

# Undefined Behavior Sanitizer.
# bazel build --config=ubsan
build:ubsan --config=clang
build:ubsan --strip=never
build:ubsan --copt=-fsanitize=undefined
build:ubsan --copt=-O1
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --linkopt=-fsanitize=undefined
build:ubsan --linkopt=-lubsan

# Fuzzer.
# See https://llvm.org/docs/LibFuzzer.html.
# bazel build --config=fuzz
build:fuzz --config=clang
build:fuzz --strip=never
build:fuzz --copt=-fsanitize=fuzzer,address
build:fuzz --copt=-O1
build:fuzz --copt=-g
build:fuzz --copt=-fno-omit-frame-pointer
build:fuzz --compilation_mode=dbg
build:fuzz --linkopt=-fsanitize=fuzzer,address

test --test_output=all
