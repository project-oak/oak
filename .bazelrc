# Copied from https://github.com/google/asylo/blob/v0.3.4/.bazelrc

build:asylo --crosstool_top=@com_google_asylo_toolchain//toolchain:crosstool
build:asylo --dynamic_mode=off
build:asylo --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:asylo --fission=no
build:asylo --custom_malloc=@com_google_asylo_toolchain//toolchain:malloc
build:asylo --define=grpc_no_ares=true

build:sgx --config=asylo
build:sgx --define=ASYLO_SGX=1
build:sgx --define=SGX_SIM=0

build:sgx-sim --config=asylo
build:sgx-sim --define=ASYLO_SGX=1
build:sgx-sim --define=SGX_SIM=1

# The enclave simulation backend currently makes use of the SGX simulator.
# However, this is subject to change and users of this config should not
# make assumptions about it being related to SGX.
build:enc-sim --config=sgx-sim

# Toolchain for compiling C++ code to wasm32.
build:wasm32 --crosstool_top=//toolchain:clang
build:wasm32 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:wasm32 --cpu=wasm32

# Use a different symlink prefix for wasm-based artifacts.
build:wasm32 --symlink_prefix=bazel-wasm-

build:clang --crosstool_top=//toolchain:clang
build:clang --cpu=k8

# Use a different symlink prefix for clang-based artifacts.
build:clang --symlink_prefix=bazel-clang-

# Address sanitizer
# To use it: bazel build --config asan
build:asan --crosstool_top=//toolchain:clang
build:asan --cpu=k8
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

# Thread sanitizer
# bazel build --config tsan
build:tsan --crosstool_top=//toolchain:clang
build:tsan --cpu=k8
build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -DTHREAD_SANITIZER
build:tsan --copt -DDYNAMIC_ANNOTATIONS_ENABLED=1
build:tsan --copt -DDYNAMIC_ANNOTATIONS_EXTERNAL_IMPL=1
build:tsan --copt -O1
build:tsan --copt -g
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread
# Turn off TSAN checking of atomics in `bazel test`, due to false positive on absl::MutexLock:
#    https://github.com/google/sanitizers/issues/953
# Note this does not affect `bazel run`: use `export TSAN_OPTIONS=report_atomic_races=0`
build:tsan --test_env=TSAN_OPTIONS=report_atomic_races=0

# --config msan: Memory sanitizer
build:msan --crosstool_top=//toolchain:clang
build:msan --cpu=k8
build:msan --strip=never
build:msan --copt -fsanitize=memory
build:msan --copt -DADDRESS_SANITIZER
build:msan --copt -O1
build:msan --copt -fno-omit-frame-pointer
build:msan --linkopt -fsanitize=memory

# --config ubsan: Undefined Behavior Sanitizer
build:ubsan --crosstool_top=//toolchain:clang
build:ubsan --cpu=k8
build:ubsan --strip=never
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -O1
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# --config fuzzer: Fuzzer
build:fuzzer --crosstool_top=//toolchain:clang
build:fuzzer --cpu=k8
build:fuzzer --strip=never
build:fuzzer --copt -fsanitize=fuzzer,address
build:fuzzer --copt -O1
build:fuzzer --copt -g
build:fuzzer --copt -fno-omit-frame-pointer
build:fuzzer --linkopt -fsanitize=fuzzer,address

test --test_output=all
