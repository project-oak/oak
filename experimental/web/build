#!/bin/bash
#
# Build browser introspection client.

#######################################
# Copies a directory without overwriting identical files at the destination.
# Arguments:
#   A source directory, a destination directory.
#######################################
function copy_directory_nondestructively() {
  local SOURCE_DIR="$1"
  local DESTINTAION_DIR="$2"

  for file in $( (cd "${SOURCE_DIR}" && find . -type f) ); do
    local SOURCE_FILE="${SOURCE_DIR}/${file}"
    local DESTINATION_FILE="${DESTINTAION_DIR}/${file}"
    if ! cmp --silent "${SOURCE_FILE}" "${DESTINATION_FILE}"; then
      mkdir -p "$(dirname "${DESTINATION_FILE}")"
      cp -f "${SOURCE_FILE}" "${DESTINATION_FILE}"
    fi
  done
}

# Install npm modules if needed
readonly CURRENT_PACKAGE_LOCK="./package-lock.json"
readonly LAST_INSTALLED_PACKAGE_LOCK="./node_modules/.cache/last-install-package-lock.json"
if ! cmp --silent "$CURRENT_PACKAGE_LOCK" "$LAST_INSTALLED_PACKAGE_LOCK"; then
  npm ci
fi

if [[ "$1" == 'development' ]]; then
  # Run a webpack dev server
  readonly WEBPACK_TMP_OUT_DIR="./dist_tmp"

  npx webpack-dev-server --env.NODE_ENV=development --env.OUTPUT_PATH="${WEBPACK_TMP_OUT_DIR}"

  rm -rf "${WEBPACK_TMP_OUT_DIR}"
else
  # Build JavaScript bundle
  readonly WEBPACK_TMP_OUT_DIR="./dist_tmp"
  readonly WEBPACK_OUT_DIR="./dist"

  mkdir -p "${WEBPACK_TMP_OUT_DIR}"
  mkdir -p "${WEBPACK_OUT_DIR}"

  npx webpack --env.NODE_ENV="production" --env.OUTPUT_PATH="${WEBPACK_TMP_OUT_DIR}"

  # Copy each generated file into the actual output directory, but do not
  # overwrite identical files. Preserves the last modified date of unchanged
  # outputs, thereby preventing cargo from rebuilding crates that include them.
  # Ref: https://github.com/project-oak/oak/issues/1456
  copy_directory_nondestructively "${WEBPACK_TMP_OUT_DIR}" "${WEBPACK_OUT_DIR}"

  # Finally delete the temporary output directory.
  rm -rf "${WEBPACK_TMP_OUT_DIR}"
fi
