//
// Copyright 2022 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/* Generated with:
 * $ bindgen --no-layout-tests --use-core \
 *   --ctypes-prefix c_types include/public/arch-x86/hvm/start_info.h
 */

use kernel::boot::{BootInfo, E820Entry, E820EntryType};

impl E820Entry for hvm_memmap_table_entry {
    fn entry_type(&self) -> E820EntryType {
        E820EntryType::from_repr(self.type_).unwrap()
    }

    fn addr(&self) -> usize {
        self.addr.try_into().unwrap()
    }

    fn size(&self) -> usize {
        self.size.try_into().unwrap()
    }
}

impl BootInfo<hvm_memmap_table_entry> for hvm_start_info {
    fn protocol(&self) -> &str {
        "PVH Boot Protocol"
    }

    fn e820_table(&self) -> &[hvm_memmap_table_entry] {
        assert!(self.version >= 1 && self.memmap_paddr != 0);
        // This is safe as it follows the PVH protocol, and we panic above if the pointer is clearly
        // invalid or we're using an incompatible PVH protocol version.
        unsafe {
            core::slice::from_raw_parts(
                self.memmap_paddr as *const hvm_memmap_table_entry,
                self.memmap_entries.try_into().unwrap(),
            )
        }
    }
}

/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_start_info {
    pub magic: u32,
    pub version: u32,
    pub flags: u32,
    pub nr_modules: u32,
    pub modlist_paddr: u64,
    pub cmdline_paddr: u64,
    pub rsdp_paddr: u64,
    pub memmap_paddr: u64,
    pub memmap_entries: u32,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_memmap_table_entry {
    pub addr: u64,
    pub size: u64,
    pub type_: u32,
    pub reserved: u32,
}
