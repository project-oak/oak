#!/usr/bin/env bash

# Thin shell script invoked as a cargo runner to run the compiled efi firmware
# in QEMU. Detects if kvm is supported, and sets qemu flags based on that.
# Instead of this single runner script it would be preferable to use a different
# runner based on whether the kvm feature is set. However, cargo does not
# currently allow this. Ref: https://github.com/rust-lang/cargo/issues/8170

readonly TARGET=$1

qemu_flags=(
  '-nodefaults'
  '-nographic'
  '-bios' '/usr/share/OVMF/OVMF_CODE.fd'
  '-serial' 'file:target/console.log'
  '-serial' 'stdio'
  '-machine' 'q35'
  '-device' 'isa-debug-exit,iobase=0xf4,iosize=0x04'
)

# Use kvm if supported, as it is required for certain features. Note
# that hosts that support kvm still need to disable the default
# `support_emulated_runner` feature in cargo to include code that requires kvm
# in the compiled firmware. Ideally this check would rely on the cargo
# flag itself, enabling kvm if it is disabled. However cargo does not expose
# which flags are set to the runner. Ref: https://doc.rust-lang.org/cargo/reference/environment-variables.html
if [[ -e "/dev/kvm" ]]; then
  qemu_flags+=(
    '-enable-kvm'
    '-cpu' 'IvyBridge-IBRS,enforce'
  )
fi

qemu-system-x86_64 "${qemu_flags[@]}" -kernel "${TARGET}"

