static_resources:
  listeners:
    # Accepts TCP streams and tunnels each of them over HTTP streams.
    # https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/upgrades#tunneling-tcp-over-http
    - name: client_listener
      address:
        # Client proxy address to listen on.
        socket_address:
          protocol: TCP
          address: 127.0.0.1
          port_value: 8000
      filter_chains:
        - filters:
            - name: tcp
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp_stats
                cluster: client_cluster
                tunneling_config:
                  # Hostname used in HTTP requests.
                  hostname: envoy-proxy-example-62sa4xcfia-nw.a.run.app
                  # Send each TCP segment in POST HTTP requests.
                  use_post: true

  clusters:
    # Connects to the remote server proxy via Cloud Run, which terminated the TLS connection.
    - name: client_cluster
      connect_timeout: 5s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      load_assignment:
        cluster_name: client_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    # Remote server proxy address to connect to.
                    socket_address:
                      address: envoy-proxy-example-62sa4xcfia-nw.a.run.app
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca: { 'filename': '/etc/ssl/certs/ca-certificates.crt' }
          # SNI string to use when creating TLS backend connections.
          sni: envoy-proxy-example-62sa4xcfia-nw.a.run.app
