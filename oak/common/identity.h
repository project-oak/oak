// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oak_abi/proto/identity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oak_5fabi_2fproto_2fidentity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oak_5fabi_2fproto_2fidentity_2eproto

#include <google/protobuf/port_def.inc>
#include <limits>
#include <string>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oak_5fabi_2fproto_2fidentity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oak_5fabi_2fproto_2fidentity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1] PROTOBUF_SECTION_VARIABLE(
      protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_oak_5fabi_2fproto_2fidentity_2eproto;
namespace oak {
namespace identity {
class SignedChallenge;
class SignedChallengeDefaultTypeInternal;
extern SignedChallengeDefaultTypeInternal _SignedChallenge_default_instance_;
}  // namespace identity
}  // namespace oak
PROTOBUF_NAMESPACE_OPEN
template <>
::oak::identity::SignedChallenge* Arena::CreateMaybeMessage<::oak::identity::SignedChallenge>(
    Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oak {
namespace identity {

// ===================================================================

class SignedChallenge
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:oak.identity.SignedChallenge) */ {
 public:
  SignedChallenge();
  virtual ~SignedChallenge();

  SignedChallenge(const SignedChallenge& from);
  SignedChallenge(SignedChallenge&& from) noexcept : SignedChallenge() {
    *this = ::std::move(from);
  }

  inline SignedChallenge& operator=(const SignedChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedChallenge& operator=(SignedChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedChallenge* internal_default_instance() {
    return reinterpret_cast<const SignedChallenge*>(&_SignedChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(SignedChallenge& a, SignedChallenge& b) { a.Swap(&b); }
  inline void Swap(SignedChallenge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedChallenge* New() const final { return CreateMaybeMessage<SignedChallenge>(nullptr); }

  SignedChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedChallenge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedChallenge& from);
  void MergeFrom(const SignedChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr,
                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oak.identity.SignedChallenge";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_oak_5fabi_2fproto_2fidentity_2eproto);
    return ::descriptor_table_oak_5fabi_2fproto_2fidentity_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedHashFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // bytes signed_hash = 1;
  void clear_signed_hash();
  const std::string& signed_hash() const;
  void set_signed_hash(const std::string& value);
  void set_signed_hash(std::string&& value);
  void set_signed_hash(const char* value);
  void set_signed_hash(const void* value, size_t size);
  std::string* mutable_signed_hash();
  std::string* release_signed_hash();
  void set_allocated_signed_hash(std::string* signed_hash);

 private:
  const std::string& _internal_signed_hash() const;
  void _internal_set_signed_hash(const std::string& value);
  std::string* _internal_mutable_signed_hash();

 public:
  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

 private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();

 public:
  // @@protoc_insertion_point(class_scope:oak.identity.SignedChallenge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oak_5fabi_2fproto_2fidentity_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignedChallenge

// bytes signed_hash = 1;
inline void SignedChallenge::clear_signed_hash() {
  signed_hash_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignedChallenge::signed_hash() const {
  // @@protoc_insertion_point(field_get:oak.identity.SignedChallenge.signed_hash)
  return _internal_signed_hash();
}
inline void SignedChallenge::set_signed_hash(const std::string& value) {
  _internal_set_signed_hash(value);
  // @@protoc_insertion_point(field_set:oak.identity.SignedChallenge.signed_hash)
}
inline std::string* SignedChallenge::mutable_signed_hash() {
  // @@protoc_insertion_point(field_mutable:oak.identity.SignedChallenge.signed_hash)
  return _internal_mutable_signed_hash();
}
inline const std::string& SignedChallenge::_internal_signed_hash() const {
  return signed_hash_.GetNoArena();
}
inline void SignedChallenge::_internal_set_signed_hash(const std::string& value) {
  signed_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignedChallenge::set_signed_hash(std::string&& value) {
  signed_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oak.identity.SignedChallenge.signed_hash)
}
inline void SignedChallenge::set_signed_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signed_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oak.identity.SignedChallenge.signed_hash)
}
inline void SignedChallenge::set_signed_hash(const void* value, size_t size) {
  signed_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oak.identity.SignedChallenge.signed_hash)
}
inline std::string* SignedChallenge::_internal_mutable_signed_hash() {
  return signed_hash_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedChallenge::release_signed_hash() {
  // @@protoc_insertion_point(field_release:oak.identity.SignedChallenge.signed_hash)

  return signed_hash_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedChallenge::set_allocated_signed_hash(std::string* signed_hash) {
  if (signed_hash != nullptr) {
  } else {
  }
  signed_hash_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_hash);
  // @@protoc_insertion_point(field_set_allocated:oak.identity.SignedChallenge.signed_hash)
}

// bytes public_key = 2;
inline void SignedChallenge::clear_public_key() {
  public_key_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignedChallenge::public_key() const {
  // @@protoc_insertion_point(field_get:oak.identity.SignedChallenge.public_key)
  return _internal_public_key();
}
inline void SignedChallenge::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:oak.identity.SignedChallenge.public_key)
}
inline std::string* SignedChallenge::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:oak.identity.SignedChallenge.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SignedChallenge::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void SignedChallenge::_internal_set_public_key(const std::string& value) {
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignedChallenge::set_public_key(std::string&& value) {
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oak.identity.SignedChallenge.public_key)
}
inline void SignedChallenge::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oak.identity.SignedChallenge.public_key)
}
inline void SignedChallenge::set_public_key(const void* value, size_t size) {
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oak.identity.SignedChallenge.public_key)
}
inline std::string* SignedChallenge::_internal_mutable_public_key() {
  return public_key_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedChallenge::release_public_key() {
  // @@protoc_insertion_point(field_release:oak.identity.SignedChallenge.public_key)

  return public_key_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedChallenge::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
  } else {
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  public_key);
  // @@protoc_insertion_point(field_set_allocated:oak.identity.SignedChallenge.public_key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace identity
}  // namespace oak

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oak_5fabi_2fproto_2fidentity_2eproto
