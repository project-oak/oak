// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `application.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ApplicationConfiguration {
    // message fields
    pub node_configs: ::protobuf::RepeatedField<NodeConfiguration>,
    pub initial_node_config_name: ::std::string::String,
    pub initial_entrypoint_name: ::std::string::String,
    pub grpc_port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApplicationConfiguration {
    fn default() -> &'a ApplicationConfiguration {
        <ApplicationConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationConfiguration {
    pub fn new() -> ApplicationConfiguration {
        ::std::default::Default::default()
    }

    // repeated .oak.NodeConfiguration node_configs = 1;


    pub fn get_node_configs(&self) -> &[NodeConfiguration] {
        &self.node_configs
    }
    pub fn clear_node_configs(&mut self) {
        self.node_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_configs(&mut self, v: ::protobuf::RepeatedField<NodeConfiguration>) {
        self.node_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_configs(&mut self) -> &mut ::protobuf::RepeatedField<NodeConfiguration> {
        &mut self.node_configs
    }

    // Take field
    pub fn take_node_configs(&mut self) -> ::protobuf::RepeatedField<NodeConfiguration> {
        ::std::mem::replace(&mut self.node_configs, ::protobuf::RepeatedField::new())
    }

    // string initial_node_config_name = 2;


    pub fn get_initial_node_config_name(&self) -> &str {
        &self.initial_node_config_name
    }
    pub fn clear_initial_node_config_name(&mut self) {
        self.initial_node_config_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_initial_node_config_name(&mut self, v: ::std::string::String) {
        self.initial_node_config_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_node_config_name(&mut self) -> &mut ::std::string::String {
        &mut self.initial_node_config_name
    }

    // Take field
    pub fn take_initial_node_config_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.initial_node_config_name, ::std::string::String::new())
    }

    // string initial_entrypoint_name = 3;


    pub fn get_initial_entrypoint_name(&self) -> &str {
        &self.initial_entrypoint_name
    }
    pub fn clear_initial_entrypoint_name(&mut self) {
        self.initial_entrypoint_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_initial_entrypoint_name(&mut self, v: ::std::string::String) {
        self.initial_entrypoint_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_entrypoint_name(&mut self) -> &mut ::std::string::String {
        &mut self.initial_entrypoint_name
    }

    // Take field
    pub fn take_initial_entrypoint_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.initial_entrypoint_name, ::std::string::String::new())
    }

    // int32 grpc_port = 4;


    pub fn get_grpc_port(&self) -> i32 {
        self.grpc_port
    }
    pub fn clear_grpc_port(&mut self) {
        self.grpc_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_grpc_port(&mut self, v: i32) {
        self.grpc_port = v;
    }
}

impl ::protobuf::Message for ApplicationConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.node_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_configs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.initial_node_config_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.initial_entrypoint_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.grpc_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.node_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.initial_node_config_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.initial_node_config_name);
        }
        if !self.initial_entrypoint_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.initial_entrypoint_name);
        }
        if self.grpc_port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.grpc_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.node_configs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.initial_node_config_name.is_empty() {
            os.write_string(2, &self.initial_node_config_name)?;
        }
        if !self.initial_entrypoint_name.is_empty() {
            os.write_string(3, &self.initial_entrypoint_name)?;
        }
        if self.grpc_port != 0 {
            os.write_int32(4, self.grpc_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApplicationConfiguration {
        ApplicationConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeConfiguration>>(
                    "node_configs",
                    |m: &ApplicationConfiguration| { &m.node_configs },
                    |m: &mut ApplicationConfiguration| { &mut m.node_configs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "initial_node_config_name",
                    |m: &ApplicationConfiguration| { &m.initial_node_config_name },
                    |m: &mut ApplicationConfiguration| { &mut m.initial_node_config_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "initial_entrypoint_name",
                    |m: &ApplicationConfiguration| { &m.initial_entrypoint_name },
                    |m: &mut ApplicationConfiguration| { &mut m.initial_entrypoint_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "grpc_port",
                    |m: &ApplicationConfiguration| { &m.grpc_port },
                    |m: &mut ApplicationConfiguration| { &mut m.grpc_port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApplicationConfiguration>(
                    "ApplicationConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApplicationConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ApplicationConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApplicationConfiguration,
        };
        unsafe {
            instance.get(ApplicationConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ApplicationConfiguration {
    fn clear(&mut self) {
        self.node_configs.clear();
        self.initial_node_config_name.clear();
        self.initial_entrypoint_name.clear();
        self.grpc_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApplicationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicationConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeConfiguration {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<NodeConfiguration_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeConfiguration {
    fn default() -> &'a NodeConfiguration {
        <NodeConfiguration as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum NodeConfiguration_oneof_config_type {
    wasm_config(WebAssemblyConfiguration),
    log_config(LogConfiguration),
    storage_config(StorageProxyConfiguration),
    grpc_client_config(GrpcClientConfiguration),
}

impl NodeConfiguration {
    pub fn new() -> NodeConfiguration {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .oak.WebAssemblyConfiguration wasm_config = 2;


    pub fn get_wasm_config(&self) -> &WebAssemblyConfiguration {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(ref v)) => v,
            _ => WebAssemblyConfiguration::default_instance(),
        }
    }
    pub fn clear_wasm_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_wasm_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_wasm_config(&mut self, v: WebAssemblyConfiguration) {
        self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_wasm_config(&mut self) -> &mut WebAssemblyConfiguration {
        if let ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(WebAssemblyConfiguration::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_wasm_config(&mut self) -> WebAssemblyConfiguration {
        if self.has_wasm_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(v)) => v,
                _ => panic!(),
            }
        } else {
            WebAssemblyConfiguration::new()
        }
    }

    // .oak.LogConfiguration log_config = 3;


    pub fn get_log_config(&self) -> &LogConfiguration {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(ref v)) => v,
            _ => LogConfiguration::default_instance(),
        }
    }
    pub fn clear_log_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_log_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_config(&mut self, v: LogConfiguration) {
        self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_config(&mut self) -> &mut LogConfiguration {
        if let ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(LogConfiguration::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_config(&mut self) -> LogConfiguration {
        if self.has_log_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(v)) => v,
                _ => panic!(),
            }
        } else {
            LogConfiguration::new()
        }
    }

    // .oak.StorageProxyConfiguration storage_config = 4;


    pub fn get_storage_config(&self) -> &StorageProxyConfiguration {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(ref v)) => v,
            _ => StorageProxyConfiguration::default_instance(),
        }
    }
    pub fn clear_storage_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_storage_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_storage_config(&mut self, v: StorageProxyConfiguration) {
        self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_storage_config(&mut self) -> &mut StorageProxyConfiguration {
        if let ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(StorageProxyConfiguration::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_storage_config(&mut self) -> StorageProxyConfiguration {
        if self.has_storage_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(v)) => v,
                _ => panic!(),
            }
        } else {
            StorageProxyConfiguration::new()
        }
    }

    // .oak.GrpcClientConfiguration grpc_client_config = 5;


    pub fn get_grpc_client_config(&self) -> &GrpcClientConfiguration {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(ref v)) => v,
            _ => GrpcClientConfiguration::default_instance(),
        }
    }
    pub fn clear_grpc_client_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_grpc_client_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_grpc_client_config(&mut self, v: GrpcClientConfiguration) {
        self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_client_config(&mut self) -> &mut GrpcClientConfiguration {
        if let ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(GrpcClientConfiguration::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_grpc_client_config(&mut self) -> GrpcClientConfiguration {
        if self.has_grpc_client_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcClientConfiguration::new()
        }
    }
}

impl ::protobuf::Message for NodeConfiguration {
    fn is_initialized(&self) -> bool {
        if let Some(NodeConfiguration_oneof_config_type::wasm_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(NodeConfiguration_oneof_config_type::log_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(NodeConfiguration_oneof_config_type::storage_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(NodeConfiguration_oneof_config_type::grpc_client_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::wasm_config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::log_config(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::storage_config(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(NodeConfiguration_oneof_config_type::grpc_client_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &NodeConfiguration_oneof_config_type::wasm_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &NodeConfiguration_oneof_config_type::log_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &NodeConfiguration_oneof_config_type::storage_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &NodeConfiguration_oneof_config_type::grpc_client_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &NodeConfiguration_oneof_config_type::wasm_config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &NodeConfiguration_oneof_config_type::log_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &NodeConfiguration_oneof_config_type::storage_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &NodeConfiguration_oneof_config_type::grpc_client_config(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeConfiguration {
        NodeConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &NodeConfiguration| { &m.name },
                    |m: &mut NodeConfiguration| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WebAssemblyConfiguration>(
                    "wasm_config",
                    NodeConfiguration::has_wasm_config,
                    NodeConfiguration::get_wasm_config,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogConfiguration>(
                    "log_config",
                    NodeConfiguration::has_log_config,
                    NodeConfiguration::get_log_config,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StorageProxyConfiguration>(
                    "storage_config",
                    NodeConfiguration::has_storage_config,
                    NodeConfiguration::get_storage_config,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcClientConfiguration>(
                    "grpc_client_config",
                    NodeConfiguration::has_grpc_client_config,
                    NodeConfiguration::get_grpc_client_config,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeConfiguration>(
                    "NodeConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<NodeConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeConfiguration,
        };
        unsafe {
            instance.get(NodeConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for NodeConfiguration {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAssemblyConfiguration {
    // message fields
    pub module_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAssemblyConfiguration {
    fn default() -> &'a WebAssemblyConfiguration {
        <WebAssemblyConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl WebAssemblyConfiguration {
    pub fn new() -> WebAssemblyConfiguration {
        ::std::default::Default::default()
    }

    // bytes module_bytes = 1;


    pub fn get_module_bytes(&self) -> &[u8] {
        &self.module_bytes
    }
    pub fn clear_module_bytes(&mut self) {
        self.module_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.module_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.module_bytes
    }

    // Take field
    pub fn take_module_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.module_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WebAssemblyConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.module_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.module_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.module_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.module_bytes.is_empty() {
            os.write_bytes(1, &self.module_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAssemblyConfiguration {
        WebAssemblyConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "module_bytes",
                    |m: &WebAssemblyConfiguration| { &m.module_bytes },
                    |m: &mut WebAssemblyConfiguration| { &mut m.module_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WebAssemblyConfiguration>(
                    "WebAssemblyConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WebAssemblyConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<WebAssemblyConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WebAssemblyConfiguration,
        };
        unsafe {
            instance.get(WebAssemblyConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for WebAssemblyConfiguration {
    fn clear(&mut self) {
        self.module_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAssemblyConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAssemblyConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogConfiguration {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogConfiguration {
    fn default() -> &'a LogConfiguration {
        <LogConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl LogConfiguration {
    pub fn new() -> LogConfiguration {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogConfiguration {
        LogConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<LogConfiguration>(
                    "LogConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<LogConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LogConfiguration,
        };
        unsafe {
            instance.get(LogConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for LogConfiguration {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageProxyConfiguration {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageProxyConfiguration {
    fn default() -> &'a StorageProxyConfiguration {
        <StorageProxyConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl StorageProxyConfiguration {
    pub fn new() -> StorageProxyConfiguration {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StorageProxyConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageProxyConfiguration {
        StorageProxyConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &StorageProxyConfiguration| { &m.address },
                    |m: &mut StorageProxyConfiguration| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StorageProxyConfiguration>(
                    "StorageProxyConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StorageProxyConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<StorageProxyConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageProxyConfiguration,
        };
        unsafe {
            instance.get(StorageProxyConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for StorageProxyConfiguration {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageProxyConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageProxyConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcClientConfiguration {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcClientConfiguration {
    fn default() -> &'a GrpcClientConfiguration {
        <GrpcClientConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl GrpcClientConfiguration {
    pub fn new() -> GrpcClientConfiguration {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GrpcClientConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcClientConfiguration {
        GrpcClientConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &GrpcClientConfiguration| { &m.address },
                    |m: &mut GrpcClientConfiguration| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GrpcClientConfiguration>(
                    "GrpcClientConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrpcClientConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<GrpcClientConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrpcClientConfiguration,
        };
        unsafe {
            instance.get(GrpcClientConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for GrpcClientConfiguration {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcClientConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcClientConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11application.proto\x12\x03oak\"\xe3\x01\n\x18ApplicationConfigurati\
    on\x129\n\x0cnode_configs\x18\x01\x20\x03(\x0b2\x16.oak.NodeConfiguratio\
    nR\x0bnodeConfigs\x127\n\x18initial_node_config_name\x18\x02\x20\x01(\tR\
    \x15initialNodeConfigName\x126\n\x17initial_entrypoint_name\x18\x03\x20\
    \x01(\tR\x15initialEntrypointName\x12\x1b\n\tgrpc_port\x18\x04\x20\x01(\
    \x05R\x08grpcPort\"\xc7\x02\n\x11NodeConfiguration\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12@\n\x0bwasm_config\x18\x02\x20\x01(\x0b2\x1d\
    .oak.WebAssemblyConfigurationH\0R\nwasmConfig\x126\n\nlog_config\x18\x03\
    \x20\x01(\x0b2\x15.oak.LogConfigurationH\0R\tlogConfig\x12G\n\x0estorage\
    _config\x18\x04\x20\x01(\x0b2\x1e.oak.StorageProxyConfigurationH\0R\rsto\
    rageConfig\x12L\n\x12grpc_client_config\x18\x05\x20\x01(\x0b2\x1c.oak.Gr\
    pcClientConfigurationH\0R\x10grpcClientConfigB\r\n\x0bconfig_type\"=\n\
    \x18WebAssemblyConfiguration\x12!\n\x0cmodule_bytes\x18\x01\x20\x01(\x0c\
    R\x0bmoduleBytes\"\x12\n\x10LogConfiguration\"5\n\x19StorageProxyConfigu\
    ration\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\"3\n\x17GrpcC\
    lientConfiguration\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07addressb\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
