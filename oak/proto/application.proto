//
// Copyright 2018 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.application;

// An ApplicationConfiguration represents a unit of deployment in Oak.
//
// An Oak Application is built from a collection of interconnected Nodes,
// each of which is running the code described by an entry in this
// configuration.  These Nodes are created dynamically at runtime, with
// the exception of the specified initial Node (which is created by the
// Oak runtime).
message ApplicationConfiguration {
  // Collection of available Node configurations, indexed by name (which must be
  // unique across the collection).  Each Node in the application will run under
  // a configuration that is identified by an entry in this collection.
  repeated NodeConfiguration node_configs = 1;
  // Indication of what configuration the initial Node should run.  Must identify a
  // NodeConfiguration entry that holds a WebAssemblyConfiguration object.
  string initial_node_config_name = 2;
  // The name of an exported Web Assembly function in the initial Node to
  // be used as the Node's main entrypoint.
  string initial_entrypoint_name = 3;
  // Port number used by the gRPC pseudo-node; must be >= 1024.
  int32 grpc_port = 4;
}

// NodeConfiguration indicates the configuration of a created Node.
message NodeConfiguration {
  string name = 1;
  oneof config_type {
    WebAssemblyConfiguration wasm_config = 2;
    LogConfiguration log_config = 3;
    StorageProxyConfiguration storage_config = 4;
    GrpcServerConfiguration grpc_server_config = 5;
    GrpcClientConfiguration grpc_client_config = 6;
    RoughtimeClientConfiguration roughtime_client_config = 7;
  }
}

// WebAssemblyConfiguration describes the configuration of a Web Assembly based Node.
message WebAssemblyConfiguration {
  // The compiled code of the Oak Node, in WebAssembly binary format.
  // See https://webassembly.org/docs/binary-encoding/ .
  // TODO(#804): Replace this with just a hash of the bytecode to instantiate, and
  // pass the actual bytecode to the Oak Manager in some other way.
  bytes module_bytes = 1;
}

// LogConfiguration describes the configuration of a logging pseudo-Node (which
// is provided by the Oak Runtime).
message LogConfiguration {}

// StorageProxyConfiguration describes the configuration of a storage proxy
// pseudo-Node (which is provided by the Oak Runtime), connected to a specific
// storage provider.
message StorageProxyConfiguration {
  // The address of the external storage provider.
  string address = 1;
}

// GrpcServerConfiguration describes the configuration of a gRPC server
// pseudo-Node (which is provided by the Oak Runtime), that processes gRPC
// requests from external (non-Oak) clients.
message GrpcServerConfiguration {
  // The endpoint address for the gRPC server to listen on.
  // `address` is represented as an "ip_address:tcp_port" string.
  string address = 1;
  // Loaded private RSA key file used by a gRPC server pseudo-Node.
  string grpc_tls_private_key = 2;
  // Loaded PEM encoded X.509 TLS certificate file used by a gRPC server pseudo-Node.
  string grpc_tls_certificate = 3;
}

// GrpcClientConfiguration describes the configuration of a gRPC client
// pseudo-Node (which is provided by the Oak Runtime), connected to a specific
// external (non-Oak) gRPC service.
message GrpcClientConfiguration {
  // The URI component of a gRPC server endpoint. Must contain the "Host" element.
  // https://docs.rs/tonic/0.2.1/tonic/transport/struct.Uri.html
  string uri = 1;
  // Loaded PEM encoded X.509 TLS root certificate file used to authenticate an external gRPC
  // service.
  string root_tls_certificate = 2;
  // The endpoint address of the external gRPC service.
  // `address` is represented as an "ip_address:tcp_port" string.
  string address = 3;
}

// RoughtimeClientConfiguration describes the configuration of a Roughtime
// client pseudo-Node (which is provided by the Oak Runtime), with the
// given external Roughtime servers and connection parameters.
message RoughtimeClientConfiguration {
  // The collection of Roughtime servers to query. A default set of servers
  // will be used if this is empty.
  repeated RoughtimeServer servers = 1;
  // Connection parameters; default values will be used if any parameter is
  // zero.
  int32 min_overlapping_intervals = 2;
  int32 timeout_seconds = 3;
  int32 server_retries = 4;
  uint32 max_radius_microseconds = 5;
}

// Information to identify a particular Roughtime server.
// Only UDP and Ed25519 public keys are currently supported.
message RoughtimeServer {
  string name = 1;
  string host = 2;
  uint32 port = 3;
  string public_key_base64 = 4;
}
