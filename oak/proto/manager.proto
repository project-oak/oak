//
// Copyright 2018 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak;

// An ApplicationConfiguration represents a unit of deployment in Oak.
//
// An Oak Application is built from a collection of interconnected Nodes,
// each of which is running the code described by an entry in this
// configuration.  These Nodes are created dynamically at runtime, with
// the exception of the specified initial Node (which is created by the
// Oak runtime).
message ApplicationConfiguration {
  // Collection of available Node configurations, indexed by name (which must be
  // unique across the collection).  Each Node in the application will run under
  // a configuration that is identified by an entry in this collection.
  repeated NodeConfiguration node_configs = 1;
  // Indication of what configuration the initial Node should run.  Must identify a
  // NodeConfiguration entry that holds a WebAssemblyConfiguration object.
  string initial_node = 2;
  // Port number used by the gRPC pseudo-node. If zero or unset, port will be chosen automatically.
  int32 grpc_port = 3;
}

// NodeConfiguration indicates the configuration of a created Node.
message NodeConfiguration {
  string name = 1;
  oneof config_type {
    WebAssemblyConfiguration wasm_config = 2;
    LogConfiguration log_config = 3;
    StorageProxyConfiguration storage_config = 4;
  }
}

// WebAssemblyConfiguration describes the configuration of a Web Assembly based Node.
message WebAssemblyConfiguration {
  // The compiled code of the Oak Node, in WebAssembly binary format.
  // See https://webassembly.org/docs/binary-encoding/ .
  // TODO: Replace this with just a hash of the bytecode to instantiate, and
  // pass the actual bytecode to the Oak Manager in some other way.
  bytes module_bytes = 1;
}

// LogConfiguration describes the configuration of a logging pseudo-Node (which
// is provided by the Oak Runtime).
message LogConfiguration {
}

// StorageProxyConfiguration describes the configuration of a storage proxy
// pseudo-Node (which is provided by the Oak Runtime), connected to a specific
// storage provider.
message StorageProxyConfiguration {
  // The address of the external storage provider.
  string address = 1;
}

message CreateApplicationRequest {
  ApplicationConfiguration application_configuration = 1;
}

message CreateApplicationResponse {
  // The unique ID of the newly created Application.
  string application_id = 1;

  // The port on which the Application is listening over gRPC.
  int32 grpc_port = 2;
}

message TerminateApplicationRequest {
  string application_id = 1;
}

message TerminateApplicationResponse {
}

// Untrusted service in charge of creating Oak Applications on demand.
service Manager {
  // Request the creation of a new Oak Application with the specified configuration.
  //
  // After the Oak Node is created, the client should connect to the returned
  // endpoint via gRPC and perform a direct attestation against the Node itself,
  // to verify that its configuration corresponds to what the client expects.
  rpc CreateApplication(CreateApplicationRequest) returns (CreateApplicationResponse);

  // Request that an Oak Application terminate.
  rpc TerminateApplication(TerminateApplicationRequest) returns (TerminateApplicationResponse);
}
