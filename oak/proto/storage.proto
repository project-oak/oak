//
// Copyright 2019 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak;

import "google/rpc/status.proto";

message ReadRequest {
  bytes storage_id = 1;
  bytes transaction_id = 2;
  bytes name = 3;
}

message ReadResponse {
  bytes value = 1;
}

message WriteRequest {
  bytes storage_id = 1;
  bytes transaction_id = 2;
  bytes name = 3;
  bytes value = 4;
}

message WriteResponse {
}

message DeleteRequest {
  bytes storage_id = 1;
  bytes transaction_id = 2;
  bytes name = 3;
}

message DeleteResponse {
}

message BeginRequest {
  bytes storage_id = 1;
}

message BeginResponse {
  bytes transaction_id = 1;
}

message CommitRequest {
  bytes storage_id = 1;
  bytes transaction_id = 2;
}

message CommitResponse {
}

message RollbackRequest {
  bytes storage_id = 1;
  bytes transaction_id = 2;
}

message RollbackResponse {
}

// Wrapper message used to send requests via the StorageChannel interface.
message StorageOperationRequest {
  // The name of the storage on which to perform the operation.
  // The StorageChannel generates a name-based (version 5) UUID from this value.
  bytes storage_name = 1;

  oneof operation {
    ReadRequest read_request = 2;
    WriteRequest write_request = 3;
    DeleteRequest delete_request = 4;
    BeginRequest begin_request = 5;
    CommitRequest commit_request = 6;
    RollbackRequest rollback_request = 7;
  }
}

// Wrapper message used to send responses via the StorageChannel interface.
message StorageOperationResponse {
  // The status returned by the wrapped storage operation.
  google.rpc.Status status = 1;

  oneof operation {
    ReadResponse read_response = 2;
    WriteResponse write_response = 3;
    DeleteResponse delete_response = 4;
    BeginResponse begin_response = 5;
    CommitResponse commit_response = 6;
    RollbackResponse rollback_response = 7;
  }
}

service Storage {
  rpc Read(ReadRequest) returns (ReadResponse);
  rpc Write(WriteRequest) returns (WriteResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);

  rpc Begin(BeginRequest) returns (BeginResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);
  rpc Rollback(RollbackRequest) returns (RollbackResponse);
}
