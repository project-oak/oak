# Builds an artifact from the input build config, and uploads it to Ent. Then
# generates the SLSA provenance for it and uploads that to Ent too.
# Returns (1) the name and digest of the generated artifact as a
# based64-encoded string, and (2) the digest of the provenance.
name: Build Provenance

on:
  workflow_call:
    inputs:
      build-config-path:
        required: true
        type: string
    # Map the workflow outputs to job outputs
    outputs:
      artifact_digest:
        description:
          'Base64-encoded string containing the sha256 digest and name of the
          artifact.'
        value: ${{ jobs.upload_provenance.outputs.artifact_digest }}
      provenance_digest:
        description: 'SHA256 digest of the provenance.'
        value: ${{ jobs.upload_provenance.outputs.provenance_digest }}
    # usage: secrets: inherit
    secrets:
      ENT_API_KEY:
        required: true

jobs:
  generate_provenance:
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_docker-based_slsa3.yml@main
    with:
      # TODO: automatically retrieve the following two from the scripts.
      builder-image: 'europe-west2-docker.pkg.dev/oak-ci/oak-development/oak-development'
      builder-digest: 'sha256:7751fbbecd9727a9655299a002bfc2c9be6a773a8c2a2185feb8383dfef57b06'
      config-path: ${{ inputs.build-config-path }}
      compile-builder: true

  # This job uploads the signed provenance from the previous step to Ent, and
  # publishes a comment about it on the PR.
  upload_provenance:
    needs: [generate_provenance]
    runs-on: ubuntu-20.04
    permissions:
      # Allow the job to update the repo with the latest provenance info and index.
      contents: write
      # Allow the job to add a comment to the PR.
      pull-requests: write

    steps:
      # See https://github.com/google/ent
      - name: Download Ent CLI (post-merge only)
        if: |
          github.event_name == 'push' &&
          steps.cache-ent.outputs.cache-hit != 'true'
        env:
          ENT_URL: https://ent-server-62sa4xcfia-ew.a.run.app
          ENT_DIGEST: sha256:944a34854a2bf9c5d32f3bffa93885ee1c7ef8ab0f4fcc30898a981050ae4233
        run: |
          curl --fail ${ENT_URL}/raw/${ENT_DIGEST} > /usr/local/bin/ent
          chmod +x /usr/local/bin/ent
          ent
          cat <<EOF > ~/.config/ent.toml
          [[remotes]]
          name = 'ent-store'
          url = '${ENT_URL}'
          write = true
          api_key = '${{ secrets.ENT_API_KEY }}'
          EOF

      - name: Download the DSSE document (post-merge only)
        # if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.generate_provenance.outputs.provenance-name }}

      - name: Upload to Ent (post-merge only)
        if: github.event_name == 'push'
        id: ent_upload
        run: |
          echo "provenance_digest=$(ent put ${{ needs.generate_provenance.outputs.provenance-name }})" >> $GITHUB_OUTPUT

      - name: Download the built artifact
        # if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.generate_provenance.outputs.build-outputs-name }}

      - name: Display structure of downloaded files
        run: ls -R
        working-directory:
          ${{ needs.generate_provenance.outputs.build-outputs-name }}

      - name: Get artifact digest
        run: |
          echo "artifact_digest=$(sha256sum ${{ needs.generate_provenance.outputs.provenance-name }})" >>$GITHUB_OUTPUT

      # Add the artifact digest and name to the ./comment file.
      - name: Format artifact digest
        run: |
          echo -e "Artifact digest and name:\n\n\`\`\`" >> ./comment
          echo "${{ steps.output.artifact_digest }} | tee -a ./comment
          echo -e "\`\`\`" >> ./comment

      # Add the provenance digest to the ./comment file.
      - name: Format provenance digest
        run: |
          echo -e "\n\nProvenance digest:\n\n\`\`\`" >> ./comment
          echo ${{ steps.ent_upload.outputs.provenance_digest }} | tee -a ./comment
          echo -e "\`\`\`" >> ./comment

      # Post a comment on the PR containing the sha256 digests of the binary and its provenance.
      - name: Post the comment (post-merge only)
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const comment_contents = await fs.readFile('./comment');

            const opts = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            // See:
            // - https://octokit.github.io/rest.js/v17#previews
            // - https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit
            opts.mediaType = {
                previews: ['groot']
            };

            const issues = await github.paginate(opts);

            await github.rest.issues.createComment({
              issue_number: issues[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${comment_contents}`});

      # Debug step: Print the content of the ./comment file & inputs to the workflow.
      - name: Print ./comment & inputs
        if: github.event_name != 'push'
        run: |
          head ./comment
          echo "attestation-name: ${{ needs.generate_provenance.outputs.provenance-name }}"
