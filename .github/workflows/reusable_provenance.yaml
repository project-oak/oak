# Uses the Docker-based SLSA3 generator to build the binary and its provenance.
# Then uploads the binary and its provenance to Ent.
name: Build SLSA3 Provenance

on:
  workflow_call:
    inputs:
      build-config-path:
        required: true
        type: string
    secrets:
      ENT_API_KEY:
        required: true

jobs:
  get_inputs:
    outputs:
      artifact-path: ${{ steps.artifact-path.outputs.name }}
      provenance-name: ${{ steps.provenance-name.outputs.name }}
      builder-digest: ${{ steps.builder-digest.outputs.builder-digest }}

    runs-on: ubuntu-20.04

    steps:
      - name: Mount main branch
        uses: actions/checkout@v3

      - name: Get artifact path
        id: artifact-path
        run: |
          echo "name=$(tail -1 ${{ inputs.build-config-path }} | grep -oP 'artifact_path = \K(.*)')" >> $GITHUB_OUTPUT

      - name: Get provenance name
        id: provenance-name
        run: |
          echo "name=$(basename ${{ steps.artifact-path.outputs.name }}).intoto" >> $GITHUB_OUTPUT

      - name: Get builder image info
        id: builder-digest
        run: |
          source ./scripts/common
          echo "builder-digest=$(echo $DOCKER_IMAGE_REPO_DIGEST | cut -d'@' -f2)" >> $GITHUB_OUTPUT

      - name: Print values
        run: |
          echo "${{ steps.artifact-path.outputs.name }}"
          echo "${{ steps.provenance-name.outputs.name }}"
          echo "${{ steps.builder-digest.outputs.builder-digest }}"

  generate_provenance:
    needs: [get_inputs]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_docker-based_slsa3.yml@v1.6.0
    with:
      builder-image: 'europe-west2-docker.pkg.dev/oak-ci/oak-development/oak-development'
      builder-digest: ${{ needs.get_inputs.outputs.builder-digest }}
      config-path: ${{ inputs.build-config-path }}
      provenance-name: ${{ needs.get_inputs.outputs.provenance-name }}
      compile-builder: true

  # This job uploads the signed provenance from the previous step to Ent, and
  # publishes a comment for each binary on the PR.
  upload_provenance:
    if: github.event_name != 'pull_request'
    needs: [get_inputs, generate_provenance]
    runs-on: ubuntu-20.04
    permissions:
      # Allow the job to update the repo with the latest provenance info and index.
      contents: write
      # Allow the job to add a comment to the PR.
      pull-requests: write

    steps:
      # See https://github.com/google/ent
      - name: Download Ent CLI
        if: steps.cache-ent.outputs.cache-hit != 'true'
        env:
          ENT_URL: https://ent-server-62sa4xcfia-ew.a.run.app
          ENT_DIGEST: sha256:944a34854a2bf9c5d32f3bffa93885ee1c7ef8ab0f4fcc30898a981050ae4233
        run: |
          curl --fail ${ENT_URL}/raw/${ENT_DIGEST} > /usr/local/bin/ent
          chmod +x /usr/local/bin/ent
          ent
          cat <<EOF > ~/.config/ent.toml
          [[remotes]]
          name = 'ent-store'
          url = '${ENT_URL}'
          write = true
          api_key = '${{ secrets.ENT_API_KEY }}'
          EOF

      - name: Download the built artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.generate_provenance.outputs.build-outputs-name }}
          path: downloads

      - name: Download the DSSE document
        uses: actions/download-artifact@v3
        with:
          name:
            ${{ needs.generate_provenance.outputs.attestations-download-name }}
          path: downloads

      - name: Debug step - Display structure of downloaded files
        run: ls -R
        working-directory: downloads

      - name: Upload binary to Ent
        id: ent_upload_binary
        working-directory: downloads
        run: |
          echo "binary_digest=$(ent put ${{ needs.get_inputs.outputs.artifact-path }})" >> $GITHUB_OUTPUT

      - name: Upload provenance to Ent
        id: ent_upload_provenance
        working-directory: downloads
        # The output on any trigger other than "pull_request" has an addition ".sigstore" suffix.
        # See https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/docker#workflow-outputs
        run: |
          echo "provenance_digest=$(ent put ${{ needs.get_inputs.outputs.provenance-name }}.sigstore)" >> $GITHUB_OUTPUT

      # Add the provenance digest to the ./comment file as a TOML formatted doc.
      - name: Format artifact and provenance digest (post-merge only)
        run: |
          echo -e "\n" >> ./comment
          echo -e "artifact_name = \"$(basename ${{ needs.get_inputs.outputs.artifact-path }})\"" >> ./comment
          echo -e "artifact_digest = \"$(cut -d' ' -f1 <<<'${{ steps.ent_upload_binary.outputs.binary_digest }}')\"" >> ./comment
          echo -e "provenance_digest = \"$(cut -d' ' -f1 <<<'${{ steps.ent_upload_provenance.outputs.provenance_digest }}')\"" >> ./comment

      # Post a comment on the PR containing the sha256 digests of the binary and its provenance.
      - name: Post the comment (post-merge only)
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const comment_contents = await fs.readFile('./comment');

            const opts = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            // See:
            // - https://octokit.github.io/rest.js/v17#previews
            // - https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit
            opts.mediaType = {
                previews: ['groot']
            };

            const issues = await github.paginate(opts);

            await github.rest.issues.createComment({
              issue_number: issues[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${comment_contents}`});

  # Debug step similar to `upload_provenance`, but runs on pull-request events. Differs from
  # `upload_provenance` in that it does not publish the binary and its provenance into Ent and that
  # it does not post a comment on the PR.
  debug_provenance:
    if: github.event_name == 'pull_request'
    needs: [get_inputs, generate_provenance]
    runs-on: ubuntu-20.04

    steps:
      - name: Download the built artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.generate_provenance.outputs.build-outputs-name }}
          path: downloads

      - name: Download the DSSE document
        uses: actions/download-artifact@v3
        with:
          name:
            ${{ needs.generate_provenance.outputs.attestations-download-name }}
          path: downloads

      - name: Display structure after downloading the files (debug step)
        run: ls -R
        working-directory: downloads

      - name: Print binary digest
        working-directory: downloads
        run: echo "$(sha256sum ${{ needs.get_inputs.outputs.artifact-path }})"

      - name: Print provenance digest
        working-directory: downloads
        run: |
          echo "$(sha256sum ${{ needs.get_inputs.outputs.provenance-name }})"

      - name: Format artifact and provenance digest (debug-step)
        working-directory: downloads
        run: |
          echo -e "\n" >> ./comment
          echo -e "artifact_name = \"$(basename ${{ needs.get_inputs.outputs.artifact-path }})\"" >> ./comment
          echo -e "artifact_digest = \"$(cut -d' ' -f1 <<<$(sha256sum ${{ needs.get_inputs.outputs.artifact-path }}))\"" >> ./comment
          echo -e "provenance_digest = \"$(cut -d' ' -f1 <<<$(sha256sum ${{ needs.get_inputs.outputs.provenance-name }}))\"" >> ./comment

      # Debug step: Print the content of the ./comment file & inputs to the workflow.
      - name: Print ./comment & inputs
        working-directory: downloads
        run: |
          head -n 15 ./comment
