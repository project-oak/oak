# This workflow wraps the SLSA generator reusable workflow and adds an
# additional step to simulate a dry run. This allows testing downstream jobs in
# the caller workflow. A reusable workflow is required, as opposed to a job
# with multiple steps, because `generator_generic_slsa3` iteslf is a reusable
# workflow and can only be referenced at the top-level `jobs.*.uses' key. In
# particular it cannot be used within a step guarded by the if.
name: Generate Provenance

on:
  workflow_call:
    inputs:
      attestation-name:
        description:
          'Custom name for the provenance attestation generated by the workflow.'
        required: true
        type: string
      base64-subject:
        description:
          'Base64-encoded string containing the name and sha256 digest of the
          file to generate the provenance for.'
        required: true
        type: string

jobs:
  # This job calls the generic SLSA workflow to generate provenance.
  # See https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
  generate_provenance:
    # The `generator_generic_slsa3` workflow does not support `pull_request`
    # triggers, and fails on `pull_request` events. So we check the Github
    # event here before calling the workflow.
    if: github.event_name == 'push'
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1
    with:
      base64-subjects: '${{ inputs.base64-subject }}'
      # Set a custom name for the provenance attestation.
      attestation-name: '${{ inputs.attestation-name }}'
      # Upload the provenance.
      upload-assets: true
      # Build the generator from source.
      compile-generator: true

  generate_provenance_dry_run:
    if: github.event_name != 'push'
    runs-on: ubuntu-20.04
    steps:
      # Debug step: Print the input values passed to the workflow.
      - name: Print inputs
        run: |
          echo "Base64 Subject: ${{ inputs.base64-subject }}"
          echo "Attestation-name: ${{ inputs.attestation-name }}"
