name: Build Provenance

# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-using-concurrency-to-cancel-any-in-progress-job-or-run
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_provenance:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-20.04
    env:
      OAK_BAREMETAL_CROSVM_PATH: './experimental/oak_baremetal_app_crosvm/target/x86_64-unknown-none/release/oak_baremetal_app_crosvm'

    permissions:
      # Allow the job to update the repo with the latest provenances and index.
      contents: write
      # Allow the job to add a comment to the PR.
      pull-requests: write

    steps:
      - name: Mount main branch
        uses: actions/checkout@v2

      - name: Mount provenance branch
        uses: actions/checkout@v2
        with:
          ref: provenance
          path: provenance-branch

      - name: Git setup
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      # Copied from https://github.com/jens-maus/RaspberryMatic/blob/ea6b8ce0dd2d53ea88b2766ba8d7f8e1d667281f/.github/workflows/ci.yml#L34-L40
      - name: free disk space
        run: |
          df --human-readable
          sudo swapoff --all
          sudo rm --force /swapfile
          sudo apt clean
          docker rmi $(docker image ls --all --quiet)
          df --human-readable

      - name: Docker pull
        timeout-minutes: 10
        run: |
          ./scripts/docker_pull
          df --human-readable

      - name: Generate provenance for crosvm Baremetal binary
        run: |
          ./scripts/generate_provenance -c buildconfigs/oak_baremetal_app_crosvm.toml -s

      - name: Move new provenance files to the provenance branch
        if: github.event_name == 'push'
        run: cp -r ./provenance/. ./provenance-branch/

      - name: Commit new provenance files to the provenance branch
        if: github.event_name == 'push'
        run: |
          git -C ./provenance-branch add .
          git -C ./provenance-branch status
          git -C ./provenance-branch diff --staged
          git -C ./provenance-branch commit --allow-empty --message="Provenance files for ${GITHUB_SHA}"
          git -C ./provenance-branch tag --annotate --message "record source commit" provenance-${GITHUB_SHA}

      - name: Push provenance branch
        if: github.event_name == 'push'
        run: git -C ./provenance-branch push --follow-tags

      # Download the Ent CLI and configure a remote with write access using a private API key, if
      # available (GitHub secrets are not available on forks, see
      # https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow).
      # If this step is run from a fork, the API key will be empty, and Ent will work in read-only
      # mode.
      # See https://github.com/google/ent
      - name: Download Ent CLI
        if: steps.cache-ent.outputs.cache-hit != 'true'
        env:
          ENT_URL: https://ent-server-62sa4xcfia-ew.a.run.app
          ENT_DIGEST: sha256:944a34854a2bf9c5d32f3bffa93885ee1c7ef8ab0f4fcc30898a981050ae4233
        run: |
          curl --fail ${ENT_URL}/raw/${ENT_DIGEST} > /usr/local/bin/ent
          chmod +x /usr/local/bin/ent
          ent
          cat <<EOF > ~/.config/ent.toml
          [[remotes]]
          name = 'ent-store'
          url = '${ENT_URL}'
          write = true
          api_key = '${{ secrets.ENT_API_KEY }}'
          EOF

      # Upload artifacts to Ent, where they will be retained and publicly accessible by their hash.
      # This only applies to `push` events, since it needs access to a valid Ent API key (which is
      # not available on forks / PRs).
      - name: Upload to Ent
        if: github.event_name == 'push'
        run: |
          ent put ${{ env.OAK_BAREMETAL_CROSVM_PATH }}

      # Build reproducibility index on `push` events.
      - name: Build reproducibility index
        if: github.event_name == 'push'
        uses: ./.github/actions/reproducibility_index
        with:
          OAK_BAREMETAL_CROSVM_PATH: ${{ env.OAK_BAREMETAL_CROSVM_PATH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build reproducibility index on non-`push` events. This is similar to the previous step,
      # but does not pass in the GITHUB_TOKEN, which is not available on forks / PRs).
      - name: Build reproducibility index
        if: github.event_name != 'push'
        uses: ./.github/actions/reproducibility_index
        with:
          OAK_BAREMETAL_CROSVM_PATH: ${{ env.OAK_BAREMETAL_CROSVM_PATH }}

      # Experimental step using SLSA generic provenance generator
      # See https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
      - name: Generate oak_baremetal_app_crosvm hash
        id: hash
        run: |
          # first cd to the directory containing the target binary. This allows us calling sha256
          # on the target binary instead of having to provide the full path. This is fine for this
          # experimental version, but has to be cleaned-up once we switch completely to SLSA
          # provenance generation.
          cd $(dirname ${{ env.OAK_BAREMETAL_CROSVM_PATH }})
          # sha256sum generates sha256 hash for the target binary.
          # base64 --wrap=0 disables line wrapping, and encodes to base64 and outputs on a single line.
          echo "::set-output name=hashes::$(sha256sum $(basename ${{ env.OAK_BAREMETAL_CROSVM_PATH }}) | base64 --wrap=0)"

  # This job calls the generic workflow to generate provenance.
  # See https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
  provenance:
    if: github.event_name == 'push'
    needs: [build_provenance]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
    with:
      base64-subjects: '${{ needs.build_provenance.outputs.hashes }}'
      # Set a custom name for the provenance attestation.
      attestation-name: 'oak_baremetal_app_crosvm.intoto.jsonl'
      # Upload provenance to a new release
      upload-assets: true
      # Build the generator from source.
      compile-generator: true
