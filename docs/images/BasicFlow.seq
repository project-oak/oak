participant Client [fillcolor="green"]
participant Oak Manager\n(untrusted) as Mgr [fillcolor="orange"]
participant Oak Runtime\n(in Enclave) as Runtime [fillcolor="palegreen"]
participant Oak Module\n(in Enclave) as Node [fillcolor="palegreen"]

Client --> Mgr: CreateApplicationReq(.wasm data)
Note over Mgr: load engine and\n.wasm into enclave [fillcolor="orange"]
Mgr -->> Runtime: create
Runtime -> Node: invoke oak_main()
Node -> Runtime: oak.channel_find("grpc_in")
Runtime -> Node: "grpc_in" => 1
Node -> Runtime: oak.channel_find("grpc_out")
Runtime -> Node: "grpc_out" => 2
Node -> Runtime: oak.wait_on_channels(1)

Mgr --> Client: CreateApplicationRsp(port)
Client --> Runtime: GetAttestationReq()
Runtime --> Client: GetAttestationRsp(key exchange)

Note over Client:  [color="white"]

Client --> Runtime: gRPC: DoSomethingRequest
Note over Runtime: decrypt & write\ngRPC req to channel [fillcolor="palegreen"]
Runtime -> Node: channel 1 ready
Note over Node: (prepare linear memory\narea for receive) [fillcolor="palegreen"]
Node -> Runtime: oak.channel_read(1, &buf)
Runtime -> Node: encrypted, serialized\ngRPC request
Note over Node: decrypt &\nunmarshal request [fillcolor="palegreen"]
Note over Node: do something [fillcolor="palegreen"]
Note over Node: serialize &\nencrypt response [fillcolor="palegreen"]
Node -> Runtime: oak.channel_write(2, &rsp)
Note over Runtime: encrypt & send\ngRPC response [fillcolor="palegreen"]
Runtime -> Client: gRPC: DoSomethingResponse
Node -> Runtime: oak.wait_on_channels(1)


Note over Client: [color="white"]

Client --> Mgr: TerminateApplication
Mgr --> Runtime: destroy
Runtime -> Node: status=CHANNEL_CLOSED
Note over Node: oak_main exits [fillcolor="palegreen"]