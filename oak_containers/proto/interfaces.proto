//
// Copyright 2023 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.containers;

import "google/protobuf/empty.proto";
import "oak_crypto/proto/v1/crypto.proto";
import "oak_remote_attestation/proto/v1/messages.proto";

// As images can be large (hundreds of megabytes), the launcher chunks up the response into smaller
// pieces to respect proto/gRPC limits. The image needs to be reassembled in the stage1 or the
// orchestrator.
message GetImageResponse {
  bytes image_chunk = 1;
}

message GetApplicationConfigResponse {
  // Arbitrary config that the container can retrieve from the orchestrator.
  // Included in the attestation measurements conducted by the orchestrator.
  bytes config = 1;
}

message SendAttestationEvidenceRequest {
  oak.session.v1.AttestationEvidence evidence = 1;
}

message GetAttestationEvidenceResponse {
  oak.session.v1.AttestationEvidence evidence = 1;
}

message GetCryptoContextRequest {
  // Ephemeral Diffie-Hellman client public key that is needed to derive a session key.
  bytes serialized_encapsulated_public_key = 1;
}

message GetCryptoContextResponse {
  // Session keys for decrypting client requests and encrypting enclave responses.
  oak.crypto.v1.CryptoContext context = 1;
}

// Defines the service exposed by the launcher, that can be invoked by the stage1 and the
// orchestrator.
service Launcher {
  // Provides stage1 with the Oak system image (which contains the Linux distribution and the
  // orchestrator binary).
  rpc GetOakSystemImage(google.protobuf.Empty) returns (stream GetImageResponse) {}

  // Provides orchestrator with the trusted container image.
  rpc GetContainerBundle(google.protobuf.Empty) returns (stream GetImageResponse) {}

  // This method is used by the orchestrator to load and measure the trusted
  // application config. The orchestrator will later, separately expose this
  // config to the application.
  rpc GetApplicationConfig(google.protobuf.Empty) returns (GetApplicationConfigResponse) {}

  // Sends Attestation Evidence containing the Attestation Report with corresponding measurements
  // and public keys to the Launcher.
  // This API is called exactly once after the Attestation Evidence is generated. Calling this API
  // a second time will result in an error.
  rpc SendAttestationEvidence(SendAttestationEvidenceRequest) returns (google.protobuf.Empty) {}

  // Notifies the launcher that the trusted app is ready to serve requests and listening on the
  // pre-arranged port (8080).
  rpc NotifyAppReady(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// Defines the service exposed by the orchestrator, that can be invoked by the application.
service Orchestrator {
  // Exposes the previously loaded trusted application config to the application,
  // which may choose to retrieve it.
  rpc GetApplicationConfig(google.protobuf.Empty) returns (GetApplicationConfigResponse) {}

  // Notifies the orchestrator that the trusted app is ready to serve requests and listening on the
  // pre-arranged port (8080).
  rpc NotifyAppReady(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // Returns Attestation Evidence containing the Attestation Report with corresponding measurements.
  rpc GetAttestationEvidence(google.protobuf.Empty) returns (GetAttestationEvidenceResponse) {}

  // Returns crypto context for decrypting client requests and encrypting enclave responses.
  // TODO(#3841): Store private key in the Orchestrator and generate session keys for each session.
  rpc GetCryptoContext(GetCryptoContextRequest) returns (GetCryptoContextResponse) {}
}
